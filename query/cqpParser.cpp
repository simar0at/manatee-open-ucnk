/** \file
 *  This C source file was generated by $ANTLR version 3.2 Fedora release 15 (Rawhide) Tue Feb  8 02:02:23 UTC 2011
 *
 *     -  From the grammar source file : cqp.g
 *     -                            On : 2013-05-10 15:01:48
 *     -                for the parser : cqpParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

	// Copyright (c) 1999-2010 Pavel Rychly

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cqpParser.hpp"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pcqpParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcqpParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pcqpParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pcqpParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   cqpParserTokenNames[42+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "OPT",
        (pANTLR3_UINT8) "REPOPT",
        (pANTLR3_UINT8) "SEQ",
        (pANTLR3_UINT8) "ANYPOS",
        (pANTLR3_UINT8) "BEGSTRUCT",
        (pANTLR3_UINT8) "ENDSTRUCT",
        (pANTLR3_UINT8) "WHOLESTRUCT",
        (pANTLR3_UINT8) "KW_MEET",
        (pANTLR3_UINT8) "KW_UNION",
        (pANTLR3_UINT8) "KW_WITHIN",
        (pANTLR3_UINT8) "KW_CONTAINING",
        (pANTLR3_UINT8) "KW_MU",
        (pANTLR3_UINT8) "KW_FREQ",
        (pANTLR3_UINT8) "WS_",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "NNUMBER",
        (pANTLR3_UINT8) "ATTR",
        (pANTLR3_UINT8) "REGEXP",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "LBRACKET",
        (pANTLR3_UINT8) "RBRACKET",
        (pANTLR3_UINT8) "LBRACE",
        (pANTLR3_UINT8) "RBRACE",
        (pANTLR3_UINT8) "STAR",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "QUEST",
        (pANTLR3_UINT8) "BINOR",
        (pANTLR3_UINT8) "BINAND",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "SEMI",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "EEQ",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "LEQ",
        (pANTLR3_UINT8) "GEQ",
        (pANTLR3_UINT8) "LSTRUCT",
        (pANTLR3_UINT8) "RSTRUCT",
        (pANTLR3_UINT8) "SLASH",
        (pANTLR3_UINT8) "POSNUM"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static cqpParser_query_return	query    (pcqpParser ctx);
static cqpParser_globpart_return	globpart    (pcqpParser ctx);
static cqpParser_globcond_return	globcond    (pcqpParser ctx);
static cqpParser_within_containing_part_return	within_containing_part    (pcqpParser ctx);
static cqpParser_within_number_return	within_number    (pcqpParser ctx);
static cqpParser_structure_return	structure    (pcqpParser ctx);
static cqpParser_oneposonly_return	oneposonly    (pcqpParser ctx);
static cqpParser_alignedpart_return	alignedpart    (pcqpParser ctx);
static cqpParser_mupart_return	mupart    (pcqpParser ctx);
static cqpParser_integer_return	integer    (pcqpParser ctx);
static cqpParser_meetop_return	meetop    (pcqpParser ctx);
static cqpParser_unionop_return	unionop    (pcqpParser ctx);
static cqpParser_sequence_return	sequence    (pcqpParser ctx);
static cqpParser_seq_return	seq    (pcqpParser ctx);
static cqpParser_repetition_return	repetition    (pcqpParser ctx);
static cqpParser_attvallist_return	attvallist    (pcqpParser ctx);
static cqpParser_attvaland_return	attvaland    (pcqpParser ctx);
static cqpParser_attval_return	attval    (pcqpParser ctx);
static cqpParser_atomquery_return	atomquery    (pcqpParser ctx);
static cqpParser_position_return	position    (pcqpParser ctx);
static cqpParser_oneposition_return	oneposition    (pcqpParser ctx);
static cqpParser_repopt_return	repopt    (pcqpParser ctx);
static ANTLR3_BOOLEAN	synpred1_cqp    (pcqpParser ctx);
static void	cqpParserFree(pcqpParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cqp.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new cqpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcqpParser
cqpParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return cqpParserNewSSD(instream, NULL);
}

/** \brief Create a new cqpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcqpParser
cqpParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcqpParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pcqpParser) ANTLR3_CALLOC(1, sizeof(cqpParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in cqpParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our cqpParser interface
     */
    ctx->query	= query;
    ctx->globpart	= globpart;
    ctx->globcond	= globcond;
    ctx->within_containing_part	= within_containing_part;
    ctx->within_number	= within_number;
    ctx->structure	= structure;
    ctx->oneposonly	= oneposonly;
    ctx->alignedpart	= alignedpart;
    ctx->mupart	= mupart;
    ctx->integer	= integer;
    ctx->meetop	= meetop;
    ctx->unionop	= unionop;
    ctx->sequence	= sequence;
    ctx->seq	= seq;
    ctx->repetition	= repetition;
    ctx->attvallist	= attvallist;
    ctx->attvaland	= attvaland;
    ctx->attval	= attval;
    ctx->atomquery	= atomquery;
    ctx->position	= position;
    ctx->oneposition	= oneposition;
    ctx->repopt	= repopt;
    ctx->synpred1_cqp	= synpred1_cqp;
    ctx->free			= cqpParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    	RECOGNIZER->displayRecognitionError = throwEvalQueryException;

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = cqpParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 cqpParserFree(pcqpParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return cqpParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_query513  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_query513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900006000) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_query513	= { FOLLOW_sequence_in_query513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_query526  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_query526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_query526	= { FOLLOW_BINAND_in_query526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globpart_in_query529  */
static	ANTLR3_BITWORD FOLLOW_globpart_in_query529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800006000) };
static  ANTLR3_BITSET_LIST FOLLOW_globpart_in_query529	= { FOLLOW_globpart_in_query529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITHIN_in_query545  */
static	ANTLR3_BITWORD FOLLOW_KW_WITHIN_in_query545_bits[]	= { ANTLR3_UINT64_LIT(0x0000048001748000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITHIN_in_query545	= { FOLLOW_KW_WITHIN_in_query545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CONTAINING_in_query548  */
static	ANTLR3_BITWORD FOLLOW_KW_CONTAINING_in_query548_bits[]	= { ANTLR3_UINT64_LIT(0x0000048001748000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CONTAINING_in_query548	= { FOLLOW_KW_CONTAINING_in_query548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_query552  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_query552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800006000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_query552	= { FOLLOW_within_containing_part_in_query552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_query560  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_query560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_query560	= { FOLLOW_SEMI_in_query560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globcond_in_globpart576  */
static	ANTLR3_BITWORD FOLLOW_globcond_in_globpart576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000002) };
static  ANTLR3_BITSET_LIST FOLLOW_globcond_in_globpart576	= { FOLLOW_globcond_in_globpart576_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_globpart579  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_globpart579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_globpart579	= { FOLLOW_BINAND_in_globpart579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globcond_in_globpart582  */
static	ANTLR3_BITWORD FOLLOW_globcond_in_globpart582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000002) };
static  ANTLR3_BITSET_LIST FOLLOW_globcond_in_globpart582	= { FOLLOW_globcond_in_globpart582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond601  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond601	= { FOLLOW_NUMBER_in_globcond601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond603  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond603	= { FOLLOW_DOT_in_globcond603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond606  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond606_bits[]	= { ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond606	= { FOLLOW_ATTR_in_globcond606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_globcond608  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_globcond608_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_globcond608	= { FOLLOW_NOT_in_globcond608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_globcond611  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_globcond611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_globcond611	= { FOLLOW_EQ_in_globcond611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond613  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond613	= { FOLLOW_NUMBER_in_globcond613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond615  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond615	= { FOLLOW_DOT_in_globcond615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond618  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond618	= { FOLLOW_ATTR_in_globcond618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_FREQ_in_globcond626  */
static	ANTLR3_BITWORD FOLLOW_KW_FREQ_in_globcond626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_FREQ_in_globcond626	= { FOLLOW_KW_FREQ_in_globcond626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_globcond629  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_globcond629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_globcond629	= { FOLLOW_LPAREN_in_globcond629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond632  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond632	= { FOLLOW_NUMBER_in_globcond632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond634  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond634	= { FOLLOW_DOT_in_globcond634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond637  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond637	= { FOLLOW_ATTR_in_globcond637_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_globcond639  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_globcond639_bits[]	= { ANTLR3_UINT64_LIT(0x00000FA000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_globcond639	= { FOLLOW_RPAREN_in_globcond639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_globcond642  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_globcond642_bits[]	= { ANTLR3_UINT64_LIT(0x00000F2000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_globcond642	= { FOLLOW_NOT_in_globcond642_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_globcond645  */
static	ANTLR3_BITWORD FOLLOW_set_in_globcond645_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_globcond645	= { FOLLOW_set_in_globcond645_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond657  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond657	= { FOLLOW_NUMBER_in_globcond657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_within_containing_part674  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_within_containing_part674_bits[]	= { ANTLR3_UINT64_LIT(0x0000048001748000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_within_containing_part674	= { FOLLOW_NOT_in_within_containing_part674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_within_containing_part702  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_within_containing_part702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_within_containing_part702	= { FOLLOW_LSTRUCT_in_within_containing_part702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_within_containing_part705  */
static	ANTLR3_BITWORD FOLLOW_structure_in_within_containing_part705_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_within_containing_part705	= { FOLLOW_structure_in_within_containing_part705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_within_containing_part707  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_within_containing_part707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_within_containing_part707	= { FOLLOW_RSTRUCT_in_within_containing_part707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_within_containing_part721  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_within_containing_part721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_within_containing_part721	= { FOLLOW_sequence_in_within_containing_part721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_number_in_within_containing_part733  */
static	ANTLR3_BITWORD FOLLOW_within_number_in_within_containing_part733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_within_number_in_within_containing_part733	= { FOLLOW_within_number_in_within_containing_part733_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_alignedpart_in_within_containing_part745  */
static	ANTLR3_BITWORD FOLLOW_alignedpart_in_within_containing_part745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_alignedpart_in_within_containing_part745	= { FOLLOW_alignedpart_in_within_containing_part745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_within_number776  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_within_number776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_within_number776	= { FOLLOW_NUMBER_in_within_number776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_structure821  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_structure821_bits[]	= { ANTLR3_UINT64_LIT(0x0000208000500002) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_structure821	= { FOLLOW_ATTR_in_structure821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_structure823  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_structure823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_structure823	= { FOLLOW_attvallist_in_structure823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_oneposonly838  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_oneposonly838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_oneposonly838	= { FOLLOW_attvallist_in_oneposonly838_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_oneposonly840  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_oneposonly840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_oneposonly840	= { FOLLOW_SEMI_in_oneposonly840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_alignedpart859  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_alignedpart859_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_alignedpart859	= { FOLLOW_ATTR_in_alignedpart859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_alignedpart861  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_alignedpart861_bits[]	= { ANTLR3_UINT64_LIT(0x0000040001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_alignedpart861	= { FOLLOW_COLON_in_alignedpart861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_alignedpart865  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_alignedpart865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_alignedpart865	= { FOLLOW_sequence_in_alignedpart865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_mupart882  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_mupart882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001800) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_mupart882	= { FOLLOW_LPAREN_in_mupart882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unionop_in_mupart886  */
static	ANTLR3_BITWORD FOLLOW_unionop_in_mupart886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_unionop_in_mupart886	= { FOLLOW_unionop_in_mupart886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_meetop_in_mupart890  */
static	ANTLR3_BITWORD FOLLOW_meetop_in_mupart890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_meetop_in_mupart890	= { FOLLOW_meetop_in_mupart890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_mupart893  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_mupart893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_mupart893	= { FOLLOW_RPAREN_in_mupart893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer905  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer905	= { FOLLOW_NUMBER_in_integer905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NNUMBER_in_integer912  */
static	ANTLR3_BITWORD FOLLOW_NNUMBER_in_integer912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NNUMBER_in_integer912	= { FOLLOW_NNUMBER_in_integer912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_MEET_in_meetop930  */
static	ANTLR3_BITWORD FOLLOW_KW_MEET_in_meetop930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_MEET_in_meetop930	= { FOLLOW_KW_MEET_in_meetop930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_meetop933  */
static	ANTLR3_BITWORD FOLLOW_position_in_meetop933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_meetop933	= { FOLLOW_position_in_meetop933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_meetop935  */
static	ANTLR3_BITWORD FOLLOW_position_in_meetop935_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000C0002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_meetop935	= { FOLLOW_position_in_meetop935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_meetop938  */
static	ANTLR3_BITWORD FOLLOW_integer_in_meetop938_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_meetop938	= { FOLLOW_integer_in_meetop938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_meetop940  */
static	ANTLR3_BITWORD FOLLOW_integer_in_meetop940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_meetop940	= { FOLLOW_integer_in_meetop940_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNION_in_unionop953  */
static	ANTLR3_BITWORD FOLLOW_KW_UNION_in_unionop953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNION_in_unionop953	= { FOLLOW_KW_UNION_in_unionop953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_unionop956  */
static	ANTLR3_BITWORD FOLLOW_position_in_unionop956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_unionop956	= { FOLLOW_position_in_unionop956_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_unionop958  */
static	ANTLR3_BITWORD FOLLOW_position_in_unionop958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_unionop958	= { FOLLOW_position_in_unionop958_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_seq_in_sequence970  */
static	ANTLR3_BITWORD FOLLOW_seq_in_sequence970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_seq_in_sequence970	= { FOLLOW_seq_in_sequence970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOR_in_sequence973  */
static	ANTLR3_BITWORD FOLLOW_BINOR_in_sequence973_bits[]	= { ANTLR3_UINT64_LIT(0x0000040001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOR_in_sequence973	= { FOLLOW_BINOR_in_sequence973_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_seq_in_sequence976  */
static	ANTLR3_BITWORD FOLLOW_seq_in_sequence976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_seq_in_sequence976	= { FOLLOW_seq_in_sequence976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_repetition_in_seq990  */
static	ANTLR3_BITWORD FOLLOW_repetition_in_seq990_bits[]	= { ANTLR3_UINT64_LIT(0x0000040001648002) };
static  ANTLR3_BITSET_LIST FOLLOW_repetition_in_seq990	= { FOLLOW_repetition_in_seq990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atomquery_in_repetition1012  */
static	ANTLR3_BITWORD FOLLOW_atomquery_in_repetition1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000074000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atomquery_in_repetition1012	= { FOLLOW_atomquery_in_repetition1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_repopt_in_repetition1018  */
static	ANTLR3_BITWORD FOLLOW_repopt_in_repetition1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_repopt_in_repetition1018	= { FOLLOW_repopt_in_repetition1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_repetition1048  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_repetition1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_repetition1048	= { FOLLOW_LSTRUCT_in_repetition1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_repetition1054  */
static	ANTLR3_BITWORD FOLLOW_structure_in_repetition1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000180000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_repetition1054	= { FOLLOW_structure_in_repetition1054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLASH_in_repetition1062  */
static	ANTLR3_BITWORD FOLLOW_SLASH_in_repetition1062_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SLASH_in_repetition1062	= { FOLLOW_SLASH_in_repetition1062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLASH_in_repetition1106  */
static	ANTLR3_BITWORD FOLLOW_SLASH_in_repetition1106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_SLASH_in_repetition1106	= { FOLLOW_SLASH_in_repetition1106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_repetition1108  */
static	ANTLR3_BITWORD FOLLOW_structure_in_repetition1108_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_repetition1108	= { FOLLOW_structure_in_repetition1108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_repetition1139  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_repetition1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_repetition1139	= { FOLLOW_RSTRUCT_in_repetition1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvaland_in_attvallist1151  */
static	ANTLR3_BITWORD FOLLOW_attvaland_in_attvallist1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attvaland_in_attvallist1151	= { FOLLOW_attvaland_in_attvallist1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOR_in_attvallist1154  */
static	ANTLR3_BITWORD FOLLOW_BINOR_in_attvallist1154_bits[]	= { ANTLR3_UINT64_LIT(0x0000208000500000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOR_in_attvallist1154	= { FOLLOW_BINOR_in_attvallist1154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvaland_in_attvallist1157  */
static	ANTLR3_BITWORD FOLLOW_attvaland_in_attvallist1157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attvaland_in_attvallist1157	= { FOLLOW_attvaland_in_attvallist1157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attvaland1171  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attvaland1171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attvaland1171	= { FOLLOW_attval_in_attvaland1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_attvaland1174  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_attvaland1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000208000500000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_attvaland1174	= { FOLLOW_BINAND_in_attvaland1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attvaland1177  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attvaland1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attvaland1177	= { FOLLOW_attval_in_attvaland1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_attval1190  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_attval1190_bits[]	= { ANTLR3_UINT64_LIT(0x000003E000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_attval1190	= { FOLLOW_ATTR_in_attval1190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_attval1192  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_attval1192_bits[]	= { ANTLR3_UINT64_LIT(0x0000036000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_attval1192	= { FOLLOW_NOT_in_attval1192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_attval1202  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_attval1202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_attval1202	= { FOLLOW_EQ_in_attval1202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEQ_in_attval1205  */
static	ANTLR3_BITWORD FOLLOW_LEQ_in_attval1205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LEQ_in_attval1205	= { FOLLOW_LEQ_in_attval1205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GEQ_in_attval1208  */
static	ANTLR3_BITWORD FOLLOW_GEQ_in_attval1208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_GEQ_in_attval1208	= { FOLLOW_GEQ_in_attval1208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1212  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1212	= { FOLLOW_REGEXP_in_attval1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EEQ_in_attval1221  */
static	ANTLR3_BITWORD FOLLOW_EEQ_in_attval1221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_EEQ_in_attval1221	= { FOLLOW_EEQ_in_attval1221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1226  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1226	= { FOLLOW_REGEXP_in_attval1226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_POSNUM_in_attval1238  */
static	ANTLR3_BITWORD FOLLOW_POSNUM_in_attval1238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_POSNUM_in_attval1238	= { FOLLOW_POSNUM_in_attval1238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1241  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1241	= { FOLLOW_NUMBER_in_attval1241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_attval1246  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_attval1246_bits[]	= { ANTLR3_UINT64_LIT(0x0000208000500000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_attval1246	= { FOLLOW_NOT_in_attval1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attval1249  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attval1249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attval1249	= { FOLLOW_attval_in_attval1249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_attval1254  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_attval1254_bits[]	= { ANTLR3_UINT64_LIT(0x0000208000500000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_attval1254	= { FOLLOW_LPAREN_in_attval1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_attval1257  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_attval1257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_attval1257	= { FOLLOW_attvallist_in_attval1257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_attval1259  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_attval1259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_attval1259	= { FOLLOW_RPAREN_in_attval1259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_atomquery1271  */
static	ANTLR3_BITWORD FOLLOW_position_in_atomquery1271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_atomquery1271	= { FOLLOW_position_in_atomquery1271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_atomquery1276  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_atomquery1276_bits[]	= { ANTLR3_UINT64_LIT(0x0000040001648000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_atomquery1276	= { FOLLOW_LPAREN_in_atomquery1276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_atomquery1279  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_atomquery1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000806000) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_atomquery1279	= { FOLLOW_sequence_in_atomquery1279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITHIN_in_atomquery1289  */
static	ANTLR3_BITWORD FOLLOW_KW_WITHIN_in_atomquery1289_bits[]	= { ANTLR3_UINT64_LIT(0x0000048001748000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITHIN_in_atomquery1289	= { FOLLOW_KW_WITHIN_in_atomquery1289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_atomquery1292  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_atomquery1292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000806000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_atomquery1292	= { FOLLOW_within_containing_part_in_atomquery1292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CONTAINING_in_atomquery1309  */
static	ANTLR3_BITWORD FOLLOW_KW_CONTAINING_in_atomquery1309_bits[]	= { ANTLR3_UINT64_LIT(0x0000048001748000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CONTAINING_in_atomquery1309	= { FOLLOW_KW_CONTAINING_in_atomquery1309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_atomquery1311  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_atomquery1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000806000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_atomquery1311	= { FOLLOW_within_containing_part_in_atomquery1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_atomquery1329  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_atomquery1329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_atomquery1329	= { FOLLOW_RPAREN_in_atomquery1329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_oneposition_in_position1341  */
static	ANTLR3_BITWORD FOLLOW_oneposition_in_position1341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_oneposition_in_position1341	= { FOLLOW_oneposition_in_position1341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_position1348  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_position1348_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_position1348	= { FOLLOW_NUMBER_in_position1348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_position1352  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_position1352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001608000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_position1352	= { FOLLOW_COLON_in_position1352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_oneposition_in_position1356  */
static	ANTLR3_BITWORD FOLLOW_oneposition_in_position1356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_oneposition_in_position1356	= { FOLLOW_oneposition_in_position1356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRACKET_in_oneposition1386  */
static	ANTLR3_BITWORD FOLLOW_LBRACKET_in_oneposition1386_bits[]	= { ANTLR3_UINT64_LIT(0x0000208002500000) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRACKET_in_oneposition1386	= { FOLLOW_LBRACKET_in_oneposition1386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_oneposition1390  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_oneposition1390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_oneposition1390	= { FOLLOW_attvallist_in_oneposition1390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRACKET_in_oneposition1425  */
static	ANTLR3_BITWORD FOLLOW_RBRACKET_in_oneposition1425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRACKET_in_oneposition1425	= { FOLLOW_RBRACKET_in_oneposition1425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_oneposition1430  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_oneposition1430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_oneposition1430	= { FOLLOW_REGEXP_in_oneposition1430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_MU_in_oneposition1453  */
static	ANTLR3_BITWORD FOLLOW_KW_MU_in_oneposition1453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_MU_in_oneposition1453	= { FOLLOW_KW_MU_in_oneposition1453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mupart_in_oneposition1460  */
static	ANTLR3_BITWORD FOLLOW_mupart_in_oneposition1460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_mupart_in_oneposition1460	= { FOLLOW_mupart_in_oneposition1460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_repopt1471  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_repopt1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_repopt1471	= { FOLLOW_STAR_in_repopt1471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_repopt1491  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_repopt1491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_repopt1491	= { FOLLOW_PLUS_in_repopt1491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUEST_in_repopt1511  */
static	ANTLR3_BITWORD FOLLOW_QUEST_in_repopt1511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_QUEST_in_repopt1511	= { FOLLOW_QUEST_in_repopt1511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRACE_in_repopt1530  */
static	ANTLR3_BITWORD FOLLOW_LBRACE_in_repopt1530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRACE_in_repopt1530	= { FOLLOW_LBRACE_in_repopt1530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_repopt1534  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_repopt1534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000408000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_repopt1534	= { FOLLOW_NUMBER_in_repopt1534_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_repopt1540  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_repopt1540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008040000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_repopt1540	= { FOLLOW_COMMA_in_repopt1540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_repopt1550  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_repopt1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_repopt1550	= { FOLLOW_NUMBER_in_repopt1550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRACE_in_repopt1620  */
static	ANTLR3_BITWORD FOLLOW_RBRACE_in_repopt1620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRACE_in_repopt1620	= { FOLLOW_RBRACE_in_repopt1620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_synpred1_cqp689  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_synpred1_cqp689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_synpred1_cqp689	= { FOLLOW_LSTRUCT_in_synpred1_cqp689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_synpred1_cqp692  */
static	ANTLR3_BITWORD FOLLOW_structure_in_synpred1_cqp692_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_synpred1_cqp692	= { FOLLOW_structure_in_synpred1_cqp692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_synpred1_cqp694  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_synpred1_cqp694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_synpred1_cqp694	= { FOLLOW_RSTRUCT_in_synpred1_cqp694_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start query
 * cqp.g:129:1: query : sequence ( BINAND globpart )? ( ( KW_WITHIN | KW_CONTAINING ) within_containing_part )* SEMI ;
 */
static cqpParser_query_return
query(pcqpParser ctx)
{   
    cqpParser_query_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINAND2;
    pANTLR3_COMMON_TOKEN    KW_WITHIN4;
    pANTLR3_COMMON_TOKEN    KW_CONTAINING5;
    pANTLR3_COMMON_TOKEN    SEMI7;
    cqpParser_sequence_return sequence1;
    #undef	RETURN_TYPE_sequence1
    #define	RETURN_TYPE_sequence1 cqpParser_sequence_return

    cqpParser_globpart_return globpart3;
    #undef	RETURN_TYPE_globpart3
    #define	RETURN_TYPE_globpart3 cqpParser_globpart_return

    cqpParser_within_containing_part_return within_containing_part6;
    #undef	RETURN_TYPE_within_containing_part6
    #define	RETURN_TYPE_within_containing_part6 cqpParser_within_containing_part_return

    pANTLR3_BASE_TREE BINAND2_tree;
    pANTLR3_BASE_TREE KW_WITHIN4_tree;
    pANTLR3_BASE_TREE KW_CONTAINING5_tree;
    pANTLR3_BASE_TREE SEMI7_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BINAND2       = NULL;
    KW_WITHIN4       = NULL;
    KW_CONTAINING5       = NULL;
    SEMI7       = NULL;
    sequence1.tree = NULL;

    globpart3.tree = NULL;

    within_containing_part6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BINAND2_tree   = NULL;
    KW_WITHIN4_tree   = NULL;
    KW_CONTAINING5_tree   = NULL;
    SEMI7_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:130:2: ( sequence ( BINAND globpart )? ( ( KW_WITHIN | KW_CONTAINING ) within_containing_part )* SEMI )
        // cqp.g:131:3: sequence ( BINAND globpart )? ( ( KW_WITHIN | KW_CONTAINING ) within_containing_part )* SEMI
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_sequence_in_query513);
            sequence1=sequence(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulequeryEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sequence1.tree);

            // cqp.g:133:9: ( BINAND globpart )?
            {
                int alt1=2;
                switch ( LA(1) ) 
                {
                    case BINAND:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1) 
                {
            	case 1:
            	    // cqp.g:133:10: BINAND globpart
            	    {
            	        BINAND2 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_query526); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        BINAND2_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINAND2));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINAND2_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_globpart_in_query529);
            	        globpart3=globpart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, globpart3.tree);

            	    }
            	    break;

                }
            }

            // cqp.g:135:9: ( ( KW_WITHIN | KW_CONTAINING ) within_containing_part )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                case KW_WITHIN:
                case KW_CONTAINING:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3) 
                {
            	case 1:
            	    // cqp.g:135:10: ( KW_WITHIN | KW_CONTAINING ) within_containing_part
            	    {

            	        // cqp.g:135:10: ( KW_WITHIN | KW_CONTAINING )
            	        {
            	            int alt2=2;
            	            switch ( LA(1) ) 
            	            {
            	            case KW_WITHIN:
            	            	{
            	            		alt2=1;
            	            	}
            	                break;
            	            case KW_CONTAINING:
            	            	{
            	            		alt2=2;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    return retval;
            	                }
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 2;
            	                EXCEPTION->state        = 0;


            	                goto rulequeryEx;
            	            }

            	            switch (alt2) 
            	            {
            	        	case 1:
            	        	    // cqp.g:135:11: KW_WITHIN
            	        	    {
            	        	        KW_WITHIN4 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITHIN, &FOLLOW_KW_WITHIN_in_query545); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequeryEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        KW_WITHIN4_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_WITHIN4));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_WITHIN4_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // cqp.g:135:22: KW_CONTAINING
            	        	    {
            	        	        KW_CONTAINING5 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CONTAINING, &FOLLOW_KW_CONTAINING_in_query548); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequeryEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        KW_CONTAINING5_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_CONTAINING5));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_CONTAINING5_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_within_containing_part_in_query552);
            	        within_containing_part6=within_containing_part(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, within_containing_part6.tree);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            SEMI7 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI, &FOLLOW_SEMI_in_query560); 
            if  (HASEXCEPTION())
            {
                goto rulequeryEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequeryEx; /* Prevent compiler warnings */
    rulequeryEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end query */

/** 
 * $ANTLR start globpart
 * cqp.g:140:1: globpart : globcond ( BINAND globcond )* ;
 */
static cqpParser_globpart_return
globpart(pcqpParser ctx)
{   
    cqpParser_globpart_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINAND9;
    cqpParser_globcond_return globcond8;
    #undef	RETURN_TYPE_globcond8
    #define	RETURN_TYPE_globcond8 cqpParser_globcond_return

    cqpParser_globcond_return globcond10;
    #undef	RETURN_TYPE_globcond10
    #define	RETURN_TYPE_globcond10 cqpParser_globcond_return

    pANTLR3_BASE_TREE BINAND9_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BINAND9       = NULL;
    globcond8.tree = NULL;

    globcond10.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BINAND9_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:141:5: ( globcond ( BINAND globcond )* )
        // cqp.g:141:7: globcond ( BINAND globcond )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_globcond_in_globpart576);
            globcond8=globcond(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleglobpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, globcond8.tree);

            // cqp.g:141:16: ( BINAND globcond )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) ) 
                {
                case BINAND:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4) 
                {
            	case 1:
            	    // cqp.g:141:17: BINAND globcond
            	    {
            	        BINAND9 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_globpart579); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglobpartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_globcond_in_globpart582);
            	        globcond10=globcond(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglobpartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, globcond10.tree);

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleglobpartEx; /* Prevent compiler warnings */
    ruleglobpartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end globpart */

/** 
 * $ANTLR start globcond
 * cqp.g:144:1: globcond : ( NUMBER DOT ATTR ( NOT )? EQ NUMBER DOT ATTR | KW_FREQ LPAREN NUMBER DOT ATTR RPAREN ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER );
 */
static cqpParser_globcond_return
globcond(pcqpParser ctx)
{   
    cqpParser_globcond_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NUMBER11;
    pANTLR3_COMMON_TOKEN    DOT12;
    pANTLR3_COMMON_TOKEN    ATTR13;
    pANTLR3_COMMON_TOKEN    NOT14;
    pANTLR3_COMMON_TOKEN    EQ15;
    pANTLR3_COMMON_TOKEN    NUMBER16;
    pANTLR3_COMMON_TOKEN    DOT17;
    pANTLR3_COMMON_TOKEN    ATTR18;
    pANTLR3_COMMON_TOKEN    KW_FREQ19;
    pANTLR3_COMMON_TOKEN    LPAREN20;
    pANTLR3_COMMON_TOKEN    NUMBER21;
    pANTLR3_COMMON_TOKEN    DOT22;
    pANTLR3_COMMON_TOKEN    ATTR23;
    pANTLR3_COMMON_TOKEN    RPAREN24;
    pANTLR3_COMMON_TOKEN    NOT25;
    pANTLR3_COMMON_TOKEN    set26;
    pANTLR3_COMMON_TOKEN    NUMBER27;

    pANTLR3_BASE_TREE NUMBER11_tree;
    pANTLR3_BASE_TREE DOT12_tree;
    pANTLR3_BASE_TREE ATTR13_tree;
    pANTLR3_BASE_TREE NOT14_tree;
    pANTLR3_BASE_TREE EQ15_tree;
    pANTLR3_BASE_TREE NUMBER16_tree;
    pANTLR3_BASE_TREE DOT17_tree;
    pANTLR3_BASE_TREE ATTR18_tree;
    pANTLR3_BASE_TREE KW_FREQ19_tree;
    pANTLR3_BASE_TREE LPAREN20_tree;
    pANTLR3_BASE_TREE NUMBER21_tree;
    pANTLR3_BASE_TREE DOT22_tree;
    pANTLR3_BASE_TREE ATTR23_tree;
    pANTLR3_BASE_TREE RPAREN24_tree;
    pANTLR3_BASE_TREE NOT25_tree;
    pANTLR3_BASE_TREE set26_tree;
    pANTLR3_BASE_TREE NUMBER27_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    NUMBER11       = NULL;
    DOT12       = NULL;
    ATTR13       = NULL;
    NOT14       = NULL;
    EQ15       = NULL;
    NUMBER16       = NULL;
    DOT17       = NULL;
    ATTR18       = NULL;
    KW_FREQ19       = NULL;
    LPAREN20       = NULL;
    NUMBER21       = NULL;
    DOT22       = NULL;
    ATTR23       = NULL;
    RPAREN24       = NULL;
    NOT25       = NULL;
    set26       = NULL;
    NUMBER27       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    NUMBER11_tree   = NULL;
    DOT12_tree   = NULL;
    ATTR13_tree   = NULL;
    NOT14_tree   = NULL;
    EQ15_tree   = NULL;
    NUMBER16_tree   = NULL;
    DOT17_tree   = NULL;
    ATTR18_tree   = NULL;
    KW_FREQ19_tree   = NULL;
    LPAREN20_tree   = NULL;
    NUMBER21_tree   = NULL;
    DOT22_tree   = NULL;
    ATTR23_tree   = NULL;
    RPAREN24_tree   = NULL;
    NOT25_tree   = NULL;
    set26_tree   = NULL;
    NUMBER27_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  cqp.g:145:5: ( NUMBER DOT ATTR ( NOT )? EQ NUMBER DOT ATTR | KW_FREQ LPAREN NUMBER DOT ATTR RPAREN ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER )
            
            ANTLR3_UINT32 alt7;

            alt7=2;

            switch ( LA(1) ) 
            {
            case NUMBER:
            	{
            		alt7=1;
            	}
                break;
            case KW_FREQ:
            	{
            		alt7=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruleglobcondEx;
            }

            switch (alt7) 
            {
        	case 1:
        	    // cqp.g:145:7: NUMBER DOT ATTR ( NOT )? EQ NUMBER DOT ATTR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NUMBER11 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond601); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER11_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER11));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER11_tree);
        	        }
        	        DOT12 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond603); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        DOT12_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, DOT12));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, DOT12_tree, root_0));
        	        }
        	        ATTR13 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond606); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ATTR13_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR13));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR13_tree);
        	        }

        	        // cqp.g:145:24: ( NOT )?
        	        {
        	            int alt5=2;
        	            switch ( LA(1) ) 
        	            {
        	                case NOT:
        	                	{
        	                		alt5=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt5) 
        	            {
        	        	case 1:
        	        	    // cqp.g:145:24: NOT
        	        	    {
        	        	        NOT14 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_globcond608); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleglobcondEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT14_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT14));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT14_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        EQ15 = (pANTLR3_COMMON_TOKEN) MATCHT(EQ, &FOLLOW_EQ_in_globcond611); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        EQ15_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EQ15));
        	        ADAPTOR->addChild(ADAPTOR, root_0, EQ15_tree);
        	        }
        	        NUMBER16 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond613); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER16_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER16));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER16_tree);
        	        }
        	        DOT17 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond615); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        ATTR18 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond618); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ATTR18_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR18));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR18_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:146:7: KW_FREQ LPAREN NUMBER DOT ATTR RPAREN ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_FREQ19 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_FREQ, &FOLLOW_KW_FREQ_in_globcond626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_FREQ19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_FREQ19));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_FREQ19_tree, root_0));
        	        }
        	        LPAREN20 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_globcond629); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        NUMBER21 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond632); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER21_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER21));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER21_tree);
        	        }
        	        DOT22 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond634); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        ATTR23 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond637); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ATTR23_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR23));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR23_tree);
        	        }
        	        RPAREN24 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_globcond639); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        // cqp.g:146:49: ( NOT )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) ) 
        	            {
        	                case NOT:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6) 
        	            {
        	        	case 1:
        	        	    // cqp.g:146:49: NOT
        	        	    {
        	        	        NOT25 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_globcond642); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleglobcondEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT25_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT25));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT25_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        set26=(pANTLR3_COMMON_TOKEN)LT(1);
        	        if ( LA(1) == EQ || ((LA(1) >= LEQ) && (LA(1) <= RSTRUCT)) )
        	        {
        	            CONSUME();
        	            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set26)));
        	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else 
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                return retval;
        	            }
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = &FOLLOW_set_in_globcond645;
        	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_globcond645);    goto ruleglobcondEx;
        	        }

        	        NUMBER27 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond657); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER27_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER27));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER27_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleglobcondEx; /* Prevent compiler warnings */
    ruleglobcondEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end globcond */

/** 
 * $ANTLR start within_containing_part
 * cqp.g:149:1: within_containing_part : ( NOT )? ( ( LSTRUCT structure RSTRUCT )=> LSTRUCT structure RSTRUCT | sequence | within_number | alignedpart ) ;
 */
static cqpParser_within_containing_part_return
within_containing_part(pcqpParser ctx)
{   
    cqpParser_within_containing_part_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NOT28;
    pANTLR3_COMMON_TOKEN    LSTRUCT29;
    pANTLR3_COMMON_TOKEN    RSTRUCT31;
    cqpParser_structure_return structure30;
    #undef	RETURN_TYPE_structure30
    #define	RETURN_TYPE_structure30 cqpParser_structure_return

    cqpParser_sequence_return sequence32;
    #undef	RETURN_TYPE_sequence32
    #define	RETURN_TYPE_sequence32 cqpParser_sequence_return

    cqpParser_within_number_return within_number33;
    #undef	RETURN_TYPE_within_number33
    #define	RETURN_TYPE_within_number33 cqpParser_within_number_return

    cqpParser_alignedpart_return alignedpart34;
    #undef	RETURN_TYPE_alignedpart34
    #define	RETURN_TYPE_alignedpart34 cqpParser_alignedpart_return

    pANTLR3_BASE_TREE NOT28_tree;
    pANTLR3_BASE_TREE LSTRUCT29_tree;
    pANTLR3_BASE_TREE RSTRUCT31_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    NOT28       = NULL;
    LSTRUCT29       = NULL;
    RSTRUCT31       = NULL;
    structure30.tree = NULL;

    sequence32.tree = NULL;

    within_number33.tree = NULL;

    alignedpart34.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NOT28_tree   = NULL;
    LSTRUCT29_tree   = NULL;
    RSTRUCT31_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:150:2: ( ( NOT )? ( ( LSTRUCT structure RSTRUCT )=> LSTRUCT structure RSTRUCT | sequence | within_number | alignedpart ) )
        // cqp.g:150:4: ( NOT )? ( ( LSTRUCT structure RSTRUCT )=> LSTRUCT structure RSTRUCT | sequence | within_number | alignedpart )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // cqp.g:150:4: ( NOT )?
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                    case NOT:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8) 
                {
            	case 1:
            	    // cqp.g:150:5: NOT
            	    {
            	        NOT28 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_within_containing_part674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        NOT28_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT28));
            	        ADAPTOR->addChild(ADAPTOR, root_0, NOT28_tree);
            	        }

            	    }
            	    break;

                }
            }

            // cqp.g:151:9: ( ( LSTRUCT structure RSTRUCT )=> LSTRUCT structure RSTRUCT | sequence | within_number | alignedpart )
            {
                int alt9=4;
                switch ( LA(1) ) 
                {
                case LSTRUCT:
                	{
                		switch ( LA(2) ) 
                		{
                		case ATTR:
                			{

                				{
                				    int LA9_8 = LA(3);
                				    if ( (synpred1_cqp(ctx)) ) 
                				    {
                				        alt9=1;
                				    }
                				    else if ( (ANTLR3_TRUE) ) 
                				    {
                				        alt9=2;
                				    }
                				    else 
                				    {
                				        if (BACKTRACKING>0)
                				        {
                				            FAILEDFLAG = ANTLR3_TRUE;
                				            return retval;
                				        }
                				    
                				        CONSTRUCTEX();
                				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				        EXCEPTION->message      = (void *)"";
                				        EXCEPTION->decisionNum  = 9;
                				        EXCEPTION->state        = 8;


                				        goto rulewithin_containing_partEx;
                				    }
                				}
                			}
                		    break;
                		case SLASH:
                			{
                				alt9=2;
                			}
                		    break;

                		default:
                		    if (BACKTRACKING>0)
                		    {
                		        FAILEDFLAG = ANTLR3_TRUE;
                		        return retval;
                		    }
                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 9;
                		    EXCEPTION->state        = 1;


                		    goto rulewithin_containing_partEx;
                		}

                	}
                    break;
                case KW_MU:
                case REGEXP:
                case LPAREN:
                case LBRACKET:
                	{
                		alt9=2;
                	}
                    break;
                case NUMBER:
                	{
                		switch ( LA(2) ) 
                		{
                		case COLON:
                			{
                				alt9=2;
                			}
                		    break;
                		case KW_WITHIN:
                		case KW_CONTAINING:
                		case RPAREN:
                		case SEMI:
                			{
                				alt9=3;
                			}
                		    break;

                		default:
                		    if (BACKTRACKING>0)
                		    {
                		        FAILEDFLAG = ANTLR3_TRUE;
                		        return retval;
                		    }
                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 9;
                		    EXCEPTION->state        = 6;


                		    goto rulewithin_containing_partEx;
                		}

                	}
                    break;
                case ATTR:
                	{
                		alt9=4;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 9;
                    EXCEPTION->state        = 0;


                    goto rulewithin_containing_partEx;
                }

                switch (alt9) 
                {
            	case 1:
            	    // cqp.g:151:11: ( LSTRUCT structure RSTRUCT )=> LSTRUCT structure RSTRUCT
            	    {
            	        if ( BACKTRACKING==0 ) 
            	        {
            	            throw EvalQueryException (": Deprecated query syntax: use <str/> instead of <str> for matching the content of a structure. <str> will match only the beginning.");
            	        }
            	        LSTRUCT29 = (pANTLR3_COMMON_TOKEN) MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_within_containing_part702); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_structure_in_within_containing_part705);
            	        structure30=structure(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structure30.tree);
            	        RSTRUCT31 = (pANTLR3_COMMON_TOKEN) MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_within_containing_part707); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	    }
            	    break;
            	case 2:
            	    // cqp.g:152:11: sequence
            	    {
            	        FOLLOWPUSH(FOLLOW_sequence_in_within_containing_part721);
            	        sequence32=sequence(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sequence32.tree);

            	    }
            	    break;
            	case 3:
            	    // cqp.g:153:11: within_number
            	    {
            	        FOLLOWPUSH(FOLLOW_within_number_in_within_containing_part733);
            	        within_number33=within_number(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, within_number33.tree);

            	    }
            	    break;
            	case 4:
            	    // cqp.g:154:11: alignedpart
            	    {
            	        FOLLOWPUSH(FOLLOW_alignedpart_in_within_containing_part745);
            	        alignedpart34=alignedpart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, alignedpart34.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithin_containing_partEx; /* Prevent compiler warnings */
    rulewithin_containing_partEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end within_containing_part */

/** 
 * $ANTLR start within_number
 * cqp.g:158:1: within_number : n= NUMBER -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) ) ;
 */
static cqpParser_within_number_return
within_number(pcqpParser ctx)
{   
    cqpParser_within_number_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;

    /* Initialize rule variables
     */


    root_0 = NULL;

    n       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;

    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 

    retval.tree  = NULL;
    {
        // cqp.g:159:2: (n= NUMBER -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) ) )
        // cqp.g:159:4: n= NUMBER
        {
            n = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_within_number776); 
            if  (HASEXCEPTION())
            {
                goto rulewithin_numberEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n, NULL); }


             
            /* AST REWRITE
             * elements          : n, n
             * token labels      : n
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 159:13: -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) )
            	{
            	    // cqp.g:159:16: ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEQ, (pANTLR3_UINT8)"SEQ"), root_1));

            	        // cqp.g:159:22: ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	            #if 1 == 2
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("REp"))
            	            #else
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"REp")
            	            #endif
            	            , root_2));

            	            // cqp.g:159:38: ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
            	            {
            	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	                #if 1 == 2
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
            	                #else
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
            	                #endif
            	                , root_3));

            	                // cqp.g:159:54: ^( ANYPOS[\"[]\"] )
            	                {
            	                    pANTLR3_BASE_TREE root_4 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                    root_4 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	                    #if 1 == 2
            	                    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ANYPOS, TOKTEXT("[]"))
            	                    #else
            	                    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ANYPOS, (pANTLR3_UINT8)"[]")
            	                    #endif
            	                    , root_4));

            	                    ADAPTOR->addChild(ADAPTOR, root_3, root_4);
            	                }

            	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
            	            }
            	            // cqp.g:159:71: ^( REPOPT[\"RO\"] $n $n)
            	            {
            	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	                #if 1 == 2
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
            	                #else
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
            	                #endif
            	                , root_3));

            	                ADAPTOR->addChild(ADAPTOR, root_3, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));
            	                ADAPTOR->addChild(ADAPTOR, root_3, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));

            	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_n != NULL) stream_n->free(stream_n); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithin_numberEx; /* Prevent compiler warnings */
    rulewithin_numberEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end within_number */

/** 
 * $ANTLR start structure
 * cqp.g:162:1: structure : ATTR ( attvallist )? ;
 */
static cqpParser_structure_return
structure(pcqpParser ctx)
{   
    cqpParser_structure_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ATTR35;
    cqpParser_attvallist_return attvallist36;
    #undef	RETURN_TYPE_attvallist36
    #define	RETURN_TYPE_attvallist36 cqpParser_attvallist_return

    pANTLR3_BASE_TREE ATTR35_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ATTR35       = NULL;
    attvallist36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ATTR35_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:163:2: ( ATTR ( attvallist )? )
        // cqp.g:163:4: ATTR ( attvallist )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            ATTR35 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_structure821); 
            if  (HASEXCEPTION())
            {
                goto rulestructureEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            ATTR35_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR35));
            ADAPTOR->addChild(ADAPTOR, root_0, ATTR35_tree);
            }

            // cqp.g:163:9: ( attvallist )?
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                    case ATTR:
                    case LPAREN:
                    case NOT:
                    case POSNUM:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10) 
                {
            	case 1:
            	    // cqp.g:163:9: attvallist
            	    {
            	        FOLLOWPUSH(FOLLOW_attvallist_in_structure823);
            	        attvallist36=attvallist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructureEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist36.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestructureEx; /* Prevent compiler warnings */
    rulestructureEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end structure */

/** 
 * $ANTLR start oneposonly
 * cqp.g:166:1: oneposonly : attvallist SEMI ;
 */
static cqpParser_oneposonly_return
oneposonly(pcqpParser ctx)
{   
    cqpParser_oneposonly_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMI38;
    cqpParser_attvallist_return attvallist37;
    #undef	RETURN_TYPE_attvallist37
    #define	RETURN_TYPE_attvallist37 cqpParser_attvallist_return

    pANTLR3_BASE_TREE SEMI38_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SEMI38       = NULL;
    attvallist37.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SEMI38_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:167:5: ( attvallist SEMI )
        // cqp.g:167:7: attvallist SEMI
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_attvallist_in_oneposonly838);
            attvallist37=attvallist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleoneposonlyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist37.tree);
            SEMI38 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI, &FOLLOW_SEMI_in_oneposonly840); 
            if  (HASEXCEPTION())
            {
                goto ruleoneposonlyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleoneposonlyEx; /* Prevent compiler warnings */
    ruleoneposonlyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end oneposonly */

/** 
 * $ANTLR start alignedpart
 * cqp.g:170:1: alignedpart : ATTR COLON sequence ;
 */
static cqpParser_alignedpart_return
alignedpart(pcqpParser ctx)
{   
    cqpParser_alignedpart_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ATTR39;
    pANTLR3_COMMON_TOKEN    COLON40;
    cqpParser_sequence_return sequence41;
    #undef	RETURN_TYPE_sequence41
    #define	RETURN_TYPE_sequence41 cqpParser_sequence_return

    pANTLR3_BASE_TREE ATTR39_tree;
    pANTLR3_BASE_TREE COLON40_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ATTR39       = NULL;
    COLON40       = NULL;
    sequence41.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ATTR39_tree   = NULL;
    COLON40_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:171:5: ( ATTR COLON sequence )
        // cqp.g:171:7: ATTR COLON sequence
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            ATTR39 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_alignedpart859); 
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            ATTR39_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR39));
            ADAPTOR->addChild(ADAPTOR, root_0, ATTR39_tree);
            }
            COLON40 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_alignedpart861); 
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            COLON40_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, COLON40));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, COLON40_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_sequence_in_alignedpart865);
            sequence41=sequence(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sequence41.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulealignedpartEx; /* Prevent compiler warnings */
    rulealignedpartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end alignedpart */

/** 
 * $ANTLR start mupart
 * cqp.g:174:1: mupart : LPAREN ( unionop | meetop ) RPAREN ;
 */
static cqpParser_mupart_return
mupart(pcqpParser ctx)
{   
    cqpParser_mupart_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN42;
    pANTLR3_COMMON_TOKEN    RPAREN45;
    cqpParser_unionop_return unionop43;
    #undef	RETURN_TYPE_unionop43
    #define	RETURN_TYPE_unionop43 cqpParser_unionop_return

    cqpParser_meetop_return meetop44;
    #undef	RETURN_TYPE_meetop44
    #define	RETURN_TYPE_meetop44 cqpParser_meetop_return

    pANTLR3_BASE_TREE LPAREN42_tree;
    pANTLR3_BASE_TREE RPAREN45_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    LPAREN42       = NULL;
    RPAREN45       = NULL;
    unionop43.tree = NULL;

    meetop44.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LPAREN42_tree   = NULL;
    RPAREN45_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:175:2: ( LPAREN ( unionop | meetop ) RPAREN )
        // cqp.g:175:4: LPAREN ( unionop | meetop ) RPAREN
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            LPAREN42 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_mupart882); 
            if  (HASEXCEPTION())
            {
                goto rulemupartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            // cqp.g:175:12: ( unionop | meetop )
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                case KW_UNION:
                	{
                		alt11=1;
                	}
                    break;
                case KW_MEET:
                	{
                		alt11=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 11;
                    EXCEPTION->state        = 0;


                    goto rulemupartEx;
                }

                switch (alt11) 
                {
            	case 1:
            	    // cqp.g:175:13: unionop
            	    {
            	        FOLLOWPUSH(FOLLOW_unionop_in_mupart886);
            	        unionop43=unionop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemupartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unionop43.tree);

            	    }
            	    break;
            	case 2:
            	    // cqp.g:175:23: meetop
            	    {
            	        FOLLOWPUSH(FOLLOW_meetop_in_mupart890);
            	        meetop44=meetop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemupartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, meetop44.tree);

            	    }
            	    break;

                }
            }
            RPAREN45 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_mupart893); 
            if  (HASEXCEPTION())
            {
                goto rulemupartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemupartEx; /* Prevent compiler warnings */
    rulemupartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end mupart */

/** 
 * $ANTLR start integer
 * cqp.g:178:1: integer : ( NUMBER | n= NNUMBER -> ^( NUMBER[$n.text->chars] ) );
 */
static cqpParser_integer_return
integer(pcqpParser ctx)
{   
    cqpParser_integer_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    NUMBER46;

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE NUMBER46_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NNUMBER;

    /* Initialize rule variables
     */


    root_0 = NULL;

    n       = NULL;
    NUMBER46       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    NUMBER46_tree   = NULL;

    stream_NNUMBER   = NULL;
    #define CREATE_stream_NNUMBER  if (stream_NNUMBER == NULL) {stream_NNUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NNUMBER"); } 

    retval.tree  = NULL;
    {
        {
            //  cqp.g:179:2: ( NUMBER | n= NNUMBER -> ^( NUMBER[$n.text->chars] ) )
            
            ANTLR3_UINT32 alt12;

            alt12=2;

            switch ( LA(1) ) 
            {
            case NUMBER:
            	{
            		alt12=1;
            	}
                break;
            case NNUMBER:
            	{
            		alt12=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto ruleintegerEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // cqp.g:179:4: NUMBER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NUMBER46 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer905); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintegerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER46_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER46));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER46_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:180:4: n= NNUMBER
        	    {
        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NNUMBER, &FOLLOW_NNUMBER_in_integer912); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintegerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NNUMBER; stream_NNUMBER->add(stream_NNUMBER, n, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 180:14: -> ^( NUMBER[$n.text->chars] )
        	        	{
        	        	    // cqp.g:180:17: ^( NUMBER[$n.text->chars] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT((n->getText(n))->chars))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)(n->getText(n))->chars)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleintegerEx; /* Prevent compiler warnings */
    ruleintegerEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NNUMBER != NULL) stream_NNUMBER->free(stream_NNUMBER);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end integer */

/** 
 * $ANTLR start meetop
 * cqp.g:183:1: meetop : KW_MEET position position ( integer integer )? ;
 */
static cqpParser_meetop_return
meetop(pcqpParser ctx)
{   
    cqpParser_meetop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_MEET47;
    cqpParser_position_return position48;
    #undef	RETURN_TYPE_position48
    #define	RETURN_TYPE_position48 cqpParser_position_return

    cqpParser_position_return position49;
    #undef	RETURN_TYPE_position49
    #define	RETURN_TYPE_position49 cqpParser_position_return

    cqpParser_integer_return integer50;
    #undef	RETURN_TYPE_integer50
    #define	RETURN_TYPE_integer50 cqpParser_integer_return

    cqpParser_integer_return integer51;
    #undef	RETURN_TYPE_integer51
    #define	RETURN_TYPE_integer51 cqpParser_integer_return

    pANTLR3_BASE_TREE KW_MEET47_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    KW_MEET47       = NULL;
    position48.tree = NULL;

    position49.tree = NULL;

    integer50.tree = NULL;

    integer51.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_MEET47_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:184:2: ( KW_MEET position position ( integer integer )? )
        // cqp.g:184:4: KW_MEET position position ( integer integer )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            KW_MEET47 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_MEET, &FOLLOW_KW_MEET_in_meetop930); 
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            KW_MEET47_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_MEET47));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_MEET47_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_position_in_meetop933);
            position48=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position48.tree);
            FOLLOWPUSH(FOLLOW_position_in_meetop935);
            position49=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position49.tree);

            // cqp.g:184:31: ( integer integer )?
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                    case NUMBER:
                    case NNUMBER:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13) 
                {
            	case 1:
            	    // cqp.g:184:32: integer integer
            	    {
            	        FOLLOWPUSH(FOLLOW_integer_in_meetop938);
            	        integer50=integer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemeetopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integer50.tree);
            	        FOLLOWPUSH(FOLLOW_integer_in_meetop940);
            	        integer51=integer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemeetopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integer51.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemeetopEx; /* Prevent compiler warnings */
    rulemeetopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end meetop */

/** 
 * $ANTLR start unionop
 * cqp.g:187:1: unionop : KW_UNION position position ;
 */
static cqpParser_unionop_return
unionop(pcqpParser ctx)
{   
    cqpParser_unionop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_UNION52;
    cqpParser_position_return position53;
    #undef	RETURN_TYPE_position53
    #define	RETURN_TYPE_position53 cqpParser_position_return

    cqpParser_position_return position54;
    #undef	RETURN_TYPE_position54
    #define	RETURN_TYPE_position54 cqpParser_position_return

    pANTLR3_BASE_TREE KW_UNION52_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    KW_UNION52       = NULL;
    position53.tree = NULL;

    position54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_UNION52_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:188:2: ( KW_UNION position position )
        // cqp.g:188:4: KW_UNION position position
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            KW_UNION52 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_UNION, &FOLLOW_KW_UNION_in_unionop953); 
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            KW_UNION52_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_UNION52));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_UNION52_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_position_in_unionop956);
            position53=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position53.tree);
            FOLLOWPUSH(FOLLOW_position_in_unionop958);
            position54=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position54.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunionopEx; /* Prevent compiler warnings */
    ruleunionopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end unionop */

/** 
 * $ANTLR start sequence
 * cqp.g:192:1: sequence : seq ( BINOR seq )* ;
 */
static cqpParser_sequence_return
sequence(pcqpParser ctx)
{   
    cqpParser_sequence_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINOR56;
    cqpParser_seq_return seq55;
    #undef	RETURN_TYPE_seq55
    #define	RETURN_TYPE_seq55 cqpParser_seq_return

    cqpParser_seq_return seq57;
    #undef	RETURN_TYPE_seq57
    #define	RETURN_TYPE_seq57 cqpParser_seq_return

    pANTLR3_BASE_TREE BINOR56_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BINOR56       = NULL;
    seq55.tree = NULL;

    seq57.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BINOR56_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:193:2: ( seq ( BINOR seq )* )
        // cqp.g:193:4: seq ( BINOR seq )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_seq_in_sequence970);
            seq55=seq(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesequenceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, seq55.tree);

            // cqp.g:193:8: ( BINOR seq )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                case BINOR:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14) 
                {
            	case 1:
            	    // cqp.g:193:9: BINOR seq
            	    {
            	        BINOR56 = (pANTLR3_COMMON_TOKEN) MATCHT(BINOR, &FOLLOW_BINOR_in_sequence973); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesequenceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        BINOR56_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINOR56));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINOR56_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_seq_in_sequence976);
            	        seq57=seq(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesequenceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, seq57.tree);

            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesequenceEx; /* Prevent compiler warnings */
    rulesequenceEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end sequence */

/** 
 * $ANTLR start seq
 * cqp.g:196:1: seq : ( repetition )+ -> ^( SEQ ( repetition )+ ) ;
 */
static cqpParser_seq_return
seq(pcqpParser ctx)
{   
    cqpParser_seq_return retval;

    pANTLR3_BASE_TREE root_0;

    cqpParser_repetition_return repetition58;
    #undef	RETURN_TYPE_repetition58
    #define	RETURN_TYPE_repetition58 cqpParser_repetition_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_repetition;
    /* Initialize rule variables
     */


    root_0 = NULL;

    repetition58.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_repetition   = NULL;
    #define CREATE_stream_repetition  if (stream_repetition == NULL) {stream_repetition = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule repetition"); }

    retval.tree  = NULL;
    {
        // cqp.g:197:2: ( ( repetition )+ -> ^( SEQ ( repetition )+ ) )
        // cqp.g:197:4: ( repetition )+
        {
            // cqp.g:197:4: ( repetition )+
            {
                int cnt15=0;

                for (;;)
                {
                    int alt15=2;
            	switch ( LA(1) ) 
            	{
            	case KW_MU:
            	case NUMBER:
            	case REGEXP:
            	case LPAREN:
            	case LBRACKET:
            	case LSTRUCT:
            		{
            			alt15=1;
            		}
            	    break;

            	}

            	switch (alt15) 
            	{
            	    case 1:
            	        // cqp.g:197:4: repetition
            	        {
            	            FOLLOWPUSH(FOLLOW_repetition_in_seq990);
            	            repetition58=repetition(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleseqEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_repetition; stream_repetition->add(stream_repetition, repetition58.tree, NULL); }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt15 >= 1 )
            		{
            		    goto loop15;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleseqEx;
            	}
            	cnt15++;
                }
                loop15: ;	/* Jump to here if this rule does not match */
            }

             
            /* AST REWRITE
             * elements          : repetition
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 197:16: -> ^( SEQ ( repetition )+ )
            	{
            	    // cqp.g:197:19: ^( SEQ ( repetition )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEQ, (pANTLR3_UINT8)"SEQ"), root_1));

            	        if ((stream_repetition == NULL || !stream_repetition->hasNext(stream_repetition))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_repetition->hasNext(stream_repetition))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_repetition == NULL ? NULL : stream_repetition->nextTree(stream_repetition));

            	        	}
            	        	stream_repetition->reset(stream_repetition);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleseqEx; /* Prevent compiler warnings */
    ruleseqEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_repetition != NULL) stream_repetition->free(stream_repetition);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end seq */

/** 
 * $ANTLR start repetition
 * cqp.g:200:1: repetition : ( atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery ) | LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT );
 */
static cqpParser_repetition_return
repetition(pcqpParser ctx)
{   
    cqpParser_repetition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LSTRUCT61;
    pANTLR3_COMMON_TOKEN    SLASH63;
    pANTLR3_COMMON_TOKEN    SLASH64;
    pANTLR3_COMMON_TOKEN    RSTRUCT66;
    cqpParser_atomquery_return atomquery59;
    #undef	RETURN_TYPE_atomquery59
    #define	RETURN_TYPE_atomquery59 cqpParser_atomquery_return

    cqpParser_repopt_return repopt60;
    #undef	RETURN_TYPE_repopt60
    #define	RETURN_TYPE_repopt60 cqpParser_repopt_return

    cqpParser_structure_return structure62;
    #undef	RETURN_TYPE_structure62
    #define	RETURN_TYPE_structure62 cqpParser_structure_return

    cqpParser_structure_return structure65;
    #undef	RETURN_TYPE_structure65
    #define	RETURN_TYPE_structure65 cqpParser_structure_return

    pANTLR3_BASE_TREE LSTRUCT61_tree;
    pANTLR3_BASE_TREE SLASH63_tree;
    pANTLR3_BASE_TREE SLASH64_tree;
    pANTLR3_BASE_TREE RSTRUCT66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LSTRUCT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SLASH;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RSTRUCT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structure;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_repopt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atomquery;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LSTRUCT61       = NULL;
    SLASH63       = NULL;
    SLASH64       = NULL;
    RSTRUCT66       = NULL;
    atomquery59.tree = NULL;

    repopt60.tree = NULL;

    structure62.tree = NULL;

    structure65.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LSTRUCT61_tree   = NULL;
    SLASH63_tree   = NULL;
    SLASH64_tree   = NULL;
    RSTRUCT66_tree   = NULL;

    stream_LSTRUCT   = NULL;
    #define CREATE_stream_LSTRUCT  if (stream_LSTRUCT == NULL) {stream_LSTRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LSTRUCT"); } 
    stream_SLASH   = NULL;
    #define CREATE_stream_SLASH  if (stream_SLASH == NULL) {stream_SLASH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SLASH"); } 
    stream_RSTRUCT   = NULL;
    #define CREATE_stream_RSTRUCT  if (stream_RSTRUCT == NULL) {stream_RSTRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RSTRUCT"); } 
    stream_structure   = NULL;
    #define CREATE_stream_structure  if (stream_structure == NULL) {stream_structure = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structure"); }
    stream_repopt   = NULL;
    #define CREATE_stream_repopt  if (stream_repopt == NULL) {stream_repopt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule repopt"); }
    stream_atomquery   = NULL;
    #define CREATE_stream_atomquery  if (stream_atomquery == NULL) {stream_atomquery = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atomquery"); }

    retval.tree  = NULL;
    {
        {
            //  cqp.g:201:2: ( atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery ) | LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT )
            
            ANTLR3_UINT32 alt19;

            alt19=2;

            switch ( LA(1) ) 
            {
            case KW_MU:
            case NUMBER:
            case REGEXP:
            case LPAREN:
            case LBRACKET:
            	{
            		alt19=1;
            	}
                break;
            case LSTRUCT:
            	{
            		alt19=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto rulerepetitionEx;
            }

            switch (alt19) 
            {
        	case 1:
        	    // cqp.g:201:4: atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery )
        	    {
        	        FOLLOWPUSH(FOLLOW_atomquery_in_repetition1012);
        	        atomquery59=atomquery(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_atomquery; stream_atomquery->add(stream_atomquery, atomquery59.tree, NULL); }

        	        // cqp.g:201:14: ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery )
        	        {
        	            int alt16=2;
        	            switch ( LA(1) ) 
        	            {
        	            case LBRACE:
        	            case STAR:
        	            case PLUS:
        	            case QUEST:
        	            	{
        	            		alt16=1;
        	            	}
        	                break;
        	            case KW_WITHIN:
        	            case KW_CONTAINING:
        	            case KW_MU:
        	            case NUMBER:
        	            case REGEXP:
        	            case LPAREN:
        	            case RPAREN:
        	            case LBRACKET:
        	            case BINOR:
        	            case BINAND:
        	            case SEMI:
        	            case LSTRUCT:
        	            	{
        	            		alt16=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 16;
        	                EXCEPTION->state        = 0;


        	                goto rulerepetitionEx;
        	            }

        	            switch (alt16) 
        	            {
        	        	case 1:
        	        	    // cqp.g:202:3: repopt
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_repopt_in_repetition1018);
        	        	        repopt60=repopt(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_repopt; stream_repopt->add(stream_repopt, repopt60.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : atomquery, repopt
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 202:11: -> ^( REPOPT[\"REp\"] atomquery repopt )
        	        	        	{
        	        	        	    // cqp.g:202:14: ^( REPOPT[\"REp\"] atomquery repopt )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("REp"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"REp")
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atomquery == NULL ? NULL : stream_atomquery->nextTree(stream_atomquery));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_repopt == NULL ? NULL : stream_repopt->nextTree(stream_repopt));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:203:7: 
        	        	    {
        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : atomquery
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 203:7: -> atomquery
        	        	        	{
        	        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_atomquery == NULL ? NULL : stream_atomquery->nextTree(stream_atomquery));

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:205:4: LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT
        	    {
        	        LSTRUCT61 = (pANTLR3_COMMON_TOKEN) MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_repetition1048); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LSTRUCT; stream_LSTRUCT->add(stream_LSTRUCT, LSTRUCT61, NULL); }


        	        // cqp.g:206:3: ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) )
        	        {
        	            int alt18=2;
        	            switch ( LA(1) ) 
        	            {
        	            case ATTR:
        	            	{
        	            		alt18=1;
        	            	}
        	                break;
        	            case SLASH:
        	            	{
        	            		alt18=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 18;
        	                EXCEPTION->state        = 0;


        	                goto rulerepetitionEx;
        	            }

        	            switch (alt18) 
        	            {
        	        	case 1:
        	        	    // cqp.g:206:5: structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) )
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_structure_in_repetition1054);
        	        	        structure62=structure(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_structure; stream_structure->add(stream_structure, structure62.tree, NULL); }

        	        	        // cqp.g:207:4: ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) )
        	        	        {
        	        	            int alt17=2;
        	        	            switch ( LA(1) ) 
        	        	            {
        	        	            case SLASH:
        	        	            	{
        	        	            		alt17=1;
        	        	            	}
        	        	                break;
        	        	            case RSTRUCT:
        	        	            	{
        	        	            		alt17=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }
        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 17;
        	        	                EXCEPTION->state        = 0;


        	        	                goto rulerepetitionEx;
        	        	            }

        	        	            switch (alt17) 
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:207:6: SLASH
        	        	        	    {
        	        	        	        SLASH63 = (pANTLR3_COMMON_TOKEN) MATCHT(SLASH, &FOLLOW_SLASH_in_repetition1062); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulerepetitionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SLASH; stream_SLASH->add(stream_SLASH, SLASH63, NULL); }


        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : structure
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 207:14: -> ^( WHOLESTRUCT[\"<str/>\"] structure )
        	        	        	        	{
        	        	        	        	    // cqp.g:207:17: ^( WHOLESTRUCT[\"<str/>\"] structure )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WHOLESTRUCT, TOKTEXT("<str/>"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHOLESTRUCT, (pANTLR3_UINT8)"<str/>")
        	        	        	        	        #endif
        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:208:14: 
        	        	        	    {
        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : structure
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 208:14: -> ^( BEGSTRUCT[\"<str>\"] structure )
        	        	        	        	{
        	        	        	        	    // cqp.g:208:17: ^( BEGSTRUCT[\"<str>\"] structure )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BEGSTRUCT, TOKTEXT("<str>"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BEGSTRUCT, (pANTLR3_UINT8)"<str>")
        	        	        	        	        #endif
        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:210:5: SLASH structure
        	        	    {
        	        	        SLASH64 = (pANTLR3_COMMON_TOKEN) MATCHT(SLASH, &FOLLOW_SLASH_in_repetition1106); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SLASH; stream_SLASH->add(stream_SLASH, SLASH64, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_structure_in_repetition1108);
        	        	        structure65=structure(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_structure; stream_structure->add(stream_structure, structure65.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : structure
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 211:14: -> ^( ENDSTRUCT[\"</str>\"] structure )
        	        	        	{
        	        	        	    // cqp.g:211:17: ^( ENDSTRUCT[\"</str>\"] structure )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ENDSTRUCT, TOKTEXT("</str>"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ENDSTRUCT, (pANTLR3_UINT8)"</str>")
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }
        	        RSTRUCT66 = (pANTLR3_COMMON_TOKEN) MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_repetition1139); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RSTRUCT; stream_RSTRUCT->add(stream_RSTRUCT, RSTRUCT66, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerepetitionEx; /* Prevent compiler warnings */
    rulerepetitionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LSTRUCT != NULL) stream_LSTRUCT->free(stream_LSTRUCT);
        if (stream_SLASH != NULL) stream_SLASH->free(stream_SLASH);
        if (stream_RSTRUCT != NULL) stream_RSTRUCT->free(stream_RSTRUCT);
        if (stream_structure != NULL) stream_structure->free(stream_structure);
        if (stream_repopt != NULL) stream_repopt->free(stream_repopt);
        if (stream_atomquery != NULL) stream_atomquery->free(stream_atomquery);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end repetition */

/** 
 * $ANTLR start attvallist
 * cqp.g:216:1: attvallist : attvaland ( BINOR attvaland )* ;
 */
static cqpParser_attvallist_return
attvallist(pcqpParser ctx)
{   
    cqpParser_attvallist_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINOR68;
    cqpParser_attvaland_return attvaland67;
    #undef	RETURN_TYPE_attvaland67
    #define	RETURN_TYPE_attvaland67 cqpParser_attvaland_return

    cqpParser_attvaland_return attvaland69;
    #undef	RETURN_TYPE_attvaland69
    #define	RETURN_TYPE_attvaland69 cqpParser_attvaland_return

    pANTLR3_BASE_TREE BINOR68_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BINOR68       = NULL;
    attvaland67.tree = NULL;

    attvaland69.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BINOR68_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:217:2: ( attvaland ( BINOR attvaland )* )
        // cqp.g:217:4: attvaland ( BINOR attvaland )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_attvaland_in_attvallist1151);
            attvaland67=attvaland(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattvallistEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvaland67.tree);

            // cqp.g:217:14: ( BINOR attvaland )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) ) 
                {
                case BINOR:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20) 
                {
            	case 1:
            	    // cqp.g:217:15: BINOR attvaland
            	    {
            	        BINOR68 = (pANTLR3_COMMON_TOKEN) MATCHT(BINOR, &FOLLOW_BINOR_in_attvallist1154); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvallistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        BINOR68_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINOR68));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINOR68_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_attvaland_in_attvallist1157);
            	        attvaland69=attvaland(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvallistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvaland69.tree);

            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattvallistEx; /* Prevent compiler warnings */
    ruleattvallistEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attvallist */

/** 
 * $ANTLR start attvaland
 * cqp.g:220:1: attvaland : attval ( BINAND attval )* ;
 */
static cqpParser_attvaland_return
attvaland(pcqpParser ctx)
{   
    cqpParser_attvaland_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINAND71;
    cqpParser_attval_return attval70;
    #undef	RETURN_TYPE_attval70
    #define	RETURN_TYPE_attval70 cqpParser_attval_return

    cqpParser_attval_return attval72;
    #undef	RETURN_TYPE_attval72
    #define	RETURN_TYPE_attval72 cqpParser_attval_return

    pANTLR3_BASE_TREE BINAND71_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BINAND71       = NULL;
    attval70.tree = NULL;

    attval72.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BINAND71_tree   = NULL;


    retval.tree  = NULL;
    {
        // cqp.g:221:2: ( attval ( BINAND attval )* )
        // cqp.g:221:4: attval ( BINAND attval )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_attval_in_attvaland1171);
            attval70=attval(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattvalandEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval70.tree);

            // cqp.g:221:11: ( BINAND attval )*

            for (;;)
            {
                int alt21=2;
                switch ( LA(1) ) 
                {
                case BINAND:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21) 
                {
            	case 1:
            	    // cqp.g:221:12: BINAND attval
            	    {
            	        BINAND71 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_attvaland1174); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvalandEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        BINAND71_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINAND71));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINAND71_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_attval_in_attvaland1177);
            	        attval72=attval(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvalandEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval72.tree);

            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattvalandEx; /* Prevent compiler warnings */
    ruleattvalandEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attvaland */

/** 
 * $ANTLR start attval
 * cqp.g:224:1: attval : ( ATTR ( NOT )? ( ( EQ | LEQ | GEQ ) REGEXP | e= EEQ r= REGEXP ) | POSNUM NUMBER | NOT attval | LPAREN attvallist RPAREN );
 */
static cqpParser_attval_return
attval(pcqpParser ctx)
{   
    cqpParser_attval_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    e;
    pANTLR3_COMMON_TOKEN    r;
    pANTLR3_COMMON_TOKEN    ATTR73;
    pANTLR3_COMMON_TOKEN    NOT74;
    pANTLR3_COMMON_TOKEN    EQ75;
    pANTLR3_COMMON_TOKEN    LEQ76;
    pANTLR3_COMMON_TOKEN    GEQ77;
    pANTLR3_COMMON_TOKEN    REGEXP78;
    pANTLR3_COMMON_TOKEN    POSNUM79;
    pANTLR3_COMMON_TOKEN    NUMBER80;
    pANTLR3_COMMON_TOKEN    NOT81;
    pANTLR3_COMMON_TOKEN    LPAREN83;
    pANTLR3_COMMON_TOKEN    RPAREN85;
    cqpParser_attval_return attval82;
    #undef	RETURN_TYPE_attval82
    #define	RETURN_TYPE_attval82 cqpParser_attval_return

    cqpParser_attvallist_return attvallist84;
    #undef	RETURN_TYPE_attvallist84
    #define	RETURN_TYPE_attvallist84 cqpParser_attvallist_return

    pANTLR3_BASE_TREE e_tree;
    pANTLR3_BASE_TREE r_tree;
    pANTLR3_BASE_TREE ATTR73_tree;
    pANTLR3_BASE_TREE NOT74_tree;
    pANTLR3_BASE_TREE EQ75_tree;
    pANTLR3_BASE_TREE LEQ76_tree;
    pANTLR3_BASE_TREE GEQ77_tree;
    pANTLR3_BASE_TREE REGEXP78_tree;
    pANTLR3_BASE_TREE POSNUM79_tree;
    pANTLR3_BASE_TREE NUMBER80_tree;
    pANTLR3_BASE_TREE NOT81_tree;
    pANTLR3_BASE_TREE LPAREN83_tree;
    pANTLR3_BASE_TREE RPAREN85_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    e       = NULL;
    r       = NULL;
    ATTR73       = NULL;
    NOT74       = NULL;
    EQ75       = NULL;
    LEQ76       = NULL;
    GEQ77       = NULL;
    REGEXP78       = NULL;
    POSNUM79       = NULL;
    NUMBER80       = NULL;
    NOT81       = NULL;
    LPAREN83       = NULL;
    RPAREN85       = NULL;
    attval82.tree = NULL;

    attvallist84.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    e_tree   = NULL;
    r_tree   = NULL;
    ATTR73_tree   = NULL;
    NOT74_tree   = NULL;
    EQ75_tree   = NULL;
    LEQ76_tree   = NULL;
    GEQ77_tree   = NULL;
    REGEXP78_tree   = NULL;
    POSNUM79_tree   = NULL;
    NUMBER80_tree   = NULL;
    NOT81_tree   = NULL;
    LPAREN83_tree   = NULL;
    RPAREN85_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  cqp.g:225:2: ( ATTR ( NOT )? ( ( EQ | LEQ | GEQ ) REGEXP | e= EEQ r= REGEXP ) | POSNUM NUMBER | NOT attval | LPAREN attvallist RPAREN )
            
            ANTLR3_UINT32 alt25;

            alt25=4;

            switch ( LA(1) ) 
            {
            case ATTR:
            	{
            		alt25=1;
            	}
                break;
            case POSNUM:
            	{
            		alt25=2;
            	}
                break;
            case NOT:
            	{
            		alt25=3;
            	}
                break;
            case LPAREN:
            	{
            		alt25=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleattvalEx;
            }

            switch (alt25) 
            {
        	case 1:
        	    // cqp.g:225:4: ATTR ( NOT )? ( ( EQ | LEQ | GEQ ) REGEXP | e= EEQ r= REGEXP )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ATTR73 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_attval1190); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ATTR73_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR73));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR73_tree);
        	        }

        	        // cqp.g:225:9: ( NOT )?
        	        {
        	            int alt22=2;
        	            switch ( LA(1) ) 
        	            {
        	                case NOT:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // cqp.g:225:9: NOT
        	        	    {
        	        	        NOT74 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_attval1192); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT74_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT74));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT74_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // cqp.g:226:4: ( ( EQ | LEQ | GEQ ) REGEXP | e= EEQ r= REGEXP )
        	        {
        	            int alt24=2;
        	            switch ( LA(1) ) 
        	            {
        	            case EQ:
        	            case LEQ:
        	            case GEQ:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;
        	            case EEQ:
        	            	{
        	            		alt24=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 24;
        	                EXCEPTION->state        = 0;


        	                goto ruleattvalEx;
        	            }

        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // cqp.g:226:6: ( EQ | LEQ | GEQ ) REGEXP
        	        	    {

        	        	        // cqp.g:226:6: ( EQ | LEQ | GEQ )
        	        	        {
        	        	            int alt23=3;
        	        	            switch ( LA(1) ) 
        	        	            {
        	        	            case EQ:
        	        	            	{
        	        	            		alt23=1;
        	        	            	}
        	        	                break;
        	        	            case LEQ:
        	        	            	{
        	        	            		alt23=2;
        	        	            	}
        	        	                break;
        	        	            case GEQ:
        	        	            	{
        	        	            		alt23=3;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }
        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 23;
        	        	                EXCEPTION->state        = 0;


        	        	                goto ruleattvalEx;
        	        	            }

        	        	            switch (alt23) 
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:226:7: EQ
        	        	        	    {
        	        	        	        EQ75 = (pANTLR3_COMMON_TOKEN) MATCHT(EQ, &FOLLOW_EQ_in_attval1202); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        EQ75_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EQ75));
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, EQ75_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:226:11: LEQ
        	        	        	    {
        	        	        	        LEQ76 = (pANTLR3_COMMON_TOKEN) MATCHT(LEQ, &FOLLOW_LEQ_in_attval1205); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        LEQ76_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LEQ76));
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, LEQ76_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // cqp.g:226:16: GEQ
        	        	        	    {
        	        	        	        GEQ77 = (pANTLR3_COMMON_TOKEN) MATCHT(GEQ, &FOLLOW_GEQ_in_attval1208); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        GEQ77_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, GEQ77));
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, GEQ77_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }
        	        	        REGEXP78 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1212); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        REGEXP78_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, REGEXP78));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, REGEXP78_tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:227:6: e= EEQ r= REGEXP
        	        	    {
        	        	        e = (pANTLR3_COMMON_TOKEN) MATCHT(EEQ, &FOLLOW_EEQ_in_attval1221); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        e_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, e));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, e_tree, root_0));
        	        	        }
        	        	        r = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1226); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        r_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, r));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, r_tree);
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	             unescapeString(r); 
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:229:4: POSNUM NUMBER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        POSNUM79 = (pANTLR3_COMMON_TOKEN) MATCHT(POSNUM, &FOLLOW_POSNUM_in_attval1238); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        NUMBER80 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1241); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NUMBER80_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER80));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER80_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // cqp.g:230:4: NOT attval
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NOT81 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_attval1246); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NOT81_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT81));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, NOT81_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_attval_in_attval1249);
        	        attval82=attval(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval82.tree);

        	    }
        	    break;
        	case 4:
        	    // cqp.g:231:4: LPAREN attvallist RPAREN
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        LPAREN83 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_attval1254); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_attvallist_in_attval1257);
        	        attvallist84=attvallist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist84.tree);
        	        RPAREN85 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_attval1259); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleattvalEx; /* Prevent compiler warnings */
    ruleattvalEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attval */

/** 
 * $ANTLR start atomquery
 * cqp.g:234:1: atomquery : ( position | LPAREN ( sequence -> sequence ) ( KW_WITHIN within_containing_part -> ^( KW_WITHIN $atomquery within_containing_part ) | KW_CONTAINING within_containing_part -> ^( KW_CONTAINING $atomquery within_containing_part ) )* RPAREN );
 */
static cqpParser_atomquery_return
atomquery(pcqpParser ctx)
{   
    cqpParser_atomquery_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN87;
    pANTLR3_COMMON_TOKEN    KW_WITHIN89;
    pANTLR3_COMMON_TOKEN    KW_CONTAINING91;
    pANTLR3_COMMON_TOKEN    RPAREN93;
    cqpParser_position_return position86;
    #undef	RETURN_TYPE_position86
    #define	RETURN_TYPE_position86 cqpParser_position_return

    cqpParser_sequence_return sequence88;
    #undef	RETURN_TYPE_sequence88
    #define	RETURN_TYPE_sequence88 cqpParser_sequence_return

    cqpParser_within_containing_part_return within_containing_part90;
    #undef	RETURN_TYPE_within_containing_part90
    #define	RETURN_TYPE_within_containing_part90 cqpParser_within_containing_part_return

    cqpParser_within_containing_part_return within_containing_part92;
    #undef	RETURN_TYPE_within_containing_part92
    #define	RETURN_TYPE_within_containing_part92 cqpParser_within_containing_part_return

    pANTLR3_BASE_TREE LPAREN87_tree;
    pANTLR3_BASE_TREE KW_WITHIN89_tree;
    pANTLR3_BASE_TREE KW_CONTAINING91_tree;
    pANTLR3_BASE_TREE RPAREN93_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WITHIN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CONTAINING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sequence;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_within_containing_part;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LPAREN87       = NULL;
    KW_WITHIN89       = NULL;
    KW_CONTAINING91       = NULL;
    RPAREN93       = NULL;
    position86.tree = NULL;

    sequence88.tree = NULL;

    within_containing_part90.tree = NULL;

    within_containing_part92.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LPAREN87_tree   = NULL;
    KW_WITHIN89_tree   = NULL;
    KW_CONTAINING91_tree   = NULL;
    RPAREN93_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_KW_WITHIN   = NULL;
    #define CREATE_stream_KW_WITHIN  if (stream_KW_WITHIN == NULL) {stream_KW_WITHIN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WITHIN"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_KW_CONTAINING   = NULL;
    #define CREATE_stream_KW_CONTAINING  if (stream_KW_CONTAINING == NULL) {stream_KW_CONTAINING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CONTAINING"); } 
    stream_sequence   = NULL;
    #define CREATE_stream_sequence  if (stream_sequence == NULL) {stream_sequence = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sequence"); }
    stream_within_containing_part   = NULL;
    #define CREATE_stream_within_containing_part  if (stream_within_containing_part == NULL) {stream_within_containing_part = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule within_containing_part"); }

    retval.tree  = NULL;
    {
        {
            //  cqp.g:235:2: ( position | LPAREN ( sequence -> sequence ) ( KW_WITHIN within_containing_part -> ^( KW_WITHIN $atomquery within_containing_part ) | KW_CONTAINING within_containing_part -> ^( KW_CONTAINING $atomquery within_containing_part ) )* RPAREN )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            switch ( LA(1) ) 
            {
            case KW_MU:
            case NUMBER:
            case REGEXP:
            case LBRACKET:
            	{
            		alt27=1;
            	}
                break;
            case LPAREN:
            	{
            		switch ( LA(2) ) 
            		{
            		case KW_MU:
            		case NUMBER:
            		case REGEXP:
            		case LPAREN:
            		case LBRACKET:
            		case LSTRUCT:
            			{
            				alt27=2;
            			}
            		    break;
            		case KW_MEET:
            		case KW_UNION:
            			{
            				alt27=1;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 4;


            		    goto ruleatomqueryEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto ruleatomqueryEx;
            }

            switch (alt27) 
            {
        	case 1:
        	    // cqp.g:235:4: position
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_position_in_atomquery1271);
        	        position86=position(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position86.tree);

        	    }
        	    break;
        	case 2:
        	    // cqp.g:236:4: LPAREN ( sequence -> sequence ) ( KW_WITHIN within_containing_part -> ^( KW_WITHIN $atomquery within_containing_part ) | KW_CONTAINING within_containing_part -> ^( KW_CONTAINING $atomquery within_containing_part ) )* RPAREN
        	    {
        	        LPAREN87 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_atomquery1276); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN87, NULL); }

        	        // cqp.g:236:11: ( sequence -> sequence )
        	        // cqp.g:236:12: sequence
        	        {
        	            FOLLOWPUSH(FOLLOW_sequence_in_atomquery1279);
        	            sequence88=sequence(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleatomqueryEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sequence; stream_sequence->add(stream_sequence, sequence88.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sequence
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 236:21: -> sequence
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sequence == NULL ? NULL : stream_sequence->nextTree(stream_sequence));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // cqp.g:237:3: ( KW_WITHIN within_containing_part -> ^( KW_WITHIN $atomquery within_containing_part ) | KW_CONTAINING within_containing_part -> ^( KW_CONTAINING $atomquery within_containing_part ) )*

        	        for (;;)
        	        {
        	            int alt26=3;
        	            switch ( LA(1) ) 
        	            {
        	            case KW_WITHIN:
        	            	{
        	            		alt26=1;
        	            	}
        	                break;
        	            case KW_CONTAINING:
        	            	{
        	            		alt26=2;
        	            	}
        	                break;

        	            }

        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // cqp.g:237:4: KW_WITHIN within_containing_part
        	        	    {
        	        	        KW_WITHIN89 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITHIN, &FOLLOW_KW_WITHIN_in_atomquery1289); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITHIN; stream_KW_WITHIN->add(stream_KW_WITHIN, KW_WITHIN89, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_within_containing_part_in_atomquery1292);
        	        	        within_containing_part90=within_containing_part(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_within_containing_part; stream_within_containing_part->add(stream_within_containing_part, within_containing_part90.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : KW_WITHIN, atomquery, within_containing_part
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 237:38: -> ^( KW_WITHIN $atomquery within_containing_part )
        	        	        	{
        	        	        	    // cqp.g:237:41: ^( KW_WITHIN $atomquery within_containing_part )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_KW_WITHIN == NULL ? NULL : stream_KW_WITHIN->nextNode(stream_KW_WITHIN), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_within_containing_part == NULL ? NULL : stream_within_containing_part->nextTree(stream_within_containing_part));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:238:4: KW_CONTAINING within_containing_part
        	        	    {
        	        	        KW_CONTAINING91 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CONTAINING, &FOLLOW_KW_CONTAINING_in_atomquery1309); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_CONTAINING; stream_KW_CONTAINING->add(stream_KW_CONTAINING, KW_CONTAINING91, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_within_containing_part_in_atomquery1311);
        	        	        within_containing_part92=within_containing_part(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_within_containing_part; stream_within_containing_part->add(stream_within_containing_part, within_containing_part92.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : within_containing_part, atomquery, KW_CONTAINING
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 238:41: -> ^( KW_CONTAINING $atomquery within_containing_part )
        	        	        	{
        	        	        	    // cqp.g:238:44: ^( KW_CONTAINING $atomquery within_containing_part )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_KW_CONTAINING == NULL ? NULL : stream_KW_CONTAINING->nextNode(stream_KW_CONTAINING), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_within_containing_part == NULL ? NULL : stream_within_containing_part->nextTree(stream_within_containing_part));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        RPAREN93 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_atomquery1329); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN93, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleatomqueryEx; /* Prevent compiler warnings */
    ruleatomqueryEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_KW_WITHIN != NULL) stream_KW_WITHIN->free(stream_KW_WITHIN);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_KW_CONTAINING != NULL) stream_KW_CONTAINING->free(stream_KW_CONTAINING);
        if (stream_sequence != NULL) stream_sequence->free(stream_sequence);
        if (stream_within_containing_part != NULL) stream_within_containing_part->free(stream_within_containing_part);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end atomquery */

/** 
 * $ANTLR start position
 * cqp.g:242:1: position : ( oneposition | n= NUMBER c= COLON p= oneposition -> ^( LBRACKET[\"[\"] ^( $c $n $p) ) );
 */
static cqpParser_position_return
position(pcqpParser ctx)
{   
    cqpParser_position_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    c;
    cqpParser_oneposition_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p cqpParser_oneposition_return

    cqpParser_oneposition_return oneposition94;
    #undef	RETURN_TYPE_oneposition94
    #define	RETURN_TYPE_oneposition94 cqpParser_oneposition_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE c_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_oneposition;
    /* Initialize rule variables
     */


    root_0 = NULL;

    n       = NULL;
    c       = NULL;
    p.tree = NULL;

    oneposition94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    c_tree   = NULL;

    stream_COLON   = NULL;
    #define CREATE_stream_COLON  if (stream_COLON == NULL) {stream_COLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COLON"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 
    stream_oneposition   = NULL;
    #define CREATE_stream_oneposition  if (stream_oneposition == NULL) {stream_oneposition = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule oneposition"); }

    retval.tree  = NULL;
    {
        {
            //  cqp.g:243:2: ( oneposition | n= NUMBER c= COLON p= oneposition -> ^( LBRACKET[\"[\"] ^( $c $n $p) ) )
            
            ANTLR3_UINT32 alt28;

            alt28=2;

            switch ( LA(1) ) 
            {
            case KW_MU:
            case REGEXP:
            case LPAREN:
            case LBRACKET:
            	{
            		alt28=1;
            	}
                break;
            case NUMBER:
            	{
            		alt28=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto rulepositionEx;
            }

            switch (alt28) 
            {
        	case 1:
        	    // cqp.g:243:4: oneposition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_oneposition_in_position1341);
        	        oneposition94=oneposition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, oneposition94.tree);

        	    }
        	    break;
        	case 2:
        	    // cqp.g:244:4: n= NUMBER c= COLON p= oneposition
        	    {
        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_position1348); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n, NULL); }

        	        c = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_position1352); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_COLON; stream_COLON->add(stream_COLON, c, NULL); }

        	        FOLLOWPUSH(FOLLOW_oneposition_in_position1356);
        	        p=oneposition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_oneposition; stream_oneposition->add(stream_oneposition, p.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : n, c, p
        	         * token labels      : c, n
        	         * rule labels       : retval, p
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

        	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
        	        	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 244:35: -> ^( LBRACKET[\"[\"] ^( $c $n $p) )
        	        	{
        	        	    // cqp.g:244:38: ^( LBRACKET[\"[\"] ^( $c $n $p) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        #endif
        	        	        , root_1));

        	        	        // cqp.g:244:54: ^( $c $n $p)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRootToken(ADAPTOR, stream_c == NULL ? NULL : stream_c->nextToken(stream_c), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));
        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_c != NULL) stream_c->free(stream_c); 
        	        	if (stream_n != NULL) stream_n->free(stream_n); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_p != NULL) stream_p->free(stream_p);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepositionEx; /* Prevent compiler warnings */
    rulepositionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_COLON != NULL) stream_COLON->free(stream_COLON);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
        if (stream_oneposition != NULL) stream_oneposition->free(stream_oneposition);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end position */

/** 
 * $ANTLR start oneposition
 * cqp.g:247:1: oneposition : ( LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET | REGEXP -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) ) | KW_MU | mupart );
 */
static cqpParser_oneposition_return
oneposition(pcqpParser ctx)
{   
    cqpParser_oneposition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LBRACKET95;
    pANTLR3_COMMON_TOKEN    RBRACKET97;
    pANTLR3_COMMON_TOKEN    REGEXP98;
    pANTLR3_COMMON_TOKEN    KW_MU99;
    cqpParser_attvallist_return attvallist96;
    #undef	RETURN_TYPE_attvallist96
    #define	RETURN_TYPE_attvallist96 cqpParser_attvallist_return

    cqpParser_mupart_return mupart100;
    #undef	RETURN_TYPE_mupart100
    #define	RETURN_TYPE_mupart100 cqpParser_mupart_return

    pANTLR3_BASE_TREE LBRACKET95_tree;
    pANTLR3_BASE_TREE RBRACKET97_tree;
    pANTLR3_BASE_TREE REGEXP98_tree;
    pANTLR3_BASE_TREE KW_MU99_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_REGEXP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RBRACKET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attvallist;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LBRACKET95       = NULL;
    RBRACKET97       = NULL;
    REGEXP98       = NULL;
    KW_MU99       = NULL;
    attvallist96.tree = NULL;

    mupart100.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LBRACKET95_tree   = NULL;
    RBRACKET97_tree   = NULL;
    REGEXP98_tree   = NULL;
    KW_MU99_tree   = NULL;

    stream_REGEXP   = NULL;
    #define CREATE_stream_REGEXP  if (stream_REGEXP == NULL) {stream_REGEXP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token REGEXP"); } 
    stream_LBRACKET   = NULL;
    #define CREATE_stream_LBRACKET  if (stream_LBRACKET == NULL) {stream_LBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LBRACKET"); } 
    stream_RBRACKET   = NULL;
    #define CREATE_stream_RBRACKET  if (stream_RBRACKET == NULL) {stream_RBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RBRACKET"); } 
    stream_attvallist   = NULL;
    #define CREATE_stream_attvallist  if (stream_attvallist == NULL) {stream_attvallist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attvallist"); }

    retval.tree  = NULL;
    {
        {
            //  cqp.g:248:2: ( LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET | REGEXP -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) ) | KW_MU | mupart )
            
            ANTLR3_UINT32 alt30;

            alt30=4;

            switch ( LA(1) ) 
            {
            case LBRACKET:
            	{
            		alt30=1;
            	}
                break;
            case REGEXP:
            	{
            		alt30=2;
            	}
                break;
            case KW_MU:
            	{
            		alt30=3;
            	}
                break;
            case LPAREN:
            	{
            		alt30=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 30;
                EXCEPTION->state        = 0;


                goto ruleonepositionEx;
            }

            switch (alt30) 
            {
        	case 1:
        	    // cqp.g:248:4: LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET
        	    {
        	        LBRACKET95 = (pANTLR3_COMMON_TOKEN) MATCHT(LBRACKET, &FOLLOW_LBRACKET_in_oneposition1386); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LBRACKET; stream_LBRACKET->add(stream_LBRACKET, LBRACKET95, NULL); }


        	        // cqp.g:248:13: ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) )
        	        {
        	            int alt29=2;
        	            switch ( LA(1) ) 
        	            {
        	            case ATTR:
        	            case LPAREN:
        	            case NOT:
        	            case POSNUM:
        	            	{
        	            		alt29=1;
        	            	}
        	                break;
        	            case RBRACKET:
        	            	{
        	            		alt29=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 29;
        	                EXCEPTION->state        = 0;


        	                goto ruleonepositionEx;
        	            }

        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // cqp.g:248:15: attvallist
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_attvallist_in_oneposition1390);
        	        	        attvallist96=attvallist(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleonepositionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_attvallist; stream_attvallist->add(stream_attvallist, attvallist96.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : attvallist, LBRACKET
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 248:26: -> ^( LBRACKET[\"[\"] attvallist )
        	        	        	{
        	        	        	    // cqp.g:248:29: ^( LBRACKET[\"[\"] attvallist )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_attvallist == NULL ? NULL : stream_attvallist->nextTree(stream_attvallist));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:249:7: 
        	        	    {
        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : LBRACKET
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 249:7: -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
        	        	        	{
        	        	        	    // cqp.g:249:10: ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        // cqp.g:249:26: ^( ANYPOS[\"[]\"] )
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	            #if 1 == 2
        	        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ANYPOS, TOKTEXT("[]"))
        	        	        	            #else
        	        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ANYPOS, (pANTLR3_UINT8)"[]")
        	        	        	            #endif
        	        	        	            , root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }
        	        RBRACKET97 = (pANTLR3_COMMON_TOKEN) MATCHT(RBRACKET, &FOLLOW_RBRACKET_in_oneposition1425); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RBRACKET; stream_RBRACKET->add(stream_RBRACKET, RBRACKET97, NULL); }


        	    }
        	    break;
        	case 2:
        	    // cqp.g:251:4: REGEXP
        	    {
        	        REGEXP98 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_oneposition1430); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, REGEXP98, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : REGEXP
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 251:11: -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) )
        	        	{
        	        	    // cqp.g:251:14: ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        #endif
        	        	        , root_1));

        	        	        // cqp.g:251:30: ^( EQ[\"=\"] ATTR[\"-\"] REGEXP )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, EQ, TOKTEXT("="))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQ, (pANTLR3_UINT8)"=")
        	        	            #endif
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ATTR, TOKTEXT("-"))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTR, (pANTLR3_UINT8)"-")
        	        	            #endif
        	        	            );
        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_REGEXP == NULL ? NULL : stream_REGEXP->nextNode(stream_REGEXP));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // cqp.g:252:4: KW_MU
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_MU99 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_MU, &FOLLOW_KW_MU_in_oneposition1453); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_MU99_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_MU99));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_MU99_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            throw EvalQueryException (": Deprecated query syntax: remove the 'MU' keyword from your query");
        	        }

        	    }
        	    break;
        	case 4:
        	    // cqp.g:253:4: mupart
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_mupart_in_oneposition1460);
        	        mupart100=mupart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, mupart100.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleonepositionEx; /* Prevent compiler warnings */
    ruleonepositionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_REGEXP != NULL) stream_REGEXP->free(stream_REGEXP);
        if (stream_LBRACKET != NULL) stream_LBRACKET->free(stream_LBRACKET);
        if (stream_RBRACKET != NULL) stream_RBRACKET->free(stream_RBRACKET);
        if (stream_attvallist != NULL) stream_attvallist->free(stream_attvallist);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end oneposition */

/** 
 * $ANTLR start repopt
 * cqp.g:256:1: repopt : ( STAR -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] ) | PLUS -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] ) | QUEST -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] ) | LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE );
 */
static cqpParser_repopt_return
repopt(pcqpParser ctx)
{   
    cqpParser_repopt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n1;
    pANTLR3_COMMON_TOKEN    n2;
    pANTLR3_COMMON_TOKEN    STAR101;
    pANTLR3_COMMON_TOKEN    PLUS102;
    pANTLR3_COMMON_TOKEN    QUEST103;
    pANTLR3_COMMON_TOKEN    LBRACE104;
    pANTLR3_COMMON_TOKEN    COMMA105;
    pANTLR3_COMMON_TOKEN    RBRACE106;

    pANTLR3_BASE_TREE n1_tree;
    pANTLR3_BASE_TREE n2_tree;
    pANTLR3_BASE_TREE STAR101_tree;
    pANTLR3_BASE_TREE PLUS102_tree;
    pANTLR3_BASE_TREE QUEST103_tree;
    pANTLR3_BASE_TREE LBRACE104_tree;
    pANTLR3_BASE_TREE COMMA105_tree;
    pANTLR3_BASE_TREE RBRACE106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PLUS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STAR;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RBRACE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LBRACE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUEST;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;

    /* Initialize rule variables
     */


    root_0 = NULL;

    n1       = NULL;
    n2       = NULL;
    STAR101       = NULL;
    PLUS102       = NULL;
    QUEST103       = NULL;
    LBRACE104       = NULL;
    COMMA105       = NULL;
    RBRACE106       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    n1_tree   = NULL;
    n2_tree   = NULL;
    STAR101_tree   = NULL;
    PLUS102_tree   = NULL;
    QUEST103_tree   = NULL;
    LBRACE104_tree   = NULL;
    COMMA105_tree   = NULL;
    RBRACE106_tree   = NULL;

    stream_PLUS   = NULL;
    #define CREATE_stream_PLUS  if (stream_PLUS == NULL) {stream_PLUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PLUS"); } 
    stream_STAR   = NULL;
    #define CREATE_stream_STAR  if (stream_STAR == NULL) {stream_STAR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STAR"); } 
    stream_RBRACE   = NULL;
    #define CREATE_stream_RBRACE  if (stream_RBRACE == NULL) {stream_RBRACE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RBRACE"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_LBRACE   = NULL;
    #define CREATE_stream_LBRACE  if (stream_LBRACE == NULL) {stream_LBRACE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LBRACE"); } 
    stream_QUEST   = NULL;
    #define CREATE_stream_QUEST  if (stream_QUEST == NULL) {stream_QUEST = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUEST"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 

    retval.tree  = NULL;
    {
        {
            //  cqp.g:257:2: ( STAR -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] ) | PLUS -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] ) | QUEST -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] ) | LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE )
            
            ANTLR3_UINT32 alt33;

            alt33=4;

            switch ( LA(1) ) 
            {
            case STAR:
            	{
            		alt33=1;
            	}
                break;
            case PLUS:
            	{
            		alt33=2;
            	}
                break;
            case QUEST:
            	{
            		alt33=3;
            	}
                break;
            case LBRACE:
            	{
            		alt33=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto rulerepoptEx;
            }

            switch (alt33) 
            {
        	case 1:
        	    // cqp.g:257:4: STAR
        	    {
        	        STAR101 = (pANTLR3_COMMON_TOKEN) MATCHT(STAR, &FOLLOW_STAR_in_repopt1471); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_STAR; stream_STAR->add(stream_STAR, STAR101, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 257:11: -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] )
        	        	{
        	        	    // cqp.g:257:14: ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("0"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"0")
        	        	        #endif
        	        	        );
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // cqp.g:258:4: PLUS
        	    {
        	        PLUS102 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_repopt1491); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_PLUS; stream_PLUS->add(stream_PLUS, PLUS102, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 258:11: -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] )
        	        	{
        	        	    // cqp.g:258:14: ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"1")
        	        	        #endif
        	        	        );
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // cqp.g:259:4: QUEST
        	    {
        	        QUEST103 = (pANTLR3_COMMON_TOKEN) MATCHT(QUEST, &FOLLOW_QUEST_in_repopt1511); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_QUEST; stream_QUEST->add(stream_QUEST, QUEST103, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 259:11: -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] )
        	        	{
        	        	    // cqp.g:259:14: ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("0"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"0")
        	        	        #endif
        	        	        );
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"1")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // cqp.g:260:4: LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE
        	    {
        	        LBRACE104 = (pANTLR3_COMMON_TOKEN) MATCHT(LBRACE, &FOLLOW_LBRACE_in_repopt1530); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LBRACE; stream_LBRACE->add(stream_LBRACE, LBRACE104, NULL); }

        	        n1 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_repopt1534); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n1, NULL); }


        	        // cqp.g:261:3: ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) )
        	        {
        	            int alt32=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt32=1;
        	            	}
        	                break;
        	            case RBRACE:
        	            	{
        	            		alt32=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 32;
        	                EXCEPTION->state        = 0;


        	                goto rulerepoptEx;
        	            }

        	            switch (alt32) 
        	            {
        	        	case 1:
        	        	    // cqp.g:261:4: COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) )
        	        	    {
        	        	        COMMA105 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_repopt1540); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepoptEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA105, NULL); }


        	        	        // cqp.g:262:4: (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) )
        	        	        {
        	        	            int alt31=2;
        	        	            switch ( LA(1) ) 
        	        	            {
        	        	            case NUMBER:
        	        	            	{
        	        	            		alt31=1;
        	        	            	}
        	        	                break;
        	        	            case RBRACE:
        	        	            	{
        	        	            		alt31=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }
        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 31;
        	        	                EXCEPTION->state        = 0;


        	        	                goto rulerepoptEx;
        	        	            }

        	        	            switch (alt31) 
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:262:6: n2= NUMBER
        	        	        	    {
        	        	        	        n2 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_repopt1550); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulerepoptEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n2, NULL); }


        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : n2, n1
        	        	        	         * token labels      : n1, n2
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n2;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	        	stream_n2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n2", n2);
        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 263:5: -> ^( REPOPT[\"RO\"] $n1 $n2)
        	        	        	        	{
        	        	        	        	    // cqp.g:263:8: ^( REPOPT[\"RO\"] $n1 $n2)
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        	        #endif
        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n2 == NULL ? NULL : stream_n2->nextNode(stream_n2));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	        	if (stream_n2 != NULL) stream_n2->free(stream_n2); 
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:265:5: 
        	        	        	    {
        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : n1, NUMBER
        	        	        	         * token labels      : n1
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 265:5: -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] )
        	        	        	        	{
        	        	        	        	    // cqp.g:265:8: ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        	        #endif
        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        	        	        #endif
        	        	        	        	        );

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:268:4: 
        	        	    {
        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : n1, n1
        	        	         * token labels      : n1
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 268:4: -> ^( REPOPT[\"RO\"] $n1 $n1)
        	        	        	{
        	        	        	    // cqp.g:268:7: ^( REPOPT[\"RO\"] $n1 $n1)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }
        	        RBRACE106 = (pANTLR3_COMMON_TOKEN) MATCHT(RBRACE, &FOLLOW_RBRACE_in_repopt1620); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RBRACE; stream_RBRACE->add(stream_RBRACE, RBRACE106, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerepoptEx; /* Prevent compiler warnings */
    rulerepoptEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PLUS != NULL) stream_PLUS->free(stream_PLUS);
        if (stream_STAR != NULL) stream_STAR->free(stream_STAR);
        if (stream_RBRACE != NULL) stream_RBRACE->free(stream_RBRACE);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_LBRACE != NULL) stream_LBRACE->free(stream_LBRACE);
        if (stream_QUEST != NULL) stream_QUEST->free(stream_QUEST);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end repopt */

// $ANTLR start synpred1_cqp
static void synpred1_cqp_fragment(pcqpParser ctx ) 
{
    // cqp.g:151:11: ( LSTRUCT structure RSTRUCT )
    // cqp.g:151:12: LSTRUCT structure RSTRUCT
    {
         MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_synpred1_cqp689); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_structure_in_synpred1_cqp692);
        structure(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_synpred1_cqp694); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_cqpEx; /* Prevent compiler warnings */
rulesynpred1_cqpEx: ;

}
// $ANTLR end synpred1_cqp
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_cqp(pcqpParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_cqp_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
