/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : cqp.g
 *     -                            On : 2015-04-08 21:27:01
 *     -                for the parser : cqpParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

	// Copyright (c) 1999-2013  Pavel Rychly, Milos Jakubicek

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cqpParser.hh"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pcqpParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcqpParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pcqpParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pcqpParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   cqpParserTokenNames[46+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ANYPOS",
        (pANTLR3_UINT8) "ATTR",
        (pANTLR3_UINT8) "BEGSTRUCT",
        (pANTLR3_UINT8) "BINAND",
        (pANTLR3_UINT8) "BINOR",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "EEQ",
        (pANTLR3_UINT8) "ENDSTRUCT",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "GEQ",
        (pANTLR3_UINT8) "KW_CCOLL",
        (pANTLR3_UINT8) "KW_CONTAINING",
        (pANTLR3_UINT8) "KW_FREQ",
        (pANTLR3_UINT8) "KW_MEET",
        (pANTLR3_UINT8) "KW_MU",
        (pANTLR3_UINT8) "KW_SWAP",
        (pANTLR3_UINT8) "KW_UNION",
        (pANTLR3_UINT8) "KW_WITHIN",
        (pANTLR3_UINT8) "KW_WS",
        (pANTLR3_UINT8) "LBRACE",
        (pANTLR3_UINT8) "LBRACKET",
        (pANTLR3_UINT8) "LEQ",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "LSTRUCT",
        (pANTLR3_UINT8) "NNUMBER",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "OPT",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "POSNUM",
        (pANTLR3_UINT8) "QUEST",
        (pANTLR3_UINT8) "RBRACE",
        (pANTLR3_UINT8) "RBRACKET",
        (pANTLR3_UINT8) "REGEXP",
        (pANTLR3_UINT8) "REPOPT",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "RSTRUCT",
        (pANTLR3_UINT8) "SEMI",
        (pANTLR3_UINT8) "SEQ",
        (pANTLR3_UINT8) "SLASH",
        (pANTLR3_UINT8) "STAR",
        (pANTLR3_UINT8) "TEQ",
        (pANTLR3_UINT8) "WHOLESTRUCT",
        (pANTLR3_UINT8) "WS_"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 cqpParser_query_return
	query    (pcqpParser ctx);
static 
 cqpParser_globpart_return
	globpart    (pcqpParser ctx);
static 
 cqpParser_globcond_return
	globcond    (pcqpParser ctx);
static 
 cqpParser_within_containing_part_return
	within_containing_part    (pcqpParser ctx);
static 
 cqpParser_within_number_return
	within_number    (pcqpParser ctx);
static 
 cqpParser_structure_return
	structure    (pcqpParser ctx);
static 
 cqpParser_oneposonly_return
	oneposonly    (pcqpParser ctx);
static 
 cqpParser_alignedpart_return
	alignedpart    (pcqpParser ctx);
static 
 cqpParser_mupart_return
	mupart    (pcqpParser ctx);
static 
 cqpParser_integer_return
	integer    (pcqpParser ctx);
static 
 cqpParser_meetop_return
	meetop    (pcqpParser ctx);
static 
 cqpParser_unionop_return
	unionop    (pcqpParser ctx);
static 
 cqpParser_sequence_return
	sequence    (pcqpParser ctx);
static 
 cqpParser_seq_return
	seq    (pcqpParser ctx);
static 
 cqpParser_repetition_return
	repetition    (pcqpParser ctx);
static 
 cqpParser_attvallist_return
	attvallist    (pcqpParser ctx);
static 
 cqpParser_attvaland_return
	attvaland    (pcqpParser ctx);
static 
 cqpParser_attval_return
	attval    (pcqpParser ctx);
static 
 cqpParser_atomquery_return
	atomquery    (pcqpParser ctx);
static 
 cqpParser_position_return
	position    (pcqpParser ctx);
static 
 cqpParser_oneposition_return
	oneposition    (pcqpParser ctx);
static 
 cqpParser_repopt_return
	repopt    (pcqpParser ctx);
static 
 ANTLR3_BOOLEAN
	synpred1_cqp    (pcqpParser ctx);
static void	cqpParserFree(pcqpParser ctx);
static void     cqpParserReset (pcqpParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cqp.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new cqpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcqpParser
cqpParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return cqpParserNewSSD(instream, NULL);
}

/** \brief Create a new cqpParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcqpParser
cqpParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcqpParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pcqpParser) ANTLR3_CALLOC(1, sizeof(cqpParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in cqpParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our cqpParser interface
     */
    ctx->query	= query;
    ctx->globpart	= globpart;
    ctx->globcond	= globcond;
    ctx->within_containing_part	= within_containing_part;
    ctx->within_number	= within_number;
    ctx->structure	= structure;
    ctx->oneposonly	= oneposonly;
    ctx->alignedpart	= alignedpart;
    ctx->mupart	= mupart;
    ctx->integer	= integer;
    ctx->meetop	= meetop;
    ctx->unionop	= unionop;
    ctx->sequence	= sequence;
    ctx->seq	= seq;
    ctx->repetition	= repetition;
    ctx->attvallist	= attvallist;
    ctx->attvaland	= attvaland;
    ctx->attval	= attval;
    ctx->atomquery	= atomquery;
    ctx->position	= position;
    ctx->oneposition	= oneposition;
    ctx->repopt	= repopt;
    ctx->synpred1_cqp	= synpred1_cqp;
    ctx->free			= cqpParserFree;
    ctx->reset			= cqpParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    	RECOGNIZER->displayRecognitionError = throwEvalQueryException;

    /* Install the token table
     */
    PSRSTATE->tokenNames   = cqpParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
cqpParserReset (pcqpParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 cqpParserFree(pcqpParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return cqpParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_query548  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_query548_bits[]	= { ANTLR3_UINT64_LIT(0x0000080080820080) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_query548	= { FOLLOW_sequence_in_query548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_query565  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_query565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100040000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_query565	= { FOLLOW_BINAND_in_query565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globpart_in_query567  */
static	ANTLR3_BITWORD FOLLOW_globpart_in_query567_bits[]	= { ANTLR3_UINT64_LIT(0x0000080080820000) };
static  ANTLR3_BITSET_LIST FOLLOW_globpart_in_query567	= { FOLLOW_globpart_in_query567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_query592  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_query592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000820000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_query592	= { FOLLOW_NOT_in_query592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITHIN_in_query598  */
static	ANTLR3_BITWORD FOLLOW_KW_WITHIN_in_query598_bits[]	= { ANTLR3_UINT64_LIT(0x00008081B4100020) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITHIN_in_query598	= { FOLLOW_KW_WITHIN_in_query598_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CONTAINING_in_query602  */
static	ANTLR3_BITWORD FOLLOW_KW_CONTAINING_in_query602_bits[]	= { ANTLR3_UINT64_LIT(0x00008081B4100020) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CONTAINING_in_query602	= { FOLLOW_KW_CONTAINING_in_query602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_query607  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_query607_bits[]	= { ANTLR3_UINT64_LIT(0x0000080080820000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_query607	= { FOLLOW_within_containing_part_in_query607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_query636  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_query636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_query636	= { FOLLOW_SEMI_in_query636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globcond_in_globpart653  */
static	ANTLR3_BITWORD FOLLOW_globcond_in_globpart653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_globcond_in_globpart653	= { FOLLOW_globcond_in_globpart653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_globpart656  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_globpart656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100040000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_globpart656	= { FOLLOW_BINAND_in_globpart656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_globcond_in_globpart659  */
static	ANTLR3_BITWORD FOLLOW_globcond_in_globpart659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_globcond_in_globpart659	= { FOLLOW_globcond_in_globpart659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond678  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond678	= { FOLLOW_NUMBER_in_globcond678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond680  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond680	= { FOLLOW_DOT_in_globcond680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond683  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000080004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond683	= { FOLLOW_ATTR_in_globcond683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_globcond685  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_globcond685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_globcond685	= { FOLLOW_NOT_in_globcond685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_globcond688  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_globcond688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_globcond688	= { FOLLOW_EQ_in_globcond688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond690  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond690	= { FOLLOW_NUMBER_in_globcond690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond692  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond692	= { FOLLOW_DOT_in_globcond692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond695  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond695	= { FOLLOW_ATTR_in_globcond695_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_FREQ_in_globcond703  */
static	ANTLR3_BITWORD FOLLOW_KW_FREQ_in_globcond703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_FREQ_in_globcond703	= { FOLLOW_KW_FREQ_in_globcond703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_globcond706  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_globcond706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_globcond706	= { FOLLOW_LPAREN_in_globcond706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond709  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond709	= { FOLLOW_NUMBER_in_globcond709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_globcond711  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_globcond711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_globcond711	= { FOLLOW_DOT_in_globcond711_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_globcond714  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_globcond714_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_globcond714	= { FOLLOW_ATTR_in_globcond714_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_globcond716  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_globcond716_bits[]	= { ANTLR3_UINT64_LIT(0x00000400A800C000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_globcond716	= { FOLLOW_RPAREN_in_globcond716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_globcond719  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_globcond719_bits[]	= { ANTLR3_UINT64_LIT(0x000004002800C000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_globcond719	= { FOLLOW_NOT_in_globcond719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_globcond722  */
static	ANTLR3_BITWORD FOLLOW_set_in_globcond722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_globcond722	= { FOLLOW_set_in_globcond722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_globcond734  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_globcond734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_globcond734	= { FOLLOW_NUMBER_in_globcond734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_within_containing_part751  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_within_containing_part751_bits[]	= { ANTLR3_UINT64_LIT(0x0000808134100020) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_within_containing_part751	= { FOLLOW_NOT_in_within_containing_part751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_within_containing_part779  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_within_containing_part779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_within_containing_part779	= { FOLLOW_LSTRUCT_in_within_containing_part779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_within_containing_part782  */
static	ANTLR3_BITWORD FOLLOW_structure_in_within_containing_part782_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_within_containing_part782	= { FOLLOW_structure_in_within_containing_part782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_within_containing_part784  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_within_containing_part784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_within_containing_part784	= { FOLLOW_RSTRUCT_in_within_containing_part784_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_within_containing_part798  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_within_containing_part798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_within_containing_part798	= { FOLLOW_sequence_in_within_containing_part798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_number_in_within_containing_part810  */
static	ANTLR3_BITWORD FOLLOW_within_number_in_within_containing_part810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_within_number_in_within_containing_part810	= { FOLLOW_within_number_in_within_containing_part810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_alignedpart_in_within_containing_part822  */
static	ANTLR3_BITWORD FOLLOW_alignedpart_in_within_containing_part822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_alignedpart_in_within_containing_part822	= { FOLLOW_alignedpart_in_within_containing_part822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_within_number853  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_within_number853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_within_number853	= { FOLLOW_NUMBER_in_within_number853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_structure898  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_structure898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210022) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_structure898	= { FOLLOW_ATTR_in_structure898_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_structure900  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_structure900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_structure900	= { FOLLOW_attvallist_in_structure900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_oneposonly915  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_oneposonly915_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_oneposonly915	= { FOLLOW_attvallist_in_oneposonly915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_oneposonly917  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_oneposonly917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_oneposonly917	= { FOLLOW_SEMI_in_oneposonly917_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_alignedpart936  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_alignedpart936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_alignedpart936	= { FOLLOW_ATTR_in_alignedpart936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_alignedpart938  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_alignedpart938_bits[]	= { ANTLR3_UINT64_LIT(0x0000808134100000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_alignedpart938	= { FOLLOW_COLON_in_alignedpart938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_alignedpart942  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_alignedpart942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_alignedpart942	= { FOLLOW_sequence_in_alignedpart942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_mupart959  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_mupart959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000480000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_mupart959	= { FOLLOW_LPAREN_in_mupart959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unionop_in_mupart963  */
static	ANTLR3_BITWORD FOLLOW_unionop_in_mupart963_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unionop_in_mupart963	= { FOLLOW_unionop_in_mupart963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_meetop_in_mupart967  */
static	ANTLR3_BITWORD FOLLOW_meetop_in_mupart967_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_meetop_in_mupart967	= { FOLLOW_meetop_in_mupart967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_mupart970  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_mupart970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_mupart970	= { FOLLOW_RPAREN_in_mupart970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer982  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer982	= { FOLLOW_NUMBER_in_integer982_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NNUMBER_in_integer989  */
static	ANTLR3_BITWORD FOLLOW_NNUMBER_in_integer989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NNUMBER_in_integer989	= { FOLLOW_NNUMBER_in_integer989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_MEET_in_meetop1007  */
static	ANTLR3_BITWORD FOLLOW_KW_MEET_in_meetop1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000808114100000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_MEET_in_meetop1007	= { FOLLOW_KW_MEET_in_meetop1007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_meetop1010  */
static	ANTLR3_BITWORD FOLLOW_position_in_meetop1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000808114100000) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_meetop1010	= { FOLLOW_position_in_meetop1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_meetop1012  */
static	ANTLR3_BITWORD FOLLOW_position_in_meetop1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000140000002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_meetop1012	= { FOLLOW_position_in_meetop1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_meetop1015  */
static	ANTLR3_BITWORD FOLLOW_integer_in_meetop1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000140000000) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_meetop1015	= { FOLLOW_integer_in_meetop1015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_meetop1017  */
static	ANTLR3_BITWORD FOLLOW_integer_in_meetop1017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_meetop1017	= { FOLLOW_integer_in_meetop1017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNION_in_unionop1030  */
static	ANTLR3_BITWORD FOLLOW_KW_UNION_in_unionop1030_bits[]	= { ANTLR3_UINT64_LIT(0x0000808114100000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNION_in_unionop1030	= { FOLLOW_KW_UNION_in_unionop1030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_unionop1033  */
static	ANTLR3_BITWORD FOLLOW_position_in_unionop1033_bits[]	= { ANTLR3_UINT64_LIT(0x0000808114100000) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_unionop1033	= { FOLLOW_position_in_unionop1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_unionop1035  */
static	ANTLR3_BITWORD FOLLOW_position_in_unionop1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_unionop1035	= { FOLLOW_position_in_unionop1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_seq_in_sequence1047  */
static	ANTLR3_BITWORD FOLLOW_seq_in_sequence1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_seq_in_sequence1047	= { FOLLOW_seq_in_sequence1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOR_in_sequence1050  */
static	ANTLR3_BITWORD FOLLOW_BINOR_in_sequence1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000808134100000) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOR_in_sequence1050	= { FOLLOW_BINOR_in_sequence1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_seq_in_sequence1053  */
static	ANTLR3_BITWORD FOLLOW_seq_in_sequence1053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_seq_in_sequence1053	= { FOLLOW_seq_in_sequence1053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_repetition_in_seq1067  */
static	ANTLR3_BITWORD FOLLOW_repetition_in_seq1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000808134100002) };
static  ANTLR3_BITSET_LIST FOLLOW_repetition_in_seq1067	= { FOLLOW_repetition_in_seq1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atomquery_in_repetition1089  */
static	ANTLR3_BITWORD FOLLOW_atomquery_in_repetition1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000401402000002) };
static  ANTLR3_BITSET_LIST FOLLOW_atomquery_in_repetition1089	= { FOLLOW_atomquery_in_repetition1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_repopt_in_repetition1095  */
static	ANTLR3_BITWORD FOLLOW_repopt_in_repetition1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_repopt_in_repetition1095	= { FOLLOW_repopt_in_repetition1095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_repetition1125  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_repetition1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_repetition1125	= { FOLLOW_LSTRUCT_in_repetition1125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_repetition1131  */
static	ANTLR3_BITWORD FOLLOW_structure_in_repetition1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000240000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_repetition1131	= { FOLLOW_structure_in_repetition1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLASH_in_repetition1139  */
static	ANTLR3_BITWORD FOLLOW_SLASH_in_repetition1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SLASH_in_repetition1139	= { FOLLOW_SLASH_in_repetition1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLASH_in_repetition1183  */
static	ANTLR3_BITWORD FOLLOW_SLASH_in_repetition1183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_SLASH_in_repetition1183	= { FOLLOW_SLASH_in_repetition1183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_repetition1185  */
static	ANTLR3_BITWORD FOLLOW_structure_in_repetition1185_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_repetition1185	= { FOLLOW_structure_in_repetition1185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_repetition1216  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_repetition1216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_repetition1216	= { FOLLOW_RSTRUCT_in_repetition1216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvaland_in_attvallist1228  */
static	ANTLR3_BITWORD FOLLOW_attvaland_in_attvallist1228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_attvaland_in_attvallist1228	= { FOLLOW_attvaland_in_attvallist1228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINOR_in_attvallist1231  */
static	ANTLR3_BITWORD FOLLOW_BINOR_in_attvallist1231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_BINOR_in_attvallist1231	= { FOLLOW_BINOR_in_attvallist1231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvaland_in_attvallist1234  */
static	ANTLR3_BITWORD FOLLOW_attvaland_in_attvallist1234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_attvaland_in_attvallist1234	= { FOLLOW_attvaland_in_attvallist1234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attvaland1248  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attvaland1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attvaland1248	= { FOLLOW_attval_in_attvaland1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BINAND_in_attvaland1251  */
static	ANTLR3_BITWORD FOLLOW_BINAND_in_attvaland1251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_BINAND_in_attvaland1251	= { FOLLOW_BINAND_in_attvaland1251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attvaland1254  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attvaland1254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attvaland1254	= { FOLLOW_attval_in_attvaland1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_attval1267  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_attval1267_bits[]	= { ANTLR3_UINT64_LIT(0x000080008800D000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_attval1267	= { FOLLOW_ATTR_in_attval1267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_attval1269  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_attval1269_bits[]	= { ANTLR3_UINT64_LIT(0x000080000800D000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_attval1269	= { FOLLOW_NOT_in_attval1269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_attval1279  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_attval1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_attval1279	= { FOLLOW_EQ_in_attval1279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEQ_in_attval1282  */
static	ANTLR3_BITWORD FOLLOW_LEQ_in_attval1282_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LEQ_in_attval1282	= { FOLLOW_LEQ_in_attval1282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GEQ_in_attval1285  */
static	ANTLR3_BITWORD FOLLOW_GEQ_in_attval1285_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_GEQ_in_attval1285	= { FOLLOW_GEQ_in_attval1285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TEQ_in_attval1288  */
static	ANTLR3_BITWORD FOLLOW_TEQ_in_attval1288_bits[]	= { ANTLR3_UINT64_LIT(0x0000008100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_TEQ_in_attval1288	= { FOLLOW_TEQ_in_attval1288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1291  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1291_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1291	= { FOLLOW_NUMBER_in_attval1291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1295  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1295	= { FOLLOW_REGEXP_in_attval1295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EEQ_in_attval1304  */
static	ANTLR3_BITWORD FOLLOW_EEQ_in_attval1304_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EEQ_in_attval1304	= { FOLLOW_EEQ_in_attval1304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1309  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1309	= { FOLLOW_REGEXP_in_attval1309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_POSNUM_in_attval1321  */
static	ANTLR3_BITWORD FOLLOW_POSNUM_in_attval1321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_POSNUM_in_attval1321	= { FOLLOW_POSNUM_in_attval1321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1325  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1325	= { FOLLOW_NUMBER_in_attval1325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NNUMBER_in_attval1328  */
static	ANTLR3_BITWORD FOLLOW_NNUMBER_in_attval1328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NNUMBER_in_attval1328	= { FOLLOW_NNUMBER_in_attval1328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_attval1377  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_attval1377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_attval1377	= { FOLLOW_NOT_in_attval1377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attval_in_attval1380  */
static	ANTLR3_BITWORD FOLLOW_attval_in_attval1380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attval_in_attval1380	= { FOLLOW_attval_in_attval1380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_attval1385  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_attval1385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_attval1385	= { FOLLOW_LPAREN_in_attval1385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_attval1388  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_attval1388_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_attval1388	= { FOLLOW_attvallist_in_attval1388_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_attval1390  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_attval1390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_attval1390	= { FOLLOW_RPAREN_in_attval1390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WS_in_attval1396  */
static	ANTLR3_BITWORD FOLLOW_KW_WS_in_attval1396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WS_in_attval1396	= { FOLLOW_KW_WS_in_attval1396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_attval1398  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_attval1398_bits[]	= { ANTLR3_UINT64_LIT(0x0000008100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_attval1398	= { FOLLOW_LPAREN_in_attval1398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1406  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1406	= { FOLLOW_NUMBER_in_attval1406_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1408  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1408	= { FOLLOW_COMMA_in_attval1408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1412  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1412_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1412	= { FOLLOW_NUMBER_in_attval1412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1432  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1432	= { FOLLOW_REGEXP_in_attval1432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1434  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1434_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1434	= { FOLLOW_COMMA_in_attval1434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1438  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1438	= { FOLLOW_REGEXP_in_attval1438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1440  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1440_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1440	= { FOLLOW_COMMA_in_attval1440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_attval1444  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_attval1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_attval1444	= { FOLLOW_REGEXP_in_attval1444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_attval1465  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_attval1465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_attval1465	= { FOLLOW_RPAREN_in_attval1465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_SWAP_in_attval1470  */
static	ANTLR3_BITWORD FOLLOW_KW_SWAP_in_attval1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_SWAP_in_attval1470	= { FOLLOW_KW_SWAP_in_attval1470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_attval1473  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_attval1473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_attval1473	= { FOLLOW_LPAREN_in_attval1473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1476  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1476	= { FOLLOW_NUMBER_in_attval1476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1478  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1478	= { FOLLOW_COMMA_in_attval1478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_attval1481  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_attval1481_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_attval1481	= { FOLLOW_attvallist_in_attval1481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_attval1483  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_attval1483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_attval1483	= { FOLLOW_RPAREN_in_attval1483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CCOLL_in_attval1489  */
static	ANTLR3_BITWORD FOLLOW_KW_CCOLL_in_attval1489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CCOLL_in_attval1489	= { FOLLOW_KW_CCOLL_in_attval1489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_attval1492  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_attval1492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_attval1492	= { FOLLOW_LPAREN_in_attval1492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1495  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1495	= { FOLLOW_NUMBER_in_attval1495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1497  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1497	= { FOLLOW_COMMA_in_attval1497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_attval1500  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_attval1500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_attval1500	= { FOLLOW_NUMBER_in_attval1500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attval1502  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attval1502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attval1502	= { FOLLOW_COMMA_in_attval1502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_attval1505  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_attval1505_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_attval1505	= { FOLLOW_attvallist_in_attval1505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_attval1507  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_attval1507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_attval1507	= { FOLLOW_RPAREN_in_attval1507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_position_in_atomquery1519  */
static	ANTLR3_BITWORD FOLLOW_position_in_atomquery1519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_position_in_atomquery1519	= { FOLLOW_position_in_atomquery1519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_atomquery1524  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_atomquery1524_bits[]	= { ANTLR3_UINT64_LIT(0x0000808134100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_atomquery1524	= { FOLLOW_LPAREN_in_atomquery1524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sequence_in_atomquery1527  */
static	ANTLR3_BITWORD FOLLOW_sequence_in_atomquery1527_bits[]	= { ANTLR3_UINT64_LIT(0x0000020080820000) };
static  ANTLR3_BITSET_LIST FOLLOW_sequence_in_atomquery1527	= { FOLLOW_sequence_in_atomquery1527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_atomquery1537  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_atomquery1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_atomquery1537	= { FOLLOW_NOT_in_atomquery1537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITHIN_in_atomquery1540  */
static	ANTLR3_BITWORD FOLLOW_KW_WITHIN_in_atomquery1540_bits[]	= { ANTLR3_UINT64_LIT(0x00008081B4100020) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITHIN_in_atomquery1540	= { FOLLOW_KW_WITHIN_in_atomquery1540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_atomquery1543  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_atomquery1543_bits[]	= { ANTLR3_UINT64_LIT(0x0000020080820000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_atomquery1543	= { FOLLOW_within_containing_part_in_atomquery1543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_atomquery1563  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_atomquery1563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_atomquery1563	= { FOLLOW_NOT_in_atomquery1563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CONTAINING_in_atomquery1566  */
static	ANTLR3_BITWORD FOLLOW_KW_CONTAINING_in_atomquery1566_bits[]	= { ANTLR3_UINT64_LIT(0x00008081B4100020) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CONTAINING_in_atomquery1566	= { FOLLOW_KW_CONTAINING_in_atomquery1566_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_within_containing_part_in_atomquery1568  */
static	ANTLR3_BITWORD FOLLOW_within_containing_part_in_atomquery1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000020080820000) };
static  ANTLR3_BITSET_LIST FOLLOW_within_containing_part_in_atomquery1568	= { FOLLOW_within_containing_part_in_atomquery1568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_atomquery1589  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_atomquery1589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_atomquery1589	= { FOLLOW_RPAREN_in_atomquery1589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_oneposition_in_position1601  */
static	ANTLR3_BITWORD FOLLOW_oneposition_in_position1601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_oneposition_in_position1601	= { FOLLOW_oneposition_in_position1601_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_position1608  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_position1608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_position1608	= { FOLLOW_NUMBER_in_position1608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_position1612  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_position1612_bits[]	= { ANTLR3_UINT64_LIT(0x0000808014100000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_position1612	= { FOLLOW_COLON_in_position1612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_oneposition_in_position1616  */
static	ANTLR3_BITWORD FOLLOW_oneposition_in_position1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_oneposition_in_position1616	= { FOLLOW_oneposition_in_position1616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRACKET_in_oneposition1646  */
static	ANTLR3_BITWORD FOLLOW_LBRACKET_in_oneposition1646_bits[]	= { ANTLR3_UINT64_LIT(0x0000004891210020) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRACKET_in_oneposition1646	= { FOLLOW_LBRACKET_in_oneposition1646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attvallist_in_oneposition1650  */
static	ANTLR3_BITWORD FOLLOW_attvallist_in_oneposition1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attvallist_in_oneposition1650	= { FOLLOW_attvallist_in_oneposition1650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRACKET_in_oneposition1685  */
static	ANTLR3_BITWORD FOLLOW_RBRACKET_in_oneposition1685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRACKET_in_oneposition1685	= { FOLLOW_RBRACKET_in_oneposition1685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_oneposition1690  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_oneposition1690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_oneposition1690	= { FOLLOW_REGEXP_in_oneposition1690_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TEQ_in_oneposition1713  */
static	ANTLR3_BITWORD FOLLOW_TEQ_in_oneposition1713_bits[]	= { ANTLR3_UINT64_LIT(0x0000008100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_TEQ_in_oneposition1713	= { FOLLOW_TEQ_in_oneposition1713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_oneposition1715  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_oneposition1715_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_oneposition1715	= { FOLLOW_NUMBER_in_oneposition1715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REGEXP_in_oneposition1718  */
static	ANTLR3_BITWORD FOLLOW_REGEXP_in_oneposition1718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_REGEXP_in_oneposition1718	= { FOLLOW_REGEXP_in_oneposition1718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_MU_in_oneposition1743  */
static	ANTLR3_BITWORD FOLLOW_KW_MU_in_oneposition1743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_MU_in_oneposition1743	= { FOLLOW_KW_MU_in_oneposition1743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mupart_in_oneposition1750  */
static	ANTLR3_BITWORD FOLLOW_mupart_in_oneposition1750_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_mupart_in_oneposition1750	= { FOLLOW_mupart_in_oneposition1750_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_repopt1761  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_repopt1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_repopt1761	= { FOLLOW_STAR_in_repopt1761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_repopt1781  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_repopt1781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_repopt1781	= { FOLLOW_PLUS_in_repopt1781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUEST_in_repopt1801  */
static	ANTLR3_BITWORD FOLLOW_QUEST_in_repopt1801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_QUEST_in_repopt1801	= { FOLLOW_QUEST_in_repopt1801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRACE_in_repopt1820  */
static	ANTLR3_BITWORD FOLLOW_LBRACE_in_repopt1820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRACE_in_repopt1820	= { FOLLOW_LBRACE_in_repopt1820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_repopt1824  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_repopt1824_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_repopt1824	= { FOLLOW_NUMBER_in_repopt1824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_repopt1830  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_repopt1830_bits[]	= { ANTLR3_UINT64_LIT(0x0000002100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_repopt1830	= { FOLLOW_COMMA_in_repopt1830_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_repopt1840  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_repopt1840_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_repopt1840	= { FOLLOW_NUMBER_in_repopt1840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRACE_in_repopt1910  */
static	ANTLR3_BITWORD FOLLOW_RBRACE_in_repopt1910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRACE_in_repopt1910	= { FOLLOW_RBRACE_in_repopt1910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSTRUCT_in_synpred1_cqp766  */
static	ANTLR3_BITWORD FOLLOW_LSTRUCT_in_synpred1_cqp766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LSTRUCT_in_synpred1_cqp766	= { FOLLOW_LSTRUCT_in_synpred1_cqp766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_structure_in_synpred1_cqp769  */
static	ANTLR3_BITWORD FOLLOW_structure_in_synpred1_cqp769_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_structure_in_synpred1_cqp769	= { FOLLOW_structure_in_synpred1_cqp769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSTRUCT_in_synpred1_cqp771  */
static	ANTLR3_BITWORD FOLLOW_RSTRUCT_in_synpred1_cqp771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RSTRUCT_in_synpred1_cqp771	= { FOLLOW_RSTRUCT_in_synpred1_cqp771_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start query
 * cqp.g:133:1: query : ( sequence -> sequence ) ( BINAND globpart -> ^( BINAND $query globpart ) )? ( ( NOT )? (kw= KW_WITHIN |kw= KW_CONTAINING ) wc= within_containing_part -> ^( $kw ( NOT )? $query $wc) )* SEMI ;
 */
static cqpParser_query_return
query(pcqpParser ctx)
{
    cqpParser_query_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    kw;
    pANTLR3_COMMON_TOKEN    BINAND2;
    pANTLR3_COMMON_TOKEN    NOT4;
    pANTLR3_COMMON_TOKEN    SEMI5;
    cqpParser_within_containing_part_return wc;
    #undef	RETURN_TYPE_wc
    #define	RETURN_TYPE_wc cqpParser_within_containing_part_return

    cqpParser_sequence_return sequence1;
    #undef	RETURN_TYPE_sequence1
    #define	RETURN_TYPE_sequence1 cqpParser_sequence_return

    cqpParser_globpart_return globpart3;
    #undef	RETURN_TYPE_globpart3
    #define	RETURN_TYPE_globpart3 cqpParser_globpart_return

    pANTLR3_BASE_TREE kw_tree;
    pANTLR3_BASE_TREE BINAND2_tree;
    pANTLR3_BASE_TREE NOT4_tree;
    pANTLR3_BASE_TREE SEMI5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BINAND;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WITHIN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMI;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CONTAINING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sequence;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_globpart;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_within_containing_part;
    /* Initialize rule variables
     */

    root_0 = NULL;

    kw       = NULL;
    BINAND2       = NULL;
    NOT4       = NULL;
    SEMI5       = NULL;
    wc.tree = NULL;

    sequence1.tree = NULL;

    globpart3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    kw_tree   = NULL;
    BINAND2_tree   = NULL;
    NOT4_tree   = NULL;
    SEMI5_tree   = NULL;

    stream_BINAND   = NULL;
    #define CREATE_stream_BINAND  if (stream_BINAND == NULL) {stream_BINAND = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BINAND"); } 
    stream_KW_WITHIN   = NULL;
    #define CREATE_stream_KW_WITHIN  if (stream_KW_WITHIN == NULL) {stream_KW_WITHIN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WITHIN"); } 
    stream_NOT   = NULL;
    #define CREATE_stream_NOT  if (stream_NOT == NULL) {stream_NOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NOT"); } 
    stream_SEMI   = NULL;
    #define CREATE_stream_SEMI  if (stream_SEMI == NULL) {stream_SEMI = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMI"); } 
    stream_KW_CONTAINING   = NULL;
    #define CREATE_stream_KW_CONTAINING  if (stream_KW_CONTAINING == NULL) {stream_KW_CONTAINING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CONTAINING"); } 
    stream_sequence   = NULL;
    #define CREATE_stream_sequence  if (stream_sequence == NULL) {stream_sequence = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sequence"); }
    stream_globpart   = NULL;
    #define CREATE_stream_globpart  if (stream_globpart == NULL) {stream_globpart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule globpart"); }
    stream_within_containing_part   = NULL;
    #define CREATE_stream_within_containing_part  if (stream_within_containing_part == NULL) {stream_within_containing_part = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule within_containing_part"); }

    retval.tree  = NULL;

    {
        // cqp.g:134:2: ( ( sequence -> sequence ) ( BINAND globpart -> ^( BINAND $query globpart ) )? ( ( NOT )? (kw= KW_WITHIN |kw= KW_CONTAINING ) wc= within_containing_part -> ^( $kw ( NOT )? $query $wc) )* SEMI )
        // cqp.g:136:5: ( sequence -> sequence ) ( BINAND globpart -> ^( BINAND $query globpart ) )? ( ( NOT )? (kw= KW_WITHIN |kw= KW_CONTAINING ) wc= within_containing_part -> ^( $kw ( NOT )? $query $wc) )* SEMI
        {
            // cqp.g:136:5: ( sequence -> sequence )
            // cqp.g:136:6: sequence
            {
                FOLLOWPUSH(FOLLOW_sequence_in_query548);
                sequence1=sequence(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulequeryEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }

                if ( BACKTRACKING==0 ) { CREATE_stream_sequence; stream_sequence->add(stream_sequence, sequence1.tree, NULL); }

                /* AST REWRITE
                 * elements          : sequence
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 

                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 136:15: -> sequence
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sequence == NULL ? NULL : stream_sequence->nextTree(stream_sequence));

                	}


                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // cqp.g:138:5: ( BINAND globpart -> ^( BINAND $query globpart ) )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case BINAND:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // cqp.g:138:6: BINAND globpart
            	    {
            	        BINAND2 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_query565);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( BACKTRACKING==0 ) { CREATE_stream_BINAND; stream_BINAND->add(stream_BINAND, BINAND2, NULL); }


            	        FOLLOWPUSH(FOLLOW_globpart_in_query567);
            	        globpart3=globpart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_globpart; stream_globpart->add(stream_globpart, globpart3.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : query, globpart, BINAND
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 138:22: -> ^( BINAND $query globpart )
            	        	{
            	        	    // cqp.g:138:25: ^( BINAND $query globpart )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        stream_BINAND == NULL ? NULL : stream_BINAND->nextNode(stream_BINAND)
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_globpart == NULL ? NULL : stream_globpart->nextTree(stream_globpart));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

            // cqp.g:140:5: ( ( NOT )? (kw= KW_WITHIN |kw= KW_CONTAINING ) wc= within_containing_part -> ^( $kw ( NOT )? $query $wc) )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) )
                {
                case KW_CONTAINING:
                case KW_WITHIN:
                case NOT:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // cqp.g:140:6: ( NOT )? (kw= KW_WITHIN |kw= KW_CONTAINING ) wc= within_containing_part
            	    {
            	        // cqp.g:140:6: ( NOT )?
            	        {
            	            int alt2=2;
            	            switch ( LA(1) )
            	            {
            	                case NOT:
            	                	{
            	                		alt2=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt2)
            	            {
            	        	case 1:
            	        	    // cqp.g:140:6: NOT
            	        	    {
            	        	        NOT4 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_query592);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequeryEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NOT; stream_NOT->add(stream_NOT, NOT4, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // cqp.g:140:11: (kw= KW_WITHIN |kw= KW_CONTAINING )
            	        {
            	            int alt3=2;
            	            switch ( LA(1) )
            	            {
            	            case KW_WITHIN:
            	            	{
            	            		alt3=1;
            	            	}
            	                break;
            	            case KW_CONTAINING:
            	            	{
            	            		alt3=2;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE;
            	                    return retval;
            	                }

            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 3;
            	                EXCEPTION->state        = 0;


            	                goto rulequeryEx;

            	            }

            	            switch (alt3)
            	            {
            	        	case 1:
            	        	    // cqp.g:140:12: kw= KW_WITHIN
            	        	    {
            	        	        kw = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITHIN, &FOLLOW_KW_WITHIN_in_query598);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequeryEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITHIN; stream_KW_WITHIN->add(stream_KW_WITHIN, kw, NULL); }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // cqp.g:140:25: kw= KW_CONTAINING
            	        	    {
            	        	        kw = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CONTAINING, &FOLLOW_KW_CONTAINING_in_query602);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulequeryEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_CONTAINING; stream_KW_CONTAINING->add(stream_KW_CONTAINING, kw, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_within_containing_part_in_query607);
            	        wc=within_containing_part(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) { CREATE_stream_within_containing_part; stream_within_containing_part->add(stream_within_containing_part, wc.tree, NULL); }

            	        /* AST REWRITE
            	         * elements          : wc, query, kw, NOT
            	         * token labels      : kw
            	         * rule labels       : retval, wc
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 

            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_kw;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_wc;

            	        	stream_kw=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token kw", kw);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_wc=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token wc", wc.tree != NULL ? wc.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 140:69: -> ^( $kw ( NOT )? $query $wc)
            	        	{
            	        	    // cqp.g:140:72: ^( $kw ( NOT )? $query $wc)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRootToken(ADAPTOR, stream_kw == NULL ? NULL : stream_kw->nextToken(stream_kw), root_1));

            	        	        // cqp.g:140:78: ( NOT )?
            	        	        {
            	        	        	if ( (stream_NOT != NULL && stream_NOT->hasNext(stream_NOT))  )
            	        	        	{
            	        	        		ADAPTOR->addChild(ADAPTOR, root_1, 
            	        	        		stream_NOT == NULL ? NULL : stream_NOT->nextNode(stream_NOT)
            	        	        		);

            	        	        	}
            	        	        	if ( stream_NOT != NULL) stream_NOT->reset(stream_NOT);

            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_wc == NULL ? NULL : stream_wc->nextTree(stream_wc));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}


            	        	retval.tree = root_0; // set result root
            	        	if (stream_kw != NULL) stream_kw->free(stream_kw); 
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_wc != NULL) stream_wc->free(stream_wc);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


            SEMI5 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI, &FOLLOW_SEMI_in_query636);
            if  (HASEXCEPTION())
            {
                goto rulequeryEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_SEMI; stream_SEMI->add(stream_SEMI, SEMI5, NULL); }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulequeryEx; /* Prevent compiler warnings */
    rulequeryEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BINAND != NULL) stream_BINAND->free(stream_BINAND);
        if (stream_KW_WITHIN != NULL) stream_KW_WITHIN->free(stream_KW_WITHIN);
        if (stream_NOT != NULL) stream_NOT->free(stream_NOT);
        if (stream_SEMI != NULL) stream_SEMI->free(stream_SEMI);
        if (stream_KW_CONTAINING != NULL) stream_KW_CONTAINING->free(stream_KW_CONTAINING);
        if (stream_sequence != NULL) stream_sequence->free(stream_sequence);
        if (stream_globpart != NULL) stream_globpart->free(stream_globpart);
        if (stream_within_containing_part != NULL) stream_within_containing_part->free(stream_within_containing_part);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end query */

/**
 * $ANTLR start globpart
 * cqp.g:145:1: globpart : globcond ( BINAND ! globcond )* ;
 */
static cqpParser_globpart_return
globpart(pcqpParser ctx)
{
    cqpParser_globpart_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINAND7;
    cqpParser_globcond_return globcond6;
    #undef	RETURN_TYPE_globcond6
    #define	RETURN_TYPE_globcond6 cqpParser_globcond_return

    cqpParser_globcond_return globcond8;
    #undef	RETURN_TYPE_globcond8
    #define	RETURN_TYPE_globcond8 cqpParser_globcond_return

    pANTLR3_BASE_TREE BINAND7_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    BINAND7       = NULL;
    globcond6.tree = NULL;

    globcond8.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    BINAND7_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:146:5: ( globcond ( BINAND ! globcond )* )
        // cqp.g:146:7: globcond ( BINAND ! globcond )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_globcond_in_globpart653);
            globcond6=globcond(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleglobpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, globcond6.tree);

            // cqp.g:146:16: ( BINAND ! globcond )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case BINAND:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // cqp.g:146:17: BINAND ! globcond
            	    {
            	        BINAND7 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_globpart656);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglobpartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        FOLLOWPUSH(FOLLOW_globcond_in_globpart659);
            	        globcond8=globcond(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglobpartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, globcond8.tree);

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleglobpartEx; /* Prevent compiler warnings */
    ruleglobpartEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end globpart */

/**
 * $ANTLR start globcond
 * cqp.g:149:1: globcond : ( NUMBER DOT ^ ATTR ( NOT )? EQ NUMBER DOT ! ATTR | KW_FREQ ^ LPAREN ! NUMBER DOT ! ATTR RPAREN ! ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER );
 */
static cqpParser_globcond_return
globcond(pcqpParser ctx)
{
    cqpParser_globcond_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NUMBER9;
    pANTLR3_COMMON_TOKEN    DOT10;
    pANTLR3_COMMON_TOKEN    ATTR11;
    pANTLR3_COMMON_TOKEN    NOT12;
    pANTLR3_COMMON_TOKEN    EQ13;
    pANTLR3_COMMON_TOKEN    NUMBER14;
    pANTLR3_COMMON_TOKEN    DOT15;
    pANTLR3_COMMON_TOKEN    ATTR16;
    pANTLR3_COMMON_TOKEN    KW_FREQ17;
    pANTLR3_COMMON_TOKEN    LPAREN18;
    pANTLR3_COMMON_TOKEN    NUMBER19;
    pANTLR3_COMMON_TOKEN    DOT20;
    pANTLR3_COMMON_TOKEN    ATTR21;
    pANTLR3_COMMON_TOKEN    RPAREN22;
    pANTLR3_COMMON_TOKEN    NOT23;
    pANTLR3_COMMON_TOKEN    set24;
    pANTLR3_COMMON_TOKEN    NUMBER25;

    pANTLR3_BASE_TREE NUMBER9_tree;
    pANTLR3_BASE_TREE DOT10_tree;
    pANTLR3_BASE_TREE ATTR11_tree;
    pANTLR3_BASE_TREE NOT12_tree;
    pANTLR3_BASE_TREE EQ13_tree;
    pANTLR3_BASE_TREE NUMBER14_tree;
    pANTLR3_BASE_TREE DOT15_tree;
    pANTLR3_BASE_TREE ATTR16_tree;
    pANTLR3_BASE_TREE KW_FREQ17_tree;
    pANTLR3_BASE_TREE LPAREN18_tree;
    pANTLR3_BASE_TREE NUMBER19_tree;
    pANTLR3_BASE_TREE DOT20_tree;
    pANTLR3_BASE_TREE ATTR21_tree;
    pANTLR3_BASE_TREE RPAREN22_tree;
    pANTLR3_BASE_TREE NOT23_tree;
    pANTLR3_BASE_TREE set24_tree;
    pANTLR3_BASE_TREE NUMBER25_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    NUMBER9       = NULL;
    DOT10       = NULL;
    ATTR11       = NULL;
    NOT12       = NULL;
    EQ13       = NULL;
    NUMBER14       = NULL;
    DOT15       = NULL;
    ATTR16       = NULL;
    KW_FREQ17       = NULL;
    LPAREN18       = NULL;
    NUMBER19       = NULL;
    DOT20       = NULL;
    ATTR21       = NULL;
    RPAREN22       = NULL;
    NOT23       = NULL;
    set24       = NULL;
    NUMBER25       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    NUMBER9_tree   = NULL;
    DOT10_tree   = NULL;
    ATTR11_tree   = NULL;
    NOT12_tree   = NULL;
    EQ13_tree   = NULL;
    NUMBER14_tree   = NULL;
    DOT15_tree   = NULL;
    ATTR16_tree   = NULL;
    KW_FREQ17_tree   = NULL;
    LPAREN18_tree   = NULL;
    NUMBER19_tree   = NULL;
    DOT20_tree   = NULL;
    ATTR21_tree   = NULL;
    RPAREN22_tree   = NULL;
    NOT23_tree   = NULL;
    set24_tree   = NULL;
    NUMBER25_tree   = NULL;


    retval.tree  = NULL;

    {
        {
            //  cqp.g:150:5: ( NUMBER DOT ^ ATTR ( NOT )? EQ NUMBER DOT ! ATTR | KW_FREQ ^ LPAREN ! NUMBER DOT ! ATTR RPAREN ! ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER )

            ANTLR3_UINT32 alt8;

            alt8=2;

            switch ( LA(1) )
            {
            case NUMBER:
            	{
            		alt8=1;
            	}
                break;
            case KW_FREQ:
            	{
            		alt8=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 8;
                EXCEPTION->state        = 0;


                goto ruleglobcondEx;

            }

            switch (alt8)
            {
        	case 1:
        	    // cqp.g:150:7: NUMBER DOT ^ ATTR ( NOT )? EQ NUMBER DOT ! ATTR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        NUMBER9 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond678);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER9_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER9));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER9_tree);
        	        }

        	        DOT10 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond680);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        DOT10_tree = 
        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, DOT10))
        	        ;
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, DOT10_tree, root_0));
        	        }

        	        ATTR11 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond683);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        ATTR11_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR11));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR11_tree);
        	        }

        	        // cqp.g:150:24: ( NOT )?
        	        {
        	            int alt6=2;
        	            switch ( LA(1) )
        	            {
        	                case NOT:
        	                	{
        	                		alt6=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt6)
        	            {
        	        	case 1:
        	        	    // cqp.g:150:24: NOT
        	        	    {
        	        	        NOT12 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_globcond685);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleglobcondEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT12_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT12));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT12_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        EQ13 = (pANTLR3_COMMON_TOKEN) MATCHT(EQ, &FOLLOW_EQ_in_globcond688);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        EQ13_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EQ13));
        	        ADAPTOR->addChild(ADAPTOR, root_0, EQ13_tree);
        	        }

        	        NUMBER14 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond690);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER14_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER14));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER14_tree);
        	        }

        	        DOT15 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond692);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        ATTR16 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond695);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        ATTR16_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR16));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR16_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:151:7: KW_FREQ ^ LPAREN ! NUMBER DOT ! ATTR RPAREN ! ( NOT )? ( EQ | LEQ | GEQ | LSTRUCT | RSTRUCT ) NUMBER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        KW_FREQ17 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_FREQ, &FOLLOW_KW_FREQ_in_globcond703);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        KW_FREQ17_tree = 
        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_FREQ17))
        	        ;
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_FREQ17_tree, root_0));
        	        }

        	        LPAREN18 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_globcond706);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        NUMBER19 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond709);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER19));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER19_tree);
        	        }

        	        DOT20 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_globcond711);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        ATTR21 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_globcond714);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        ATTR21_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR21));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR21_tree);
        	        }

        	        RPAREN22 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_globcond716);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        // cqp.g:151:49: ( NOT )?
        	        {
        	            int alt7=2;
        	            switch ( LA(1) )
        	            {
        	                case NOT:
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // cqp.g:151:49: NOT
        	        	    {
        	        	        NOT23 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_globcond719);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleglobcondEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT23_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT23));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT23_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        set24=(pANTLR3_COMMON_TOKEN)LT(1);

        	        if ( ((LA(1) >= EQ) && (LA(1) <= GEQ)) || LA(1) == LEQ || LA(1) == LSTRUCT || LA(1) == RSTRUCT )
        	        {
        	            CONSUME();
        	            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, 
        	            (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set24))
        	            );
        	            PERRORRECOVERY=ANTLR3_FALSE;
        	            FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE;
        	                return retval;
        	            }

        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = NULL;

        	            goto ruleglobcondEx;
        	        }


        	        NUMBER25 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_globcond734);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleglobcondEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER25_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER25));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER25_tree);
        	        }

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleglobcondEx; /* Prevent compiler warnings */
    ruleglobcondEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end globcond */

/**
 * $ANTLR start within_containing_part
 * cqp.g:154:1: within_containing_part : ( NOT )? ( ( LSTRUCT ! structure RSTRUCT !)=> LSTRUCT ! structure RSTRUCT !| sequence | within_number | alignedpart ) ;
 */
static cqpParser_within_containing_part_return
within_containing_part(pcqpParser ctx)
{
    cqpParser_within_containing_part_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NOT26;
    pANTLR3_COMMON_TOKEN    LSTRUCT27;
    pANTLR3_COMMON_TOKEN    RSTRUCT29;
    cqpParser_structure_return structure28;
    #undef	RETURN_TYPE_structure28
    #define	RETURN_TYPE_structure28 cqpParser_structure_return

    cqpParser_sequence_return sequence30;
    #undef	RETURN_TYPE_sequence30
    #define	RETURN_TYPE_sequence30 cqpParser_sequence_return

    cqpParser_within_number_return within_number31;
    #undef	RETURN_TYPE_within_number31
    #define	RETURN_TYPE_within_number31 cqpParser_within_number_return

    cqpParser_alignedpart_return alignedpart32;
    #undef	RETURN_TYPE_alignedpart32
    #define	RETURN_TYPE_alignedpart32 cqpParser_alignedpart_return

    pANTLR3_BASE_TREE NOT26_tree;
    pANTLR3_BASE_TREE LSTRUCT27_tree;
    pANTLR3_BASE_TREE RSTRUCT29_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    NOT26       = NULL;
    LSTRUCT27       = NULL;
    RSTRUCT29       = NULL;
    structure28.tree = NULL;

    sequence30.tree = NULL;

    within_number31.tree = NULL;

    alignedpart32.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    NOT26_tree   = NULL;
    LSTRUCT27_tree   = NULL;
    RSTRUCT29_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:155:2: ( ( NOT )? ( ( LSTRUCT ! structure RSTRUCT !)=> LSTRUCT ! structure RSTRUCT !| sequence | within_number | alignedpart ) )
        // cqp.g:155:4: ( NOT )? ( ( LSTRUCT ! structure RSTRUCT !)=> LSTRUCT ! structure RSTRUCT !| sequence | within_number | alignedpart )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // cqp.g:155:4: ( NOT )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case NOT:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // cqp.g:155:5: NOT
            	    {
            	        NOT26 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_within_containing_part751);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) {
            	        NOT26_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT26));
            	        ADAPTOR->addChild(ADAPTOR, root_0, NOT26_tree);
            	        }

            	    }
            	    break;

                }
            }

            // cqp.g:156:9: ( ( LSTRUCT ! structure RSTRUCT !)=> LSTRUCT ! structure RSTRUCT !| sequence | within_number | alignedpart )
            {
                int alt10=4;
                switch ( LA(1) )
                {
                case LSTRUCT:
                	{
                		switch ( LA(2) )
                		{
                		case ATTR:
                			{
                				{
                				    int LA10_9 = LA(3);
                				    if ( (synpred1_cqp(ctx)))
                				    {
                				        alt10=1;
                				    }
                				    else if ( (ANTLR3_TRUE))
                				    {
                				        alt10=2;
                				    }
                				    else
                				    {
                				        if (BACKTRACKING>0)
                				        {
                				            FAILEDFLAG = ANTLR3_TRUE;
                				            return retval;
                				        }


                				        CONSTRUCTEX();
                				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                				        EXCEPTION->message      = (void *)"";
                				        EXCEPTION->decisionNum  = 10;
                				        EXCEPTION->state        = 9;


                				        goto rulewithin_containing_partEx;

                				    }
                				}
                			}
                		    break;
                		case SLASH:
                			{
                				alt10=2;
                			}
                		    break;

                		default:
                		    if (BACKTRACKING>0)
                		    {
                		        FAILEDFLAG = ANTLR3_TRUE;
                		        return retval;
                		    }

                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 10;
                		    EXCEPTION->state        = 1;


                		    goto rulewithin_containing_partEx;

                		}

                	}
                    break;
                case KW_MU:
                case LBRACKET:
                case LPAREN:
                case REGEXP:
                case TEQ:
                	{
                		alt10=2;
                	}
                    break;
                case NUMBER:
                	{
                		switch ( LA(2) )
                		{
                		case COLON:
                			{
                				alt10=2;
                			}
                		    break;
                		case KW_CONTAINING:
                		case KW_WITHIN:
                		case NOT:
                		case RPAREN:
                		case SEMI:
                			{
                				alt10=3;
                			}
                		    break;

                		default:
                		    if (BACKTRACKING>0)
                		    {
                		        FAILEDFLAG = ANTLR3_TRUE;
                		        return retval;
                		    }

                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 10;
                		    EXCEPTION->state        = 7;


                		    goto rulewithin_containing_partEx;

                		}

                	}
                    break;
                case ATTR:
                	{
                		alt10=4;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto rulewithin_containing_partEx;

                }

                switch (alt10)
                {
            	case 1:
            	    // cqp.g:156:11: ( LSTRUCT ! structure RSTRUCT !)=> LSTRUCT ! structure RSTRUCT !
            	    {
            	        if ( BACKTRACKING==0 )
            	        {
            	            throw EvalQueryException (": Deprecated query syntax: use <str/> instead of <str> for matching the content of a structure. <str> will match only the beginning.");
            	        }


            	        LSTRUCT27 = (pANTLR3_COMMON_TOKEN) MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_within_containing_part779);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	        FOLLOWPUSH(FOLLOW_structure_in_within_containing_part782);
            	        structure28=structure(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, structure28.tree);

            	        RSTRUCT29 = (pANTLR3_COMMON_TOKEN) MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_within_containing_part784);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;
            	case 2:
            	    // cqp.g:157:11: sequence
            	    {
            	        FOLLOWPUSH(FOLLOW_sequence_in_within_containing_part798);
            	        sequence30=sequence(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sequence30.tree);

            	    }
            	    break;
            	case 3:
            	    // cqp.g:158:11: within_number
            	    {
            	        FOLLOWPUSH(FOLLOW_within_number_in_within_containing_part810);
            	        within_number31=within_number(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, within_number31.tree);

            	    }
            	    break;
            	case 4:
            	    // cqp.g:159:11: alignedpart
            	    {
            	        FOLLOWPUSH(FOLLOW_alignedpart_in_within_containing_part822);
            	        alignedpart32=alignedpart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithin_containing_partEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, alignedpart32.tree);

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulewithin_containing_partEx; /* Prevent compiler warnings */
    rulewithin_containing_partEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end within_containing_part */

/**
 * $ANTLR start within_number
 * cqp.g:163:1: within_number : n= NUMBER -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) ) ;
 */
static cqpParser_within_number_return
within_number(pcqpParser ctx)
{
    cqpParser_within_number_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;

    /* Initialize rule variables
     */

    root_0 = NULL;

    n       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    n_tree   = NULL;

    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 

    retval.tree  = NULL;

    {
        // cqp.g:164:2: (n= NUMBER -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) ) )
        // cqp.g:164:4: n= NUMBER
        {
            n = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_within_number853);
            if  (HASEXCEPTION())
            {
                goto rulewithin_numberEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
             
            if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n, NULL); }


            /* AST REWRITE
             * elements          : n, n
             * token labels      : n
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 164:13: -> ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) )
            	{
            	    // cqp.g:164:16: ^( SEQ ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEQ, (pANTLR3_UINT8)"SEQ")
            	        , root_1));

            	        // cqp.g:164:22: ^( REPOPT[\"REp\"] ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ^( REPOPT[\"RO\"] $n $n) )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

            	            #if 1 == 2
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("REp"))
            	            #else
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"REp")
            	            #endif

            	            , root_2));

            	            // cqp.g:164:38: ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
            	            {
            	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

            	                #if 1 == 2
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
            	                #else
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
            	                #endif

            	                , root_3));

            	                // cqp.g:164:54: ^( ANYPOS[\"[]\"] )
            	                {
            	                    pANTLR3_BASE_TREE root_4 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                    root_4 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

            	                    #if 1 == 2
            	                    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ANYPOS, TOKTEXT("[]"))
            	                    #else
            	                    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ANYPOS, (pANTLR3_UINT8)"[]")
            	                    #endif

            	                    , root_4));

            	                    ADAPTOR->addChild(ADAPTOR, root_3, root_4);
            	                }

            	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
            	            }

            	            // cqp.g:164:71: ^( REPOPT[\"RO\"] $n $n)
            	            {
            	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

            	                #if 1 == 2
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
            	                #else
            	                	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
            	                #endif

            	                , root_3));

            	                ADAPTOR->addChild(ADAPTOR, root_3, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));

            	                ADAPTOR->addChild(ADAPTOR, root_3, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));

            	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_n != NULL) stream_n->free(stream_n); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulewithin_numberEx; /* Prevent compiler warnings */
    rulewithin_numberEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end within_number */

/**
 * $ANTLR start structure
 * cqp.g:167:1: structure : ATTR ( attvallist )? ;
 */
static cqpParser_structure_return
structure(pcqpParser ctx)
{
    cqpParser_structure_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ATTR33;
    cqpParser_attvallist_return attvallist34;
    #undef	RETURN_TYPE_attvallist34
    #define	RETURN_TYPE_attvallist34 cqpParser_attvallist_return

    pANTLR3_BASE_TREE ATTR33_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    ATTR33       = NULL;
    attvallist34.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    ATTR33_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:168:2: ( ATTR ( attvallist )? )
        // cqp.g:168:4: ATTR ( attvallist )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            ATTR33 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_structure898);
            if  (HASEXCEPTION())
            {
                goto rulestructureEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            ATTR33_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR33));
            ADAPTOR->addChild(ADAPTOR, root_0, ATTR33_tree);
            }

            // cqp.g:168:9: ( attvallist )?
            {
                int alt11=2;
                switch ( LA(1) )
                {
                    case ATTR:
                    case KW_CCOLL:
                    case KW_SWAP:
                    case KW_WS:
                    case LPAREN:
                    case NOT:
                    case POSNUM:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // cqp.g:168:9: attvallist
            	    {
            	        FOLLOWPUSH(FOLLOW_attvallist_in_structure900);
            	        attvallist34=attvallist(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestructureEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist34.tree);

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulestructureEx; /* Prevent compiler warnings */
    rulestructureEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end structure */

/**
 * $ANTLR start oneposonly
 * cqp.g:171:1: oneposonly : attvallist SEMI !;
 */
static cqpParser_oneposonly_return
oneposonly(pcqpParser ctx)
{
    cqpParser_oneposonly_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMI36;
    cqpParser_attvallist_return attvallist35;
    #undef	RETURN_TYPE_attvallist35
    #define	RETURN_TYPE_attvallist35 cqpParser_attvallist_return

    pANTLR3_BASE_TREE SEMI36_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    SEMI36       = NULL;
    attvallist35.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SEMI36_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:172:5: ( attvallist SEMI !)
        // cqp.g:172:7: attvallist SEMI !
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_attvallist_in_oneposonly915);
            attvallist35=attvallist(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleoneposonlyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist35.tree);

            SEMI36 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI, &FOLLOW_SEMI_in_oneposonly917);
            if  (HASEXCEPTION())
            {
                goto ruleoneposonlyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoneposonlyEx; /* Prevent compiler warnings */
    ruleoneposonlyEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end oneposonly */

/**
 * $ANTLR start alignedpart
 * cqp.g:175:1: alignedpart : ATTR COLON ^ sequence ;
 */
static cqpParser_alignedpart_return
alignedpart(pcqpParser ctx)
{
    cqpParser_alignedpart_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ATTR37;
    pANTLR3_COMMON_TOKEN    COLON38;
    cqpParser_sequence_return sequence39;
    #undef	RETURN_TYPE_sequence39
    #define	RETURN_TYPE_sequence39 cqpParser_sequence_return

    pANTLR3_BASE_TREE ATTR37_tree;
    pANTLR3_BASE_TREE COLON38_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    ATTR37       = NULL;
    COLON38       = NULL;
    sequence39.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    ATTR37_tree   = NULL;
    COLON38_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:176:5: ( ATTR COLON ^ sequence )
        // cqp.g:176:7: ATTR COLON ^ sequence
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            ATTR37 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_alignedpart936);
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            ATTR37_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR37));
            ADAPTOR->addChild(ADAPTOR, root_0, ATTR37_tree);
            }

            COLON38 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_alignedpart938);
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            COLON38_tree = 
            (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, COLON38))
            ;
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, COLON38_tree, root_0));
            }

            FOLLOWPUSH(FOLLOW_sequence_in_alignedpart942);
            sequence39=sequence(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulealignedpartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, sequence39.tree);

        }

    }

    // This is where rules clean up and exit
    //
    goto rulealignedpartEx; /* Prevent compiler warnings */
    rulealignedpartEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end alignedpart */

/**
 * $ANTLR start mupart
 * cqp.g:179:1: mupart : LPAREN ! ( unionop | meetop ) RPAREN !;
 */
static cqpParser_mupart_return
mupart(pcqpParser ctx)
{
    cqpParser_mupart_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN40;
    pANTLR3_COMMON_TOKEN    RPAREN43;
    cqpParser_unionop_return unionop41;
    #undef	RETURN_TYPE_unionop41
    #define	RETURN_TYPE_unionop41 cqpParser_unionop_return

    cqpParser_meetop_return meetop42;
    #undef	RETURN_TYPE_meetop42
    #define	RETURN_TYPE_meetop42 cqpParser_meetop_return

    pANTLR3_BASE_TREE LPAREN40_tree;
    pANTLR3_BASE_TREE RPAREN43_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    LPAREN40       = NULL;
    RPAREN43       = NULL;
    unionop41.tree = NULL;

    meetop42.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LPAREN40_tree   = NULL;
    RPAREN43_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:180:2: ( LPAREN ! ( unionop | meetop ) RPAREN !)
        // cqp.g:180:4: LPAREN ! ( unionop | meetop ) RPAREN !
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            LPAREN40 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_mupart959);
            if  (HASEXCEPTION())
            {
                goto rulemupartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }


            // cqp.g:180:12: ( unionop | meetop )
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case KW_UNION:
                	{
                		alt12=1;
                	}
                    break;
                case KW_MEET:
                	{
                		alt12=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 12;
                    EXCEPTION->state        = 0;


                    goto rulemupartEx;

                }

                switch (alt12)
                {
            	case 1:
            	    // cqp.g:180:13: unionop
            	    {
            	        FOLLOWPUSH(FOLLOW_unionop_in_mupart963);
            	        unionop41=unionop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemupartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unionop41.tree);

            	    }
            	    break;
            	case 2:
            	    // cqp.g:180:23: meetop
            	    {
            	        FOLLOWPUSH(FOLLOW_meetop_in_mupart967);
            	        meetop42=meetop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemupartEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, meetop42.tree);

            	    }
            	    break;

                }
            }

            RPAREN43 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_mupart970);
            if  (HASEXCEPTION())
            {
                goto rulemupartEx;
            }
            if (HASFAILED())
            {
                return retval;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulemupartEx; /* Prevent compiler warnings */
    rulemupartEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end mupart */

/**
 * $ANTLR start integer
 * cqp.g:183:1: integer : ( NUMBER |n= NNUMBER -> ^( NUMBER[$n.text->chars] ) );
 */
static cqpParser_integer_return
integer(pcqpParser ctx)
{
    cqpParser_integer_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    NUMBER44;

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE NUMBER44_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NNUMBER;

    /* Initialize rule variables
     */

    root_0 = NULL;

    n       = NULL;
    NUMBER44       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    n_tree   = NULL;
    NUMBER44_tree   = NULL;

    stream_NNUMBER   = NULL;
    #define CREATE_stream_NNUMBER  if (stream_NNUMBER == NULL) {stream_NNUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NNUMBER"); } 

    retval.tree  = NULL;

    {
        {
            //  cqp.g:184:2: ( NUMBER |n= NNUMBER -> ^( NUMBER[$n.text->chars] ) )

            ANTLR3_UINT32 alt13;

            alt13=2;

            switch ( LA(1) )
            {
            case NUMBER:
            	{
            		alt13=1;
            	}
                break;
            case NNUMBER:
            	{
            		alt13=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruleintegerEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // cqp.g:184:4: NUMBER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        NUMBER44 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer982);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintegerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER44_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER44));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER44_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:185:4: n= NNUMBER
        	    {
        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NNUMBER, &FOLLOW_NNUMBER_in_integer989);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintegerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NNUMBER; stream_NNUMBER->add(stream_NNUMBER, n, NULL); }


        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 185:14: -> ^( NUMBER[$n.text->chars] )
        	        	{
        	        	    // cqp.g:185:17: ^( NUMBER[$n.text->chars] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT((n->getText(n))->chars))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)(n->getText(n))->chars)
        	        	        #endif

        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleintegerEx; /* Prevent compiler warnings */
    ruleintegerEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NNUMBER != NULL) stream_NNUMBER->free(stream_NNUMBER);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end integer */

/**
 * $ANTLR start meetop
 * cqp.g:188:1: meetop : KW_MEET ^ position position ( integer integer )? ;
 */
static cqpParser_meetop_return
meetop(pcqpParser ctx)
{
    cqpParser_meetop_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_MEET45;
    cqpParser_position_return position46;
    #undef	RETURN_TYPE_position46
    #define	RETURN_TYPE_position46 cqpParser_position_return

    cqpParser_position_return position47;
    #undef	RETURN_TYPE_position47
    #define	RETURN_TYPE_position47 cqpParser_position_return

    cqpParser_integer_return integer48;
    #undef	RETURN_TYPE_integer48
    #define	RETURN_TYPE_integer48 cqpParser_integer_return

    cqpParser_integer_return integer49;
    #undef	RETURN_TYPE_integer49
    #define	RETURN_TYPE_integer49 cqpParser_integer_return

    pANTLR3_BASE_TREE KW_MEET45_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    KW_MEET45       = NULL;
    position46.tree = NULL;

    position47.tree = NULL;

    integer48.tree = NULL;

    integer49.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    KW_MEET45_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:189:2: ( KW_MEET ^ position position ( integer integer )? )
        // cqp.g:189:4: KW_MEET ^ position position ( integer integer )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            KW_MEET45 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_MEET, &FOLLOW_KW_MEET_in_meetop1007);
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            KW_MEET45_tree = 
            (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_MEET45))
            ;
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_MEET45_tree, root_0));
            }

            FOLLOWPUSH(FOLLOW_position_in_meetop1010);
            position46=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position46.tree);

            FOLLOWPUSH(FOLLOW_position_in_meetop1012);
            position47=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemeetopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position47.tree);

            // cqp.g:189:31: ( integer integer )?
            {
                int alt14=2;
                switch ( LA(1) )
                {
                    case NNUMBER:
                    case NUMBER:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    // cqp.g:189:32: integer integer
            	    {
            	        FOLLOWPUSH(FOLLOW_integer_in_meetop1015);
            	        integer48=integer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemeetopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integer48.tree);

            	        FOLLOWPUSH(FOLLOW_integer_in_meetop1017);
            	        integer49=integer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemeetopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integer49.tree);

            	    }
            	    break;

                }
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto rulemeetopEx; /* Prevent compiler warnings */
    rulemeetopEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end meetop */

/**
 * $ANTLR start unionop
 * cqp.g:192:1: unionop : KW_UNION ^ position position ;
 */
static cqpParser_unionop_return
unionop(pcqpParser ctx)
{
    cqpParser_unionop_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_UNION50;
    cqpParser_position_return position51;
    #undef	RETURN_TYPE_position51
    #define	RETURN_TYPE_position51 cqpParser_position_return

    cqpParser_position_return position52;
    #undef	RETURN_TYPE_position52
    #define	RETURN_TYPE_position52 cqpParser_position_return

    pANTLR3_BASE_TREE KW_UNION50_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    KW_UNION50       = NULL;
    position51.tree = NULL;

    position52.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    KW_UNION50_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:193:2: ( KW_UNION ^ position position )
        // cqp.g:193:4: KW_UNION ^ position position
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            KW_UNION50 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_UNION, &FOLLOW_KW_UNION_in_unionop1030);
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) {
            KW_UNION50_tree = 
            (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_UNION50))
            ;
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_UNION50_tree, root_0));
            }

            FOLLOWPUSH(FOLLOW_position_in_unionop1033);
            position51=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position51.tree);

            FOLLOWPUSH(FOLLOW_position_in_unionop1035);
            position52=position(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunionopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position52.tree);

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunionopEx; /* Prevent compiler warnings */
    ruleunionopEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end unionop */

/**
 * $ANTLR start sequence
 * cqp.g:197:1: sequence : seq ( BINOR ^ seq )* ;
 */
static cqpParser_sequence_return
sequence(pcqpParser ctx)
{
    cqpParser_sequence_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINOR54;
    cqpParser_seq_return seq53;
    #undef	RETURN_TYPE_seq53
    #define	RETURN_TYPE_seq53 cqpParser_seq_return

    cqpParser_seq_return seq55;
    #undef	RETURN_TYPE_seq55
    #define	RETURN_TYPE_seq55 cqpParser_seq_return

    pANTLR3_BASE_TREE BINOR54_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    BINOR54       = NULL;
    seq53.tree = NULL;

    seq55.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    BINOR54_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:198:2: ( seq ( BINOR ^ seq )* )
        // cqp.g:198:4: seq ( BINOR ^ seq )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_seq_in_sequence1047);
            seq53=seq(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesequenceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, seq53.tree);

            // cqp.g:198:8: ( BINOR ^ seq )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case BINOR:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // cqp.g:198:9: BINOR ^ seq
            	    {
            	        BINOR54 = (pANTLR3_COMMON_TOKEN) MATCHT(BINOR, &FOLLOW_BINOR_in_sequence1050);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesequenceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) {
            	        BINOR54_tree = 
            	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINOR54))
            	        ;
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINOR54_tree, root_0));
            	        }

            	        FOLLOWPUSH(FOLLOW_seq_in_sequence1053);
            	        seq55=seq(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesequenceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, seq55.tree);

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesequenceEx; /* Prevent compiler warnings */
    rulesequenceEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end sequence */

/**
 * $ANTLR start seq
 * cqp.g:201:1: seq : ( repetition )+ -> ^( SEQ ( repetition )+ ) ;
 */
static cqpParser_seq_return
seq(pcqpParser ctx)
{
    cqpParser_seq_return retval;


    pANTLR3_BASE_TREE root_0;

    cqpParser_repetition_return repetition56;
    #undef	RETURN_TYPE_repetition56
    #define	RETURN_TYPE_repetition56 cqpParser_repetition_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_repetition;
    /* Initialize rule variables
     */

    root_0 = NULL;

    repetition56.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_repetition   = NULL;
    #define CREATE_stream_repetition  if (stream_repetition == NULL) {stream_repetition = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule repetition"); }

    retval.tree  = NULL;

    {
        // cqp.g:202:2: ( ( repetition )+ -> ^( SEQ ( repetition )+ ) )
        // cqp.g:202:4: ( repetition )+
        {
            // cqp.g:202:4: ( repetition )+
            {
                int cnt16=0;

                for (;;)
                {
                    int alt16=2;
            	switch ( LA(1) )
            	{
            	case KW_MU:
            	case LBRACKET:
            	case LPAREN:
            	case LSTRUCT:
            	case NUMBER:
            	case REGEXP:
            	case TEQ:
            		{
            			alt16=1;
            		}
            	    break;

            	}

            	switch (alt16)
            	{
            	    case 1:
            	        // cqp.g:202:4: repetition
            	        {
            	            FOLLOWPUSH(FOLLOW_repetition_in_seq1067);
            	            repetition56=repetition(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleseqEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }

            	            if ( BACKTRACKING==0 ) { CREATE_stream_repetition; stream_repetition->add(stream_repetition, repetition56.tree, NULL); }

            	        }
            	        break;

            	    default:

            		if ( cnt16 >= 1 )
            		{
            		    goto loop16;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleseqEx;
            	}
            	cnt16++;
                }
                loop16: ;	/* Jump to here if this rule does not match */
            }

            /* AST REWRITE
             * elements          : repetition
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 

            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 202:16: -> ^( SEQ ( repetition )+ )
            	{
            	    // cqp.g:202:19: ^( SEQ ( repetition )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEQ, (pANTLR3_UINT8)"SEQ")
            	        , root_1));

            	        if ((stream_repetition == NULL || !stream_repetition->hasNext(stream_repetition))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_repetition->hasNext(stream_repetition))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_repetition == NULL ? NULL : stream_repetition->nextTree(stream_repetition));

            	        	}
            	        	stream_repetition->reset(stream_repetition);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleseqEx; /* Prevent compiler warnings */
    ruleseqEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_repetition != NULL) stream_repetition->free(stream_repetition);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end seq */

/**
 * $ANTLR start repetition
 * cqp.g:205:1: repetition : ( atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery ) | LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT );
 */
static cqpParser_repetition_return
repetition(pcqpParser ctx)
{
    cqpParser_repetition_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LSTRUCT59;
    pANTLR3_COMMON_TOKEN    SLASH61;
    pANTLR3_COMMON_TOKEN    SLASH62;
    pANTLR3_COMMON_TOKEN    RSTRUCT64;
    cqpParser_atomquery_return atomquery57;
    #undef	RETURN_TYPE_atomquery57
    #define	RETURN_TYPE_atomquery57 cqpParser_atomquery_return

    cqpParser_repopt_return repopt58;
    #undef	RETURN_TYPE_repopt58
    #define	RETURN_TYPE_repopt58 cqpParser_repopt_return

    cqpParser_structure_return structure60;
    #undef	RETURN_TYPE_structure60
    #define	RETURN_TYPE_structure60 cqpParser_structure_return

    cqpParser_structure_return structure63;
    #undef	RETURN_TYPE_structure63
    #define	RETURN_TYPE_structure63 cqpParser_structure_return

    pANTLR3_BASE_TREE LSTRUCT59_tree;
    pANTLR3_BASE_TREE SLASH61_tree;
    pANTLR3_BASE_TREE SLASH62_tree;
    pANTLR3_BASE_TREE RSTRUCT64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LSTRUCT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SLASH;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RSTRUCT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_structure;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_repopt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_atomquery;
    /* Initialize rule variables
     */

    root_0 = NULL;

    LSTRUCT59       = NULL;
    SLASH61       = NULL;
    SLASH62       = NULL;
    RSTRUCT64       = NULL;
    atomquery57.tree = NULL;

    repopt58.tree = NULL;

    structure60.tree = NULL;

    structure63.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LSTRUCT59_tree   = NULL;
    SLASH61_tree   = NULL;
    SLASH62_tree   = NULL;
    RSTRUCT64_tree   = NULL;

    stream_LSTRUCT   = NULL;
    #define CREATE_stream_LSTRUCT  if (stream_LSTRUCT == NULL) {stream_LSTRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LSTRUCT"); } 
    stream_SLASH   = NULL;
    #define CREATE_stream_SLASH  if (stream_SLASH == NULL) {stream_SLASH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SLASH"); } 
    stream_RSTRUCT   = NULL;
    #define CREATE_stream_RSTRUCT  if (stream_RSTRUCT == NULL) {stream_RSTRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RSTRUCT"); } 
    stream_structure   = NULL;
    #define CREATE_stream_structure  if (stream_structure == NULL) {stream_structure = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule structure"); }
    stream_repopt   = NULL;
    #define CREATE_stream_repopt  if (stream_repopt == NULL) {stream_repopt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule repopt"); }
    stream_atomquery   = NULL;
    #define CREATE_stream_atomquery  if (stream_atomquery == NULL) {stream_atomquery = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule atomquery"); }

    retval.tree  = NULL;

    {
        {
            //  cqp.g:206:2: ( atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery ) | LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT )

            ANTLR3_UINT32 alt20;

            alt20=2;

            switch ( LA(1) )
            {
            case KW_MU:
            case LBRACKET:
            case LPAREN:
            case NUMBER:
            case REGEXP:
            case TEQ:
            	{
            		alt20=1;
            	}
                break;
            case LSTRUCT:
            	{
            		alt20=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto rulerepetitionEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // cqp.g:206:4: atomquery ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery )
        	    {
        	        FOLLOWPUSH(FOLLOW_atomquery_in_repetition1089);
        	        atomquery57=atomquery(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_atomquery; stream_atomquery->add(stream_atomquery, atomquery57.tree, NULL); }

        	        // cqp.g:206:14: ( repopt -> ^( REPOPT[\"REp\"] atomquery repopt ) | -> atomquery )
        	        {
        	            int alt17=2;
        	            switch ( LA(1) )
        	            {
        	            case LBRACE:
        	            case PLUS:
        	            case QUEST:
        	            case STAR:
        	            	{
        	            		alt17=1;
        	            	}
        	                break;
        	            case BINAND:
        	            case BINOR:
        	            case KW_CONTAINING:
        	            case KW_MU:
        	            case KW_WITHIN:
        	            case LBRACKET:
        	            case LPAREN:
        	            case LSTRUCT:
        	            case NOT:
        	            case NUMBER:
        	            case REGEXP:
        	            case RPAREN:
        	            case SEMI:
        	            case TEQ:
        	            	{
        	            		alt17=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 17;
        	                EXCEPTION->state        = 0;


        	                goto rulerepetitionEx;

        	            }

        	            switch (alt17)
        	            {
        	        	case 1:
        	        	    // cqp.g:207:3: repopt
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_repopt_in_repetition1095);
        	        	        repopt58=repopt(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_repopt; stream_repopt->add(stream_repopt, repopt58.tree, NULL); }

        	        	        /* AST REWRITE
        	        	         * elements          : atomquery, repopt
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 207:11: -> ^( REPOPT[\"REp\"] atomquery repopt )
        	        	        	{
        	        	        	    // cqp.g:207:14: ^( REPOPT[\"REp\"] atomquery repopt )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("REp"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"REp")
        	        	        	        #endif

        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_atomquery == NULL ? NULL : stream_atomquery->nextTree(stream_atomquery));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_repopt == NULL ? NULL : stream_repopt->nextTree(stream_repopt));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:208:7: 
        	        	    {
        	        	        /* AST REWRITE
        	        	         * elements          : atomquery
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 208:7: -> atomquery
        	        	        	{
        	        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_atomquery == NULL ? NULL : stream_atomquery->nextTree(stream_atomquery));

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:210:4: LSTRUCT ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) ) RSTRUCT
        	    {
        	        LSTRUCT59 = (pANTLR3_COMMON_TOKEN) MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_repetition1125);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LSTRUCT; stream_LSTRUCT->add(stream_LSTRUCT, LSTRUCT59, NULL); }


        	        // cqp.g:211:3: ( structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) ) | SLASH structure -> ^( ENDSTRUCT[\"</str>\"] structure ) )
        	        {
        	            int alt19=2;
        	            switch ( LA(1) )
        	            {
        	            case ATTR:
        	            	{
        	            		alt19=1;
        	            	}
        	                break;
        	            case SLASH:
        	            	{
        	            		alt19=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 19;
        	                EXCEPTION->state        = 0;


        	                goto rulerepetitionEx;

        	            }

        	            switch (alt19)
        	            {
        	        	case 1:
        	        	    // cqp.g:211:5: structure ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) )
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_structure_in_repetition1131);
        	        	        structure60=structure(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_structure; stream_structure->add(stream_structure, structure60.tree, NULL); }

        	        	        // cqp.g:212:4: ( SLASH -> ^( WHOLESTRUCT[\"<str/>\"] structure ) | -> ^( BEGSTRUCT[\"<str>\"] structure ) )
        	        	        {
        	        	            int alt18=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	            case SLASH:
        	        	            	{
        	        	            		alt18=1;
        	        	            	}
        	        	                break;
        	        	            case RSTRUCT:
        	        	            	{
        	        	            		alt18=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }

        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 18;
        	        	                EXCEPTION->state        = 0;


        	        	                goto rulerepetitionEx;

        	        	            }

        	        	            switch (alt18)
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:212:6: SLASH
        	        	        	    {
        	        	        	        SLASH61 = (pANTLR3_COMMON_TOKEN) MATCHT(SLASH, &FOLLOW_SLASH_in_repetition1139);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulerepetitionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SLASH; stream_SLASH->add(stream_SLASH, SLASH61, NULL); }


        	        	        	        /* AST REWRITE
        	        	        	         * elements          : structure
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 

        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 212:14: -> ^( WHOLESTRUCT[\"<str/>\"] structure )
        	        	        	        	{
        	        	        	        	    // cqp.g:212:17: ^( WHOLESTRUCT[\"<str/>\"] structure )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WHOLESTRUCT, TOKTEXT("<str/>"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHOLESTRUCT, (pANTLR3_UINT8)"<str/>")
        	        	        	        	        #endif

        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}


        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:213:14: 
        	        	        	    {
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : structure
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 

        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 213:14: -> ^( BEGSTRUCT[\"<str>\"] structure )
        	        	        	        	{
        	        	        	        	    // cqp.g:213:17: ^( BEGSTRUCT[\"<str>\"] structure )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BEGSTRUCT, TOKTEXT("<str>"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BEGSTRUCT, (pANTLR3_UINT8)"<str>")
        	        	        	        	        #endif

        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}


        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:215:5: SLASH structure
        	        	    {
        	        	        SLASH62 = (pANTLR3_COMMON_TOKEN) MATCHT(SLASH, &FOLLOW_SLASH_in_repetition1183);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SLASH; stream_SLASH->add(stream_SLASH, SLASH62, NULL); }


        	        	        FOLLOWPUSH(FOLLOW_structure_in_repetition1185);
        	        	        structure63=structure(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepetitionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_structure; stream_structure->add(stream_structure, structure63.tree, NULL); }

        	        	        /* AST REWRITE
        	        	         * elements          : structure
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 216:14: -> ^( ENDSTRUCT[\"</str>\"] structure )
        	        	        	{
        	        	        	    // cqp.g:216:17: ^( ENDSTRUCT[\"</str>\"] structure )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ENDSTRUCT, TOKTEXT("</str>"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ENDSTRUCT, (pANTLR3_UINT8)"</str>")
        	        	        	        #endif

        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_structure == NULL ? NULL : stream_structure->nextTree(stream_structure));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        RSTRUCT64 = (pANTLR3_COMMON_TOKEN) MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_repetition1216);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepetitionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RSTRUCT; stream_RSTRUCT->add(stream_RSTRUCT, RSTRUCT64, NULL); }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulerepetitionEx; /* Prevent compiler warnings */
    rulerepetitionEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LSTRUCT != NULL) stream_LSTRUCT->free(stream_LSTRUCT);
        if (stream_SLASH != NULL) stream_SLASH->free(stream_SLASH);
        if (stream_RSTRUCT != NULL) stream_RSTRUCT->free(stream_RSTRUCT);
        if (stream_structure != NULL) stream_structure->free(stream_structure);
        if (stream_repopt != NULL) stream_repopt->free(stream_repopt);
        if (stream_atomquery != NULL) stream_atomquery->free(stream_atomquery);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end repetition */

/**
 * $ANTLR start attvallist
 * cqp.g:221:1: attvallist : attvaland ( BINOR ^ attvaland )* ;
 */
static cqpParser_attvallist_return
attvallist(pcqpParser ctx)
{
    cqpParser_attvallist_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINOR66;
    cqpParser_attvaland_return attvaland65;
    #undef	RETURN_TYPE_attvaland65
    #define	RETURN_TYPE_attvaland65 cqpParser_attvaland_return

    cqpParser_attvaland_return attvaland67;
    #undef	RETURN_TYPE_attvaland67
    #define	RETURN_TYPE_attvaland67 cqpParser_attvaland_return

    pANTLR3_BASE_TREE BINOR66_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    BINOR66       = NULL;
    attvaland65.tree = NULL;

    attvaland67.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    BINOR66_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:222:2: ( attvaland ( BINOR ^ attvaland )* )
        // cqp.g:222:4: attvaland ( BINOR ^ attvaland )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_attvaland_in_attvallist1228);
            attvaland65=attvaland(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattvallistEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvaland65.tree);

            // cqp.g:222:14: ( BINOR ^ attvaland )*

            for (;;)
            {
                int alt21=2;
                switch ( LA(1) )
                {
                case BINOR:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    // cqp.g:222:15: BINOR ^ attvaland
            	    {
            	        BINOR66 = (pANTLR3_COMMON_TOKEN) MATCHT(BINOR, &FOLLOW_BINOR_in_attvallist1231);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvallistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) {
            	        BINOR66_tree = 
            	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINOR66))
            	        ;
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINOR66_tree, root_0));
            	        }

            	        FOLLOWPUSH(FOLLOW_attvaland_in_attvallist1234);
            	        attvaland67=attvaland(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvallistEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvaland67.tree);

            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleattvallistEx; /* Prevent compiler warnings */
    ruleattvallistEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end attvallist */

/**
 * $ANTLR start attvaland
 * cqp.g:225:1: attvaland : attval ( BINAND ^ attval )* ;
 */
static cqpParser_attvaland_return
attvaland(pcqpParser ctx)
{
    cqpParser_attvaland_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BINAND69;
    cqpParser_attval_return attval68;
    #undef	RETURN_TYPE_attval68
    #define	RETURN_TYPE_attval68 cqpParser_attval_return

    cqpParser_attval_return attval70;
    #undef	RETURN_TYPE_attval70
    #define	RETURN_TYPE_attval70 cqpParser_attval_return

    pANTLR3_BASE_TREE BINAND69_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    BINAND69       = NULL;
    attval68.tree = NULL;

    attval70.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    BINAND69_tree   = NULL;


    retval.tree  = NULL;

    {
        // cqp.g:226:2: ( attval ( BINAND ^ attval )* )
        // cqp.g:226:4: attval ( BINAND ^ attval )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_attval_in_attvaland1248);
            attval68=attval(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattvalandEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval68.tree);

            // cqp.g:226:11: ( BINAND ^ attval )*

            for (;;)
            {
                int alt22=2;
                switch ( LA(1) )
                {
                case BINAND:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // cqp.g:226:12: BINAND ^ attval
            	    {
            	        BINAND69 = (pANTLR3_COMMON_TOKEN) MATCHT(BINAND, &FOLLOW_BINAND_in_attvaland1251);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvalandEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) {
            	        BINAND69_tree = 
            	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BINAND69))
            	        ;
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, BINAND69_tree, root_0));
            	        }

            	        FOLLOWPUSH(FOLLOW_attval_in_attvaland1254);
            	        attval70=attval(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattvalandEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval70.tree);

            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleattvalandEx; /* Prevent compiler warnings */
    ruleattvalandEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end attvaland */

/**
 * $ANTLR start attval
 * cqp.g:229:1: attval : ( ATTR ( NOT )? ( ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? ) REGEXP |e= EEQ ^r= REGEXP ) | POSNUM n= NUMBER ( NNUMBER -> ^( $n NNUMBER ) | -> ^( $n NNUMBER[$n.text->chars] ) ) | NOT ^ attval | LPAREN ! attvallist RPAREN !| KW_WS LPAREN (l= NUMBER COMMA s= NUMBER -> ^( KW_WS $l $s) |w1= REGEXP COMMA r= REGEXP COMMA w2= REGEXP -> ^( KW_WS $w1 $r $w2) ) RPAREN | KW_SWAP ^ LPAREN ! NUMBER COMMA ! attvallist RPAREN !| KW_CCOLL ^ LPAREN ! NUMBER COMMA ! NUMBER COMMA ! attvallist RPAREN !);
 */
static cqpParser_attval_return
attval(pcqpParser ctx)
{
    cqpParser_attval_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    e;
    pANTLR3_COMMON_TOKEN    r;
    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    l;
    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    w1;
    pANTLR3_COMMON_TOKEN    w2;
    pANTLR3_COMMON_TOKEN    ATTR71;
    pANTLR3_COMMON_TOKEN    NOT72;
    pANTLR3_COMMON_TOKEN    EQ73;
    pANTLR3_COMMON_TOKEN    LEQ74;
    pANTLR3_COMMON_TOKEN    GEQ75;
    pANTLR3_COMMON_TOKEN    TEQ76;
    pANTLR3_COMMON_TOKEN    NUMBER77;
    pANTLR3_COMMON_TOKEN    REGEXP78;
    pANTLR3_COMMON_TOKEN    POSNUM79;
    pANTLR3_COMMON_TOKEN    NNUMBER80;
    pANTLR3_COMMON_TOKEN    NOT81;
    pANTLR3_COMMON_TOKEN    LPAREN83;
    pANTLR3_COMMON_TOKEN    RPAREN85;
    pANTLR3_COMMON_TOKEN    KW_WS86;
    pANTLR3_COMMON_TOKEN    LPAREN87;
    pANTLR3_COMMON_TOKEN    COMMA88;
    pANTLR3_COMMON_TOKEN    COMMA89;
    pANTLR3_COMMON_TOKEN    COMMA90;
    pANTLR3_COMMON_TOKEN    RPAREN91;
    pANTLR3_COMMON_TOKEN    KW_SWAP92;
    pANTLR3_COMMON_TOKEN    LPAREN93;
    pANTLR3_COMMON_TOKEN    NUMBER94;
    pANTLR3_COMMON_TOKEN    COMMA95;
    pANTLR3_COMMON_TOKEN    RPAREN97;
    pANTLR3_COMMON_TOKEN    KW_CCOLL98;
    pANTLR3_COMMON_TOKEN    LPAREN99;
    pANTLR3_COMMON_TOKEN    NUMBER100;
    pANTLR3_COMMON_TOKEN    COMMA101;
    pANTLR3_COMMON_TOKEN    NUMBER102;
    pANTLR3_COMMON_TOKEN    COMMA103;
    pANTLR3_COMMON_TOKEN    RPAREN105;
    cqpParser_attval_return attval82;
    #undef	RETURN_TYPE_attval82
    #define	RETURN_TYPE_attval82 cqpParser_attval_return

    cqpParser_attvallist_return attvallist84;
    #undef	RETURN_TYPE_attvallist84
    #define	RETURN_TYPE_attvallist84 cqpParser_attvallist_return

    cqpParser_attvallist_return attvallist96;
    #undef	RETURN_TYPE_attvallist96
    #define	RETURN_TYPE_attvallist96 cqpParser_attvallist_return

    cqpParser_attvallist_return attvallist104;
    #undef	RETURN_TYPE_attvallist104
    #define	RETURN_TYPE_attvallist104 cqpParser_attvallist_return

    pANTLR3_BASE_TREE e_tree;
    pANTLR3_BASE_TREE r_tree;
    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE l_tree;
    pANTLR3_BASE_TREE s_tree;
    pANTLR3_BASE_TREE w1_tree;
    pANTLR3_BASE_TREE w2_tree;
    pANTLR3_BASE_TREE ATTR71_tree;
    pANTLR3_BASE_TREE NOT72_tree;
    pANTLR3_BASE_TREE EQ73_tree;
    pANTLR3_BASE_TREE LEQ74_tree;
    pANTLR3_BASE_TREE GEQ75_tree;
    pANTLR3_BASE_TREE TEQ76_tree;
    pANTLR3_BASE_TREE NUMBER77_tree;
    pANTLR3_BASE_TREE REGEXP78_tree;
    pANTLR3_BASE_TREE POSNUM79_tree;
    pANTLR3_BASE_TREE NNUMBER80_tree;
    pANTLR3_BASE_TREE NOT81_tree;
    pANTLR3_BASE_TREE LPAREN83_tree;
    pANTLR3_BASE_TREE RPAREN85_tree;
    pANTLR3_BASE_TREE KW_WS86_tree;
    pANTLR3_BASE_TREE LPAREN87_tree;
    pANTLR3_BASE_TREE COMMA88_tree;
    pANTLR3_BASE_TREE COMMA89_tree;
    pANTLR3_BASE_TREE COMMA90_tree;
    pANTLR3_BASE_TREE RPAREN91_tree;
    pANTLR3_BASE_TREE KW_SWAP92_tree;
    pANTLR3_BASE_TREE LPAREN93_tree;
    pANTLR3_BASE_TREE NUMBER94_tree;
    pANTLR3_BASE_TREE COMMA95_tree;
    pANTLR3_BASE_TREE RPAREN97_tree;
    pANTLR3_BASE_TREE KW_CCOLL98_tree;
    pANTLR3_BASE_TREE LPAREN99_tree;
    pANTLR3_BASE_TREE NUMBER100_tree;
    pANTLR3_BASE_TREE COMMA101_tree;
    pANTLR3_BASE_TREE NUMBER102_tree;
    pANTLR3_BASE_TREE COMMA103_tree;
    pANTLR3_BASE_TREE RPAREN105_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_REGEXP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_POSNUM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NNUMBER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;

    /* Initialize rule variables
     */

    root_0 = NULL;

    e       = NULL;
    r       = NULL;
    n       = NULL;
    l       = NULL;
    s       = NULL;
    w1       = NULL;
    w2       = NULL;
    ATTR71       = NULL;
    NOT72       = NULL;
    EQ73       = NULL;
    LEQ74       = NULL;
    GEQ75       = NULL;
    TEQ76       = NULL;
    NUMBER77       = NULL;
    REGEXP78       = NULL;
    POSNUM79       = NULL;
    NNUMBER80       = NULL;
    NOT81       = NULL;
    LPAREN83       = NULL;
    RPAREN85       = NULL;
    KW_WS86       = NULL;
    LPAREN87       = NULL;
    COMMA88       = NULL;
    COMMA89       = NULL;
    COMMA90       = NULL;
    RPAREN91       = NULL;
    KW_SWAP92       = NULL;
    LPAREN93       = NULL;
    NUMBER94       = NULL;
    COMMA95       = NULL;
    RPAREN97       = NULL;
    KW_CCOLL98       = NULL;
    LPAREN99       = NULL;
    NUMBER100       = NULL;
    COMMA101       = NULL;
    NUMBER102       = NULL;
    COMMA103       = NULL;
    RPAREN105       = NULL;
    attval82.tree = NULL;

    attvallist84.tree = NULL;

    attvallist96.tree = NULL;

    attvallist104.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    e_tree   = NULL;
    r_tree   = NULL;
    n_tree   = NULL;
    l_tree   = NULL;
    s_tree   = NULL;
    w1_tree   = NULL;
    w2_tree   = NULL;
    ATTR71_tree   = NULL;
    NOT72_tree   = NULL;
    EQ73_tree   = NULL;
    LEQ74_tree   = NULL;
    GEQ75_tree   = NULL;
    TEQ76_tree   = NULL;
    NUMBER77_tree   = NULL;
    REGEXP78_tree   = NULL;
    POSNUM79_tree   = NULL;
    NNUMBER80_tree   = NULL;
    NOT81_tree   = NULL;
    LPAREN83_tree   = NULL;
    RPAREN85_tree   = NULL;
    KW_WS86_tree   = NULL;
    LPAREN87_tree   = NULL;
    COMMA88_tree   = NULL;
    COMMA89_tree   = NULL;
    COMMA90_tree   = NULL;
    RPAREN91_tree   = NULL;
    KW_SWAP92_tree   = NULL;
    LPAREN93_tree   = NULL;
    NUMBER94_tree   = NULL;
    COMMA95_tree   = NULL;
    RPAREN97_tree   = NULL;
    KW_CCOLL98_tree   = NULL;
    LPAREN99_tree   = NULL;
    NUMBER100_tree   = NULL;
    COMMA101_tree   = NULL;
    NUMBER102_tree   = NULL;
    COMMA103_tree   = NULL;
    RPAREN105_tree   = NULL;

    stream_REGEXP   = NULL;
    #define CREATE_stream_REGEXP  if (stream_REGEXP == NULL) {stream_REGEXP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token REGEXP"); } 
    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_POSNUM   = NULL;
    #define CREATE_stream_POSNUM  if (stream_POSNUM == NULL) {stream_POSNUM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token POSNUM"); } 
    stream_KW_WS   = NULL;
    #define CREATE_stream_KW_WS  if (stream_KW_WS == NULL) {stream_KW_WS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WS"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_NNUMBER   = NULL;
    #define CREATE_stream_NNUMBER  if (stream_NNUMBER == NULL) {stream_NNUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NNUMBER"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 

    retval.tree  = NULL;

    {
        {
            //  cqp.g:230:2: ( ATTR ( NOT )? ( ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? ) REGEXP |e= EEQ ^r= REGEXP ) | POSNUM n= NUMBER ( NNUMBER -> ^( $n NNUMBER ) | -> ^( $n NNUMBER[$n.text->chars] ) ) | NOT ^ attval | LPAREN ! attvallist RPAREN !| KW_WS LPAREN (l= NUMBER COMMA s= NUMBER -> ^( KW_WS $l $s) |w1= REGEXP COMMA r= REGEXP COMMA w2= REGEXP -> ^( KW_WS $w1 $r $w2) ) RPAREN | KW_SWAP ^ LPAREN ! NUMBER COMMA ! attvallist RPAREN !| KW_CCOLL ^ LPAREN ! NUMBER COMMA ! NUMBER COMMA ! attvallist RPAREN !)

            ANTLR3_UINT32 alt29;

            alt29=7;

            switch ( LA(1) )
            {
            case ATTR:
            	{
            		alt29=1;
            	}
                break;
            case POSNUM:
            	{
            		alt29=2;
            	}
                break;
            case NOT:
            	{
            		alt29=3;
            	}
                break;
            case LPAREN:
            	{
            		alt29=4;
            	}
                break;
            case KW_WS:
            	{
            		alt29=5;
            	}
                break;
            case KW_SWAP:
            	{
            		alt29=6;
            	}
                break;
            case KW_CCOLL:
            	{
            		alt29=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto ruleattvalEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // cqp.g:230:4: ATTR ( NOT )? ( ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? ) REGEXP |e= EEQ ^r= REGEXP )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        ATTR71 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_attval1267);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        ATTR71_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ATTR71));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ATTR71_tree);
        	        }

        	        // cqp.g:230:9: ( NOT )?
        	        {
        	            int alt23=2;
        	            switch ( LA(1) )
        	            {
        	                case NOT:
        	                	{
        	                		alt23=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt23)
        	            {
        	        	case 1:
        	        	    // cqp.g:230:9: NOT
        	        	    {
        	        	        NOT72 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_attval1269);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        NOT72_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT72));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NOT72_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // cqp.g:231:4: ( ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? ) REGEXP |e= EEQ ^r= REGEXP )
        	        {
        	            int alt26=2;
        	            switch ( LA(1) )
        	            {
        	            case EQ:
        	            case GEQ:
        	            case LEQ:
        	            case TEQ:
        	            	{
        	            		alt26=1;
        	            	}
        	                break;
        	            case EEQ:
        	            	{
        	            		alt26=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 26;
        	                EXCEPTION->state        = 0;


        	                goto ruleattvalEx;

        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // cqp.g:231:6: ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? ) REGEXP
        	        	    {
        	        	        // cqp.g:231:6: ( EQ ^| LEQ ^| GEQ ^| TEQ ^ ( NUMBER )? )
        	        	        {
        	        	            int alt25=4;
        	        	            switch ( LA(1) )
        	        	            {
        	        	            case EQ:
        	        	            	{
        	        	            		alt25=1;
        	        	            	}
        	        	                break;
        	        	            case LEQ:
        	        	            	{
        	        	            		alt25=2;
        	        	            	}
        	        	                break;
        	        	            case GEQ:
        	        	            	{
        	        	            		alt25=3;
        	        	            	}
        	        	                break;
        	        	            case TEQ:
        	        	            	{
        	        	            		alt25=4;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }

        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 25;
        	        	                EXCEPTION->state        = 0;


        	        	                goto ruleattvalEx;

        	        	            }

        	        	            switch (alt25)
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:231:7: EQ ^
        	        	        	    {
        	        	        	        EQ73 = (pANTLR3_COMMON_TOKEN) MATCHT(EQ, &FOLLOW_EQ_in_attval1279);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        EQ73_tree = 
        	        	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EQ73))
        	        	        	        ;
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, EQ73_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:231:11: LEQ ^
        	        	        	    {
        	        	        	        LEQ74 = (pANTLR3_COMMON_TOKEN) MATCHT(LEQ, &FOLLOW_LEQ_in_attval1282);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        LEQ74_tree = 
        	        	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LEQ74))
        	        	        	        ;
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, LEQ74_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // cqp.g:231:16: GEQ ^
        	        	        	    {
        	        	        	        GEQ75 = (pANTLR3_COMMON_TOKEN) MATCHT(GEQ, &FOLLOW_GEQ_in_attval1285);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        GEQ75_tree = 
        	        	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, GEQ75))
        	        	        	        ;
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, GEQ75_tree, root_0));
        	        	        	        }

        	        	        	    }
        	        	        	    break;
        	        	        	case 4:
        	        	        	    // cqp.g:231:21: TEQ ^ ( NUMBER )?
        	        	        	    {
        	        	        	        TEQ76 = (pANTLR3_COMMON_TOKEN) MATCHT(TEQ, &FOLLOW_TEQ_in_attval1288);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleattvalEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        TEQ76_tree = 
        	        	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, TEQ76))
        	        	        	        ;
        	        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, TEQ76_tree, root_0));
        	        	        	        }

        	        	        	        // cqp.g:231:26: ( NUMBER )?
        	        	        	        {
        	        	        	            int alt24=2;
        	        	        	            switch ( LA(1) )
        	        	        	            {
        	        	        	                case NUMBER:
        	        	        	                	{
        	        	        	                		alt24=1;
        	        	        	                	}
        	        	        	                    break;
        	        	        	            }

        	        	        	            switch (alt24)
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // cqp.g:231:26: NUMBER
        	        	        	        	    {
        	        	        	        	        NUMBER77 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1291);
        	        	        	        	        if  (HASEXCEPTION())
        	        	        	        	        {
        	        	        	        	            goto ruleattvalEx;
        	        	        	        	        }
        	        	        	        	        if (HASFAILED())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }

        	        	        	        	        if ( BACKTRACKING==0 ) {
        	        	        	        	        NUMBER77_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER77));
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER77_tree);
        	        	        	        	        }

        	        	        	        	    }
        	        	        	        	    break;

        	        	        	            }
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        REGEXP78 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1295);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        REGEXP78_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, REGEXP78));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, REGEXP78_tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:232:6: e= EEQ ^r= REGEXP
        	        	    {
        	        	        e = (pANTLR3_COMMON_TOKEN) MATCHT(EEQ, &FOLLOW_EEQ_in_attval1304);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        e_tree = 
        	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, e))
        	        	        ;
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, e_tree, root_0));
        	        	        }

        	        	        r = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1309);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) {
        	        	        r_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, r));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, r_tree);
        	        	        }

        	        	        if ( BACKTRACKING==0 )
        	        	        {
        	        	             unescapeString(r); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // cqp.g:234:4: POSNUM n= NUMBER ( NNUMBER -> ^( $n NNUMBER ) | -> ^( $n NNUMBER[$n.text->chars] ) )
        	    {
        	        POSNUM79 = (pANTLR3_COMMON_TOKEN) MATCHT(POSNUM, &FOLLOW_POSNUM_in_attval1321);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_POSNUM; stream_POSNUM->add(stream_POSNUM, POSNUM79, NULL); }


        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1325);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n, NULL); }


        	        // cqp.g:234:20: ( NNUMBER -> ^( $n NNUMBER ) | -> ^( $n NNUMBER[$n.text->chars] ) )
        	        {
        	            int alt27=2;
        	            switch ( LA(1) )
        	            {
        	            case NNUMBER:
        	            	{
        	            		alt27=1;
        	            	}
        	                break;
        	            case BINAND:
        	            case BINOR:
        	            case RBRACKET:
        	            case RPAREN:
        	            case RSTRUCT:
        	            case SEMI:
        	            case SLASH:
        	            	{
        	            		alt27=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 27;
        	                EXCEPTION->state        = 0;


        	                goto ruleattvalEx;

        	            }

        	            switch (alt27)
        	            {
        	        	case 1:
        	        	    // cqp.g:234:21: NNUMBER
        	        	    {
        	        	        NNUMBER80 = (pANTLR3_COMMON_TOKEN) MATCHT(NNUMBER, &FOLLOW_NNUMBER_in_attval1328);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NNUMBER; stream_NNUMBER->add(stream_NNUMBER, NNUMBER80, NULL); }


        	        	        /* AST REWRITE
        	        	         * elements          : n, NNUMBER
        	        	         * token labels      : n
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 234:29: -> ^( $n NNUMBER )
        	        	        	{
        	        	        	    // cqp.g:234:32: ^( $n NNUMBER )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRootToken(ADAPTOR, stream_n == NULL ? NULL : stream_n->nextToken(stream_n), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        	        stream_NNUMBER == NULL ? NULL : stream_NNUMBER->nextNode(stream_NNUMBER)
        	        	        	        );

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_n != NULL) stream_n->free(stream_n); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:235:17: 
        	        	    {
        	        	        /* AST REWRITE
        	        	         * elements          : NNUMBER, n
        	        	         * token labels      : n
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 235:17: -> ^( $n NNUMBER[$n.text->chars] )
        	        	        	{
        	        	        	    // cqp.g:235:20: ^( $n NNUMBER[$n.text->chars] )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRootToken(ADAPTOR, stream_n == NULL ? NULL : stream_n->nextToken(stream_n), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NNUMBER, TOKTEXT((n->getText(n))->chars))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NNUMBER, (pANTLR3_UINT8)(n->getText(n))->chars)
        	        	        	        #endif

        	        	        	        );

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_n != NULL) stream_n->free(stream_n); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // cqp.g:237:4: NOT ^ attval
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        NOT81 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_attval1377);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NOT81_tree = 
        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NOT81))
        	        ;
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, NOT81_tree, root_0));
        	        }

        	        FOLLOWPUSH(FOLLOW_attval_in_attval1380);
        	        attval82=attval(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attval82.tree);

        	    }
        	    break;
        	case 4:
        	    // cqp.g:238:4: LPAREN ! attvallist RPAREN !
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        LPAREN83 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_attval1385);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        FOLLOWPUSH(FOLLOW_attvallist_in_attval1388);
        	        attvallist84=attvallist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist84.tree);

        	        RPAREN85 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_attval1390);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 5:
        	    // cqp.g:239:4: KW_WS LPAREN (l= NUMBER COMMA s= NUMBER -> ^( KW_WS $l $s) |w1= REGEXP COMMA r= REGEXP COMMA w2= REGEXP -> ^( KW_WS $w1 $r $w2) ) RPAREN
        	    {
        	        KW_WS86 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WS, &FOLLOW_KW_WS_in_attval1396);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WS; stream_KW_WS->add(stream_KW_WS, KW_WS86, NULL); }


        	        LPAREN87 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_attval1398);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN87, NULL); }


        	        // cqp.g:240:3: (l= NUMBER COMMA s= NUMBER -> ^( KW_WS $l $s) |w1= REGEXP COMMA r= REGEXP COMMA w2= REGEXP -> ^( KW_WS $w1 $r $w2) )
        	        {
        	            int alt28=2;
        	            switch ( LA(1) )
        	            {
        	            case NUMBER:
        	            	{
        	            		alt28=1;
        	            	}
        	                break;
        	            case REGEXP:
        	            	{
        	            		alt28=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 28;
        	                EXCEPTION->state        = 0;


        	                goto ruleattvalEx;

        	            }

        	            switch (alt28)
        	            {
        	        	case 1:
        	        	    // cqp.g:240:5: l= NUMBER COMMA s= NUMBER
        	        	    {
        	        	        l = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1406);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, l, NULL); }


        	        	        COMMA88 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1408);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA88, NULL); }


        	        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1412);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, s, NULL); }


        	        	        /* AST REWRITE
        	        	         * elements          : KW_WS, l, s
        	        	         * token labels      : s, l
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_s;
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_l;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_s=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", s);
        	        	        	stream_l=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", l);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 240:29: -> ^( KW_WS $l $s)
        	        	        	{
        	        	        	    // cqp.g:240:32: ^( KW_WS $l $s)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        stream_KW_WS == NULL ? NULL : stream_KW_WS->nextNode(stream_KW_WS)
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_l == NULL ? NULL : stream_l->nextNode(stream_l));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextNode(stream_s));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_s != NULL) stream_s->free(stream_s); 
        	        	        	if (stream_l != NULL) stream_l->free(stream_l); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:241:5: w1= REGEXP COMMA r= REGEXP COMMA w2= REGEXP
        	        	    {
        	        	        w1 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1432);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, w1, NULL); }


        	        	        COMMA89 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1434);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA89, NULL); }


        	        	        r = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1438);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, r, NULL); }


        	        	        COMMA90 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1440);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA90, NULL); }


        	        	        w2 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_attval1444);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattvalEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, w2, NULL); }


        	        	        /* AST REWRITE
        	        	         * elements          : w2, KW_WS, r, w1
        	        	         * token labels      : r, w1, w2
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_r;
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_w1;
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_w2;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_r=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token r", r);
        	        	        	stream_w1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token w1", w1);
        	        	        	stream_w2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token w2", w2);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 241:46: -> ^( KW_WS $w1 $r $w2)
        	        	        	{
        	        	        	    // cqp.g:241:49: ^( KW_WS $w1 $r $w2)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        stream_KW_WS == NULL ? NULL : stream_KW_WS->nextNode(stream_KW_WS)
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_w1 == NULL ? NULL : stream_w1->nextNode(stream_w1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_r == NULL ? NULL : stream_r->nextNode(stream_r));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_w2 == NULL ? NULL : stream_w2->nextNode(stream_w2));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_r != NULL) stream_r->free(stream_r); 
        	        	        	if (stream_w1 != NULL) stream_w1->free(stream_w1); 
        	        	        	if (stream_w2 != NULL) stream_w2->free(stream_w2); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        RPAREN91 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_attval1465);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN91, NULL); }


        	    }
        	    break;
        	case 6:
        	    // cqp.g:243:4: KW_SWAP ^ LPAREN ! NUMBER COMMA ! attvallist RPAREN !
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        KW_SWAP92 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_SWAP, &FOLLOW_KW_SWAP_in_attval1470);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        KW_SWAP92_tree = 
        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_SWAP92))
        	        ;
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_SWAP92_tree, root_0));
        	        }

        	        LPAREN93 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_attval1473);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        NUMBER94 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1476);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER94_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER94));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER94_tree);
        	        }

        	        COMMA95 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1478);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        FOLLOWPUSH(FOLLOW_attvallist_in_attval1481);
        	        attvallist96=attvallist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist96.tree);

        	        RPAREN97 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_attval1483);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 7:
        	    // cqp.g:244:4: KW_CCOLL ^ LPAREN ! NUMBER COMMA ! NUMBER COMMA ! attvallist RPAREN !
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        KW_CCOLL98 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CCOLL, &FOLLOW_KW_CCOLL_in_attval1489);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        KW_CCOLL98_tree = 
        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_CCOLL98))
        	        ;
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, KW_CCOLL98_tree, root_0));
        	        }

        	        LPAREN99 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_attval1492);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        NUMBER100 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1495);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER100_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER100));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER100_tree);
        	        }

        	        COMMA101 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1497);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        NUMBER102 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_attval1500);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        NUMBER102_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMBER102));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NUMBER102_tree);
        	        }

        	        COMMA103 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attval1502);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	        FOLLOWPUSH(FOLLOW_attvallist_in_attval1505);
        	        attvallist104=attvallist(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, attvallist104.tree);

        	        RPAREN105 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_attval1507);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattvalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleattvalEx; /* Prevent compiler warnings */
    ruleattvalEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_REGEXP != NULL) stream_REGEXP->free(stream_REGEXP);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_POSNUM != NULL) stream_POSNUM->free(stream_POSNUM);
        if (stream_KW_WS != NULL) stream_KW_WS->free(stream_KW_WS);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_NNUMBER != NULL) stream_NNUMBER->free(stream_NNUMBER);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end attval */

/**
 * $ANTLR start atomquery
 * cqp.g:247:1: atomquery : ( position | LPAREN ( sequence -> sequence ) ( ( NOT )? KW_WITHIN within_containing_part -> ^( KW_WITHIN ( NOT )? $atomquery within_containing_part ) | ( NOT )? KW_CONTAINING within_containing_part -> ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part ) )* RPAREN );
 */
static cqpParser_atomquery_return
atomquery(pcqpParser ctx)
{
    cqpParser_atomquery_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN107;
    pANTLR3_COMMON_TOKEN    NOT109;
    pANTLR3_COMMON_TOKEN    KW_WITHIN110;
    pANTLR3_COMMON_TOKEN    NOT112;
    pANTLR3_COMMON_TOKEN    KW_CONTAINING113;
    pANTLR3_COMMON_TOKEN    RPAREN115;
    cqpParser_position_return position106;
    #undef	RETURN_TYPE_position106
    #define	RETURN_TYPE_position106 cqpParser_position_return

    cqpParser_sequence_return sequence108;
    #undef	RETURN_TYPE_sequence108
    #define	RETURN_TYPE_sequence108 cqpParser_sequence_return

    cqpParser_within_containing_part_return within_containing_part111;
    #undef	RETURN_TYPE_within_containing_part111
    #define	RETURN_TYPE_within_containing_part111 cqpParser_within_containing_part_return

    cqpParser_within_containing_part_return within_containing_part114;
    #undef	RETURN_TYPE_within_containing_part114
    #define	RETURN_TYPE_within_containing_part114 cqpParser_within_containing_part_return

    pANTLR3_BASE_TREE LPAREN107_tree;
    pANTLR3_BASE_TREE NOT109_tree;
    pANTLR3_BASE_TREE KW_WITHIN110_tree;
    pANTLR3_BASE_TREE NOT112_tree;
    pANTLR3_BASE_TREE KW_CONTAINING113_tree;
    pANTLR3_BASE_TREE RPAREN115_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WITHIN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CONTAINING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sequence;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_within_containing_part;
    /* Initialize rule variables
     */

    root_0 = NULL;

    LPAREN107       = NULL;
    NOT109       = NULL;
    KW_WITHIN110       = NULL;
    NOT112       = NULL;
    KW_CONTAINING113       = NULL;
    RPAREN115       = NULL;
    position106.tree = NULL;

    sequence108.tree = NULL;

    within_containing_part111.tree = NULL;

    within_containing_part114.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LPAREN107_tree   = NULL;
    NOT109_tree   = NULL;
    KW_WITHIN110_tree   = NULL;
    NOT112_tree   = NULL;
    KW_CONTAINING113_tree   = NULL;
    RPAREN115_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_KW_WITHIN   = NULL;
    #define CREATE_stream_KW_WITHIN  if (stream_KW_WITHIN == NULL) {stream_KW_WITHIN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WITHIN"); } 
    stream_NOT   = NULL;
    #define CREATE_stream_NOT  if (stream_NOT == NULL) {stream_NOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NOT"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_KW_CONTAINING   = NULL;
    #define CREATE_stream_KW_CONTAINING  if (stream_KW_CONTAINING == NULL) {stream_KW_CONTAINING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CONTAINING"); } 
    stream_sequence   = NULL;
    #define CREATE_stream_sequence  if (stream_sequence == NULL) {stream_sequence = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sequence"); }
    stream_within_containing_part   = NULL;
    #define CREATE_stream_within_containing_part  if (stream_within_containing_part == NULL) {stream_within_containing_part = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule within_containing_part"); }

    retval.tree  = NULL;

    {
        {
            //  cqp.g:248:2: ( position | LPAREN ( sequence -> sequence ) ( ( NOT )? KW_WITHIN within_containing_part -> ^( KW_WITHIN ( NOT )? $atomquery within_containing_part ) | ( NOT )? KW_CONTAINING within_containing_part -> ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part ) )* RPAREN )

            ANTLR3_UINT32 alt33;

            alt33=2;

            switch ( LA(1) )
            {
            case KW_MU:
            case LBRACKET:
            case NUMBER:
            case REGEXP:
            case TEQ:
            	{
            		alt33=1;
            	}
                break;
            case LPAREN:
            	{
            		switch ( LA(2) )
            		{
            		case KW_MEET:
            		case KW_UNION:
            			{
            				alt33=1;
            			}
            		    break;
            		case KW_MU:
            		case LBRACKET:
            		case LPAREN:
            		case LSTRUCT:
            		case NUMBER:
            		case REGEXP:
            		case TEQ:
            			{
            				alt33=2;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }

            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 33;
            		    EXCEPTION->state        = 5;


            		    goto ruleatomqueryEx;

            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto ruleatomqueryEx;

            }

            switch (alt33)
            {
        	case 1:
        	    // cqp.g:248:4: position
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_position_in_atomquery1519);
        	        position106=position(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, position106.tree);

        	    }
        	    break;
        	case 2:
        	    // cqp.g:249:4: LPAREN ( sequence -> sequence ) ( ( NOT )? KW_WITHIN within_containing_part -> ^( KW_WITHIN ( NOT )? $atomquery within_containing_part ) | ( NOT )? KW_CONTAINING within_containing_part -> ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part ) )* RPAREN
        	    {
        	        LPAREN107 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_atomquery1524);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN107, NULL); }


        	        // cqp.g:249:11: ( sequence -> sequence )
        	        // cqp.g:249:12: sequence
        	        {
        	            FOLLOWPUSH(FOLLOW_sequence_in_atomquery1527);
        	            sequence108=sequence(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleatomqueryEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }

        	            if ( BACKTRACKING==0 ) { CREATE_stream_sequence; stream_sequence->add(stream_sequence, sequence108.tree, NULL); }

        	            /* AST REWRITE
        	             * elements          : sequence
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 

        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 249:21: -> sequence
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sequence == NULL ? NULL : stream_sequence->nextTree(stream_sequence));

        	            	}


        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // cqp.g:250:3: ( ( NOT )? KW_WITHIN within_containing_part -> ^( KW_WITHIN ( NOT )? $atomquery within_containing_part ) | ( NOT )? KW_CONTAINING within_containing_part -> ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part ) )*

        	        for (;;)
        	        {
        	            int alt32=3;
        	            switch ( LA(1) )
        	            {
        	            case NOT:
        	            	{
        	            		switch ( LA(2) )
        	            		{
        	            		case KW_WITHIN:
        	            			{
        	            				alt32=1;
        	            			}
        	            		    break;
        	            		case KW_CONTAINING:
        	            			{
        	            				alt32=2;
        	            			}
        	            		    break;

        	            		}

        	            	}
        	                break;
        	            case KW_WITHIN:
        	            	{
        	            		alt32=1;
        	            	}
        	                break;
        	            case KW_CONTAINING:
        	            	{
        	            		alt32=2;
        	            	}
        	                break;

        	            }

        	            switch (alt32)
        	            {
        	        	case 1:
        	        	    // cqp.g:250:4: ( NOT )? KW_WITHIN within_containing_part
        	        	    {
        	        	        // cqp.g:250:4: ( NOT )?
        	        	        {
        	        	            int alt30=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case NOT:
        	        	                	{
        	        	                		alt30=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt30)
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:250:4: NOT
        	        	        	    {
        	        	        	        NOT109 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_atomquery1537);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleatomqueryEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NOT; stream_NOT->add(stream_NOT, NOT109, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        KW_WITHIN110 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITHIN, &FOLLOW_KW_WITHIN_in_atomquery1540);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITHIN; stream_KW_WITHIN->add(stream_KW_WITHIN, KW_WITHIN110, NULL); }


        	        	        FOLLOWPUSH(FOLLOW_within_containing_part_in_atomquery1543);
        	        	        within_containing_part111=within_containing_part(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_within_containing_part; stream_within_containing_part->add(stream_within_containing_part, within_containing_part111.tree, NULL); }

        	        	        /* AST REWRITE
        	        	         * elements          : within_containing_part, atomquery, KW_WITHIN, NOT
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 250:43: -> ^( KW_WITHIN ( NOT )? $atomquery within_containing_part )
        	        	        	{
        	        	        	    // cqp.g:250:46: ^( KW_WITHIN ( NOT )? $atomquery within_containing_part )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        stream_KW_WITHIN == NULL ? NULL : stream_KW_WITHIN->nextNode(stream_KW_WITHIN)
        	        	        	        , root_1));

        	        	        	        // cqp.g:250:58: ( NOT )?
        	        	        	        {
        	        	        	        	if ( (stream_NOT != NULL && stream_NOT->hasNext(stream_NOT))  )
        	        	        	        	{
        	        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        	        		stream_NOT == NULL ? NULL : stream_NOT->nextNode(stream_NOT)
        	        	        	        		);

        	        	        	        	}
        	        	        	        	if ( stream_NOT != NULL) stream_NOT->reset(stream_NOT);

        	        	        	        }

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_within_containing_part == NULL ? NULL : stream_within_containing_part->nextTree(stream_within_containing_part));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:251:4: ( NOT )? KW_CONTAINING within_containing_part
        	        	    {
        	        	        // cqp.g:251:4: ( NOT )?
        	        	        {
        	        	            int alt31=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	                case NOT:
        	        	                	{
        	        	                		alt31=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt31)
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:251:4: NOT
        	        	        	    {
        	        	        	        NOT112 = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_atomquery1563);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleatomqueryEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NOT; stream_NOT->add(stream_NOT, NOT112, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        KW_CONTAINING113 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CONTAINING, &FOLLOW_KW_CONTAINING_in_atomquery1566);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_CONTAINING; stream_KW_CONTAINING->add(stream_KW_CONTAINING, KW_CONTAINING113, NULL); }


        	        	        FOLLOWPUSH(FOLLOW_within_containing_part_in_atomquery1568);
        	        	        within_containing_part114=within_containing_part(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleatomqueryEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_within_containing_part; stream_within_containing_part->add(stream_within_containing_part, within_containing_part114.tree, NULL); }

        	        	        /* AST REWRITE
        	        	         * elements          : NOT, atomquery, within_containing_part, KW_CONTAINING
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 251:46: -> ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part )
        	        	        	{
        	        	        	    // cqp.g:251:49: ^( KW_CONTAINING ( NOT )? $atomquery within_containing_part )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        stream_KW_CONTAINING == NULL ? NULL : stream_KW_CONTAINING->nextNode(stream_KW_CONTAINING)
        	        	        	        , root_1));

        	        	        	        // cqp.g:251:65: ( NOT )?
        	        	        	        {
        	        	        	        	if ( (stream_NOT != NULL && stream_NOT->hasNext(stream_NOT))  )
        	        	        	        	{
        	        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        	        		stream_NOT == NULL ? NULL : stream_NOT->nextNode(stream_NOT)
        	        	        	        		);

        	        	        	        	}
        	        	        	        	if ( stream_NOT != NULL) stream_NOT->reset(stream_NOT);

        	        	        	        }

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_within_containing_part == NULL ? NULL : stream_within_containing_part->nextTree(stream_within_containing_part));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop32;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop32: ; /* Jump out to here if this rule does not match */


        	        RPAREN115 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_atomquery1589);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleatomqueryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN115, NULL); }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleatomqueryEx; /* Prevent compiler warnings */
    ruleatomqueryEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_KW_WITHIN != NULL) stream_KW_WITHIN->free(stream_KW_WITHIN);
        if (stream_NOT != NULL) stream_NOT->free(stream_NOT);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_KW_CONTAINING != NULL) stream_KW_CONTAINING->free(stream_KW_CONTAINING);
        if (stream_sequence != NULL) stream_sequence->free(stream_sequence);
        if (stream_within_containing_part != NULL) stream_within_containing_part->free(stream_within_containing_part);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end atomquery */

/**
 * $ANTLR start position
 * cqp.g:255:1: position : ( oneposition |n= NUMBER c= COLON p= oneposition -> ^( LBRACKET[\"[\"] ^( $c $n $p) ) );
 */
static cqpParser_position_return
position(pcqpParser ctx)
{
    cqpParser_position_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    c;
    cqpParser_oneposition_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p cqpParser_oneposition_return

    cqpParser_oneposition_return oneposition116;
    #undef	RETURN_TYPE_oneposition116
    #define	RETURN_TYPE_oneposition116 cqpParser_oneposition_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE c_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_oneposition;
    /* Initialize rule variables
     */

    root_0 = NULL;

    n       = NULL;
    c       = NULL;
    p.tree = NULL;

    oneposition116.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    n_tree   = NULL;
    c_tree   = NULL;

    stream_COLON   = NULL;
    #define CREATE_stream_COLON  if (stream_COLON == NULL) {stream_COLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COLON"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 
    stream_oneposition   = NULL;
    #define CREATE_stream_oneposition  if (stream_oneposition == NULL) {stream_oneposition = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule oneposition"); }

    retval.tree  = NULL;

    {
        {
            //  cqp.g:256:2: ( oneposition |n= NUMBER c= COLON p= oneposition -> ^( LBRACKET[\"[\"] ^( $c $n $p) ) )

            ANTLR3_UINT32 alt34;

            alt34=2;

            switch ( LA(1) )
            {
            case KW_MU:
            case LBRACKET:
            case LPAREN:
            case REGEXP:
            case TEQ:
            	{
            		alt34=1;
            	}
                break;
            case NUMBER:
            	{
            		alt34=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto rulepositionEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // cqp.g:256:4: oneposition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_oneposition_in_position1601);
        	        oneposition116=oneposition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, oneposition116.tree);

        	    }
        	    break;
        	case 2:
        	    // cqp.g:257:4: n= NUMBER c= COLON p= oneposition
        	    {
        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_position1608);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n, NULL); }


        	        c = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_position1612);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_COLON; stream_COLON->add(stream_COLON, c, NULL); }


        	        FOLLOWPUSH(FOLLOW_oneposition_in_position1616);
        	        p=oneposition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) { CREATE_stream_oneposition; stream_oneposition->add(stream_oneposition, p.tree, NULL); }

        	        /* AST REWRITE
        	         * elements          : p, c, n
        	         * token labels      : c, n
        	         * rule labels       : retval, p
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;

        	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
        	        	stream_n=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n", n);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_p=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", p.tree != NULL ? p.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 257:35: -> ^( LBRACKET[\"[\"] ^( $c $n $p) )
        	        	{
        	        	    // cqp.g:257:38: ^( LBRACKET[\"[\"] ^( $c $n $p) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        #endif

        	        	        , root_1));

        	        	        // cqp.g:257:54: ^( $c $n $p)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRootToken(ADAPTOR, stream_c == NULL ? NULL : stream_c->nextToken(stream_c), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_n == NULL ? NULL : stream_n->nextNode(stream_n));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_c != NULL) stream_c->free(stream_c); 
        	        	if (stream_n != NULL) stream_n->free(stream_n); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_p != NULL) stream_p->free(stream_p);


        	        }
        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulepositionEx; /* Prevent compiler warnings */
    rulepositionEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_COLON != NULL) stream_COLON->free(stream_COLON);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
        if (stream_oneposition != NULL) stream_oneposition->free(stream_oneposition);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end position */

/**
 * $ANTLR start oneposition
 * cqp.g:260:1: oneposition : ( LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET | REGEXP -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) ) | TEQ ( NUMBER )? REGEXP -> ^( LBRACKET[\"[\"] ^( TEQ[\"~\"] ATTR[\"-\"] NUMBER REGEXP ) ) | KW_MU | mupart );
 */
static cqpParser_oneposition_return
oneposition(pcqpParser ctx)
{
    cqpParser_oneposition_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LBRACKET117;
    pANTLR3_COMMON_TOKEN    RBRACKET119;
    pANTLR3_COMMON_TOKEN    REGEXP120;
    pANTLR3_COMMON_TOKEN    TEQ121;
    pANTLR3_COMMON_TOKEN    NUMBER122;
    pANTLR3_COMMON_TOKEN    REGEXP123;
    pANTLR3_COMMON_TOKEN    KW_MU124;
    cqpParser_attvallist_return attvallist118;
    #undef	RETURN_TYPE_attvallist118
    #define	RETURN_TYPE_attvallist118 cqpParser_attvallist_return

    cqpParser_mupart_return mupart125;
    #undef	RETURN_TYPE_mupart125
    #define	RETURN_TYPE_mupart125 cqpParser_mupart_return

    pANTLR3_BASE_TREE LBRACKET117_tree;
    pANTLR3_BASE_TREE RBRACKET119_tree;
    pANTLR3_BASE_TREE REGEXP120_tree;
    pANTLR3_BASE_TREE TEQ121_tree;
    pANTLR3_BASE_TREE NUMBER122_tree;
    pANTLR3_BASE_TREE REGEXP123_tree;
    pANTLR3_BASE_TREE KW_MU124_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_REGEXP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TEQ;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attvallist;
    /* Initialize rule variables
     */

    root_0 = NULL;

    LBRACKET117       = NULL;
    RBRACKET119       = NULL;
    REGEXP120       = NULL;
    TEQ121       = NULL;
    NUMBER122       = NULL;
    REGEXP123       = NULL;
    KW_MU124       = NULL;
    attvallist118.tree = NULL;

    mupart125.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LBRACKET117_tree   = NULL;
    RBRACKET119_tree   = NULL;
    REGEXP120_tree   = NULL;
    TEQ121_tree   = NULL;
    NUMBER122_tree   = NULL;
    REGEXP123_tree   = NULL;
    KW_MU124_tree   = NULL;

    stream_REGEXP   = NULL;
    #define CREATE_stream_REGEXP  if (stream_REGEXP == NULL) {stream_REGEXP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token REGEXP"); } 
    stream_LBRACKET   = NULL;
    #define CREATE_stream_LBRACKET  if (stream_LBRACKET == NULL) {stream_LBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LBRACKET"); } 
    stream_RBRACKET   = NULL;
    #define CREATE_stream_RBRACKET  if (stream_RBRACKET == NULL) {stream_RBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RBRACKET"); } 
    stream_TEQ   = NULL;
    #define CREATE_stream_TEQ  if (stream_TEQ == NULL) {stream_TEQ = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TEQ"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 
    stream_attvallist   = NULL;
    #define CREATE_stream_attvallist  if (stream_attvallist == NULL) {stream_attvallist = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attvallist"); }

    retval.tree  = NULL;

    {
        {
            //  cqp.g:261:2: ( LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET | REGEXP -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) ) | TEQ ( NUMBER )? REGEXP -> ^( LBRACKET[\"[\"] ^( TEQ[\"~\"] ATTR[\"-\"] NUMBER REGEXP ) ) | KW_MU | mupart )

            ANTLR3_UINT32 alt37;

            alt37=5;

            switch ( LA(1) )
            {
            case LBRACKET:
            	{
            		alt37=1;
            	}
                break;
            case REGEXP:
            	{
            		alt37=2;
            	}
                break;
            case TEQ:
            	{
            		alt37=3;
            	}
                break;
            case KW_MU:
            	{
            		alt37=4;
            	}
                break;
            case LPAREN:
            	{
            		alt37=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 37;
                EXCEPTION->state        = 0;


                goto ruleonepositionEx;

            }

            switch (alt37)
            {
        	case 1:
        	    // cqp.g:261:4: LBRACKET ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) ) RBRACKET
        	    {
        	        LBRACKET117 = (pANTLR3_COMMON_TOKEN) MATCHT(LBRACKET, &FOLLOW_LBRACKET_in_oneposition1646);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LBRACKET; stream_LBRACKET->add(stream_LBRACKET, LBRACKET117, NULL); }


        	        // cqp.g:261:13: ( attvallist -> ^( LBRACKET[\"[\"] attvallist ) | -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) ) )
        	        {
        	            int alt35=2;
        	            switch ( LA(1) )
        	            {
        	            case ATTR:
        	            case KW_CCOLL:
        	            case KW_SWAP:
        	            case KW_WS:
        	            case LPAREN:
        	            case NOT:
        	            case POSNUM:
        	            	{
        	            		alt35=1;
        	            	}
        	                break;
        	            case RBRACKET:
        	            	{
        	            		alt35=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 35;
        	                EXCEPTION->state        = 0;


        	                goto ruleonepositionEx;

        	            }

        	            switch (alt35)
        	            {
        	        	case 1:
        	        	    // cqp.g:261:15: attvallist
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_attvallist_in_oneposition1650);
        	        	        attvallist118=attvallist(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleonepositionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_attvallist; stream_attvallist->add(stream_attvallist, attvallist118.tree, NULL); }

        	        	        /* AST REWRITE
        	        	         * elements          : LBRACKET, attvallist
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 261:26: -> ^( LBRACKET[\"[\"] attvallist )
        	        	        	{
        	        	        	    // cqp.g:261:29: ^( LBRACKET[\"[\"] attvallist )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        	        #endif

        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_attvallist == NULL ? NULL : stream_attvallist->nextTree(stream_attvallist));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:262:7: 
        	        	    {
        	        	        /* AST REWRITE
        	        	         * elements          : LBRACKET
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 262:7: -> ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
        	        	        	{
        	        	        	    // cqp.g:262:10: ^( LBRACKET[\"[\"] ^( ANYPOS[\"[]\"] ) )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        	        #endif

        	        	        	        , root_1));

        	        	        	        // cqp.g:262:26: ^( ANYPOS[\"[]\"] )
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	            #if 1 == 2
        	        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ANYPOS, TOKTEXT("[]"))
        	        	        	            #else
        	        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ANYPOS, (pANTLR3_UINT8)"[]")
        	        	        	            #endif

        	        	        	            , root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        RBRACKET119 = (pANTLR3_COMMON_TOKEN) MATCHT(RBRACKET, &FOLLOW_RBRACKET_in_oneposition1685);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RBRACKET; stream_RBRACKET->add(stream_RBRACKET, RBRACKET119, NULL); }


        	    }
        	    break;
        	case 2:
        	    // cqp.g:264:4: REGEXP
        	    {
        	        REGEXP120 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_oneposition1690);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, REGEXP120, NULL); }


        	        /* AST REWRITE
        	         * elements          : REGEXP
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 264:11: -> ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) )
        	        	{
        	        	    // cqp.g:264:14: ^( LBRACKET[\"[\"] ^( EQ[\"=\"] ATTR[\"-\"] REGEXP ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        #endif

        	        	        , root_1));

        	        	        // cqp.g:264:30: ^( EQ[\"=\"] ATTR[\"-\"] REGEXP )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, EQ, TOKTEXT("="))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQ, (pANTLR3_UINT8)"=")
        	        	            #endif

        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 

        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ATTR, TOKTEXT("-"))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTR, (pANTLR3_UINT8)"-")
        	        	            #endif

        	        	            );

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 
        	        	            stream_REGEXP == NULL ? NULL : stream_REGEXP->nextNode(stream_REGEXP)
        	        	            );

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // cqp.g:265:4: TEQ ( NUMBER )? REGEXP
        	    {
        	        TEQ121 = (pANTLR3_COMMON_TOKEN) MATCHT(TEQ, &FOLLOW_TEQ_in_oneposition1713);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_TEQ; stream_TEQ->add(stream_TEQ, TEQ121, NULL); }


        	        // cqp.g:265:8: ( NUMBER )?
        	        {
        	            int alt36=2;
        	            switch ( LA(1) )
        	            {
        	                case NUMBER:
        	                	{
        	                		alt36=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt36)
        	            {
        	        	case 1:
        	        	    // cqp.g:265:8: NUMBER
        	        	    {
        	        	        NUMBER122 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_oneposition1715);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleonepositionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, NUMBER122, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        REGEXP123 = (pANTLR3_COMMON_TOKEN) MATCHT(REGEXP, &FOLLOW_REGEXP_in_oneposition1718);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_REGEXP; stream_REGEXP->add(stream_REGEXP, REGEXP123, NULL); }


        	        /* AST REWRITE
        	         * elements          : TEQ, REGEXP, NUMBER
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 265:23: -> ^( LBRACKET[\"[\"] ^( TEQ[\"~\"] ATTR[\"-\"] NUMBER REGEXP ) )
        	        	{
        	        	    // cqp.g:265:26: ^( LBRACKET[\"[\"] ^( TEQ[\"~\"] ATTR[\"-\"] NUMBER REGEXP ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LBRACKET, TOKTEXT("["))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LBRACKET, (pANTLR3_UINT8)"[")
        	        	        #endif

        	        	        , root_1));

        	        	        // cqp.g:265:42: ^( TEQ[\"~\"] ATTR[\"-\"] NUMBER REGEXP )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TEQ, TOKTEXT("~"))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEQ, (pANTLR3_UINT8)"~")
        	        	            #endif

        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 

        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ATTR, TOKTEXT("-"))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTR, (pANTLR3_UINT8)"-")
        	        	            #endif

        	        	            );

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 
        	        	            stream_NUMBER == NULL ? NULL : stream_NUMBER->nextNode(stream_NUMBER)
        	        	            );

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, 
        	        	            stream_REGEXP == NULL ? NULL : stream_REGEXP->nextNode(stream_REGEXP)
        	        	            );

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // cqp.g:266:4: KW_MU
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        KW_MU124 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_MU, &FOLLOW_KW_MU_in_oneposition1743);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) {
        	        KW_MU124_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_MU124));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_MU124_tree);
        	        }

        	        if ( BACKTRACKING==0 )
        	        {
        	            throw EvalQueryException (": Deprecated query syntax: remove the 'MU' keyword from your query");
        	        }


        	    }
        	    break;
        	case 5:
        	    // cqp.g:267:4: mupart
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_mupart_in_oneposition1750);
        	        mupart125=mupart(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleonepositionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, mupart125.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleonepositionEx; /* Prevent compiler warnings */
    ruleonepositionEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_REGEXP != NULL) stream_REGEXP->free(stream_REGEXP);
        if (stream_LBRACKET != NULL) stream_LBRACKET->free(stream_LBRACKET);
        if (stream_RBRACKET != NULL) stream_RBRACKET->free(stream_RBRACKET);
        if (stream_TEQ != NULL) stream_TEQ->free(stream_TEQ);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
        if (stream_attvallist != NULL) stream_attvallist->free(stream_attvallist);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end oneposition */

/**
 * $ANTLR start repopt
 * cqp.g:270:1: repopt : ( STAR -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] ) | PLUS -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] ) | QUEST -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] ) | LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE );
 */
static cqpParser_repopt_return
repopt(pcqpParser ctx)
{
    cqpParser_repopt_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n1;
    pANTLR3_COMMON_TOKEN    n2;
    pANTLR3_COMMON_TOKEN    STAR126;
    pANTLR3_COMMON_TOKEN    PLUS127;
    pANTLR3_COMMON_TOKEN    QUEST128;
    pANTLR3_COMMON_TOKEN    LBRACE129;
    pANTLR3_COMMON_TOKEN    COMMA130;
    pANTLR3_COMMON_TOKEN    RBRACE131;

    pANTLR3_BASE_TREE n1_tree;
    pANTLR3_BASE_TREE n2_tree;
    pANTLR3_BASE_TREE STAR126_tree;
    pANTLR3_BASE_TREE PLUS127_tree;
    pANTLR3_BASE_TREE QUEST128_tree;
    pANTLR3_BASE_TREE LBRACE129_tree;
    pANTLR3_BASE_TREE COMMA130_tree;
    pANTLR3_BASE_TREE RBRACE131_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PLUS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STAR;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RBRACE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LBRACE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUEST;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NUMBER;

    /* Initialize rule variables
     */

    root_0 = NULL;

    n1       = NULL;
    n2       = NULL;
    STAR126       = NULL;
    PLUS127       = NULL;
    QUEST128       = NULL;
    LBRACE129       = NULL;
    COMMA130       = NULL;
    RBRACE131       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    n1_tree   = NULL;
    n2_tree   = NULL;
    STAR126_tree   = NULL;
    PLUS127_tree   = NULL;
    QUEST128_tree   = NULL;
    LBRACE129_tree   = NULL;
    COMMA130_tree   = NULL;
    RBRACE131_tree   = NULL;

    stream_PLUS   = NULL;
    #define CREATE_stream_PLUS  if (stream_PLUS == NULL) {stream_PLUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PLUS"); } 
    stream_STAR   = NULL;
    #define CREATE_stream_STAR  if (stream_STAR == NULL) {stream_STAR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STAR"); } 
    stream_RBRACE   = NULL;
    #define CREATE_stream_RBRACE  if (stream_RBRACE == NULL) {stream_RBRACE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RBRACE"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_LBRACE   = NULL;
    #define CREATE_stream_LBRACE  if (stream_LBRACE == NULL) {stream_LBRACE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LBRACE"); } 
    stream_QUEST   = NULL;
    #define CREATE_stream_QUEST  if (stream_QUEST == NULL) {stream_QUEST = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUEST"); } 
    stream_NUMBER   = NULL;
    #define CREATE_stream_NUMBER  if (stream_NUMBER == NULL) {stream_NUMBER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NUMBER"); } 

    retval.tree  = NULL;

    {
        {
            //  cqp.g:271:2: ( STAR -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] ) | PLUS -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] ) | QUEST -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] ) | LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE )

            ANTLR3_UINT32 alt40;

            alt40=4;

            switch ( LA(1) )
            {
            case STAR:
            	{
            		alt40=1;
            	}
                break;
            case PLUS:
            	{
            		alt40=2;
            	}
                break;
            case QUEST:
            	{
            		alt40=3;
            	}
                break;
            case LBRACE:
            	{
            		alt40=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 40;
                EXCEPTION->state        = 0;


                goto rulerepoptEx;

            }

            switch (alt40)
            {
        	case 1:
        	    // cqp.g:271:4: STAR
        	    {
        	        STAR126 = (pANTLR3_COMMON_TOKEN) MATCHT(STAR, &FOLLOW_STAR_in_repopt1761);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_STAR; stream_STAR->add(stream_STAR, STAR126, NULL); }


        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 271:11: -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] )
        	        	{
        	        	    // cqp.g:271:14: ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"-1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif

        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("0"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"0")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // cqp.g:272:4: PLUS
        	    {
        	        PLUS127 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_repopt1781);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_PLUS; stream_PLUS->add(stream_PLUS, PLUS127, NULL); }


        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 272:11: -> ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] )
        	        	{
        	        	    // cqp.g:272:14: ^( REPOPT[\"RO\"] NUMBER[\"1\"] NUMBER[\"-1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif

        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"1")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // cqp.g:273:4: QUEST
        	    {
        	        QUEST128 = (pANTLR3_COMMON_TOKEN) MATCHT(QUEST, &FOLLOW_QUEST_in_repopt1801);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_QUEST; stream_QUEST->add(stream_QUEST, QUEST128, NULL); }


        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 

        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 273:11: -> ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] )
        	        	{
        	        	    // cqp.g:273:14: ^( REPOPT[\"RO\"] NUMBER[\"0\"] NUMBER[\"1\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        #endif

        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("0"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"0")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("1"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"1")
        	        	        #endif

        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}


        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // cqp.g:274:4: LBRACE n1= NUMBER ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) ) RBRACE
        	    {
        	        LBRACE129 = (pANTLR3_COMMON_TOKEN) MATCHT(LBRACE, &FOLLOW_LBRACE_in_repopt1820);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LBRACE; stream_LBRACE->add(stream_LBRACE, LBRACE129, NULL); }


        	        n1 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_repopt1824);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n1, NULL); }


        	        // cqp.g:275:3: ( COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) ) | -> ^( REPOPT[\"RO\"] $n1 $n1) )
        	        {
        	            int alt39=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt39=1;
        	            	}
        	                break;
        	            case RBRACE:
        	            	{
        	            		alt39=2;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }

        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 39;
        	                EXCEPTION->state        = 0;


        	                goto rulerepoptEx;

        	            }

        	            switch (alt39)
        	            {
        	        	case 1:
        	        	    // cqp.g:275:4: COMMA (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) )
        	        	    {
        	        	        COMMA130 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_repopt1830);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulerepoptEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA130, NULL); }


        	        	        // cqp.g:276:4: (n2= NUMBER -> ^( REPOPT[\"RO\"] $n1 $n2) | -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] ) )
        	        	        {
        	        	            int alt38=2;
        	        	            switch ( LA(1) )
        	        	            {
        	        	            case NUMBER:
        	        	            	{
        	        	            		alt38=1;
        	        	            	}
        	        	                break;
        	        	            case RBRACE:
        	        	            	{
        	        	            		alt38=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (BACKTRACKING>0)
        	        	                {
        	        	                    FAILEDFLAG = ANTLR3_TRUE;
        	        	                    return retval;
        	        	                }

        	        	                CONSTRUCTEX();
        	        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                EXCEPTION->message      = (void *)"";
        	        	                EXCEPTION->decisionNum  = 38;
        	        	                EXCEPTION->state        = 0;


        	        	                goto rulerepoptEx;

        	        	            }

        	        	            switch (alt38)
        	        	            {
        	        	        	case 1:
        	        	        	    // cqp.g:276:6: n2= NUMBER
        	        	        	    {
        	        	        	        n2 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_repopt1840);
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulerepoptEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NUMBER; stream_NUMBER->add(stream_NUMBER, n2, NULL); }


        	        	        	        /* AST REWRITE
        	        	        	         * elements          : n1, n2
        	        	        	         * token labels      : n1, n2
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 

        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n2;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	        	stream_n2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n2", n2);
        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 277:5: -> ^( REPOPT[\"RO\"] $n1 $n2)
        	        	        	        	{
        	        	        	        	    // cqp.g:277:8: ^( REPOPT[\"RO\"] $n1 $n2)
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        	        #endif

        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n2 == NULL ? NULL : stream_n2->nextNode(stream_n2));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}


        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	        	if (stream_n2 != NULL) stream_n2->free(stream_n2); 
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // cqp.g:279:5: 
        	        	        	    {
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : n1, NUMBER
        	        	        	         * token labels      : n1
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 

        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 279:5: -> ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] )
        	        	        	        	{
        	        	        	        	    // cqp.g:279:8: ^( REPOPT[\"RO\"] $n1 NUMBER[\"-1\"] )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        	        #endif

        	        	        	        	        , root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 

        	        	        	        	        #if 1 == 2
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, NUMBER, TOKTEXT("-1"))
        	        	        	        	        #else
        	        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NUMBER, (pANTLR3_UINT8)"-1")
        	        	        	        	        #endif

        	        	        	        	        );

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}


        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // cqp.g:282:4: 
        	        	    {
        	        	        /* AST REWRITE
        	        	         * elements          : n1, n1
        	        	         * token labels      : n1
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 

        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_n1;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_n1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token n1", n1);
        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 282:4: -> ^( REPOPT[\"RO\"] $n1 $n1)
        	        	        	{
        	        	        	    // cqp.g:282:7: ^( REPOPT[\"RO\"] $n1 $n1)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 

        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPOPT, TOKTEXT("RO"))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPOPT, (pANTLR3_UINT8)"RO")
        	        	        	        #endif

        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_n1 == NULL ? NULL : stream_n1->nextNode(stream_n1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}


        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_n1 != NULL) stream_n1->free(stream_n1); 
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        RBRACE131 = (pANTLR3_COMMON_TOKEN) MATCHT(RBRACE, &FOLLOW_RBRACE_in_repopt1910);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerepoptEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RBRACE; stream_RBRACE->add(stream_RBRACE, RBRACE131, NULL); }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulerepoptEx; /* Prevent compiler warnings */
    rulerepoptEx: ;
    retval.stop = LT(-1);


    if ( BACKTRACKING==0 )
    {

    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PLUS != NULL) stream_PLUS->free(stream_PLUS);
        if (stream_STAR != NULL) stream_STAR->free(stream_STAR);
        if (stream_RBRACE != NULL) stream_RBRACE->free(stream_RBRACE);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_LBRACE != NULL) stream_LBRACE->free(stream_LBRACE);
        if (stream_QUEST != NULL) stream_QUEST->free(stream_QUEST);
        if (stream_NUMBER != NULL) stream_NUMBER->free(stream_NUMBER);
    }


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end repopt */

// $ANTLR start synpred1_cqp
static void synpred1_cqp_fragment(pcqpParser ctx )
{
    // cqp.g:156:11: ( LSTRUCT ! structure RSTRUCT !)
    // cqp.g:156:12: LSTRUCT ! structure RSTRUCT !
    {
         MATCHT(LSTRUCT, &FOLLOW_LSTRUCT_in_synpred1_cqp766);
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }


        FOLLOWPUSH(FOLLOW_structure_in_synpred1_cqp769);
        structure(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }


         MATCHT(RSTRUCT, &FOLLOW_RSTRUCT_in_synpred1_cqp771);
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cqpEx;
        }
        if (HASFAILED())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_cqpEx; /* Prevent compiler warnings */
rulesynpred1_cqpEx: ;

}
// $ANTLR end synpred1_cqp
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_cqp(pcqpParser ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_cqp_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
