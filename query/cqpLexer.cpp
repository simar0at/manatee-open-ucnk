/** \file
 *  This C source file was generated by $ANTLR version 3.2 Fedora release 15 (Rawhide) Tue Feb  8 02:02:23 UTC 2011
 *
 *     -  From the grammar source file : cqp.g
 *     -                            On : 2013-05-10 15:01:50
 *     -                 for the lexer : cqpLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

	// Copyright (c) 1999-2010 Pavel Rychly

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cqpLexer.hpp"
/* ----------------------------------------- */


/** String literals used by cqpLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x6D, 0x65, 0x65, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x75, 0x6E, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x77, 0x69, 0x74, 0x68, 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x4D, 0x55,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pcqpLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcqpLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pcqpLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pcqpLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mKW_MEET    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mKW_UNION    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mKW_WITHIN    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mKW_CONTAINING    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mKW_MU    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mKW_FREQ    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mWS_    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mNUMBER    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mNNUMBER    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mATTR    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mREGEXP    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mLPAREN    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mRPAREN    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mLBRACKET    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mRBRACKET    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mLBRACE    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mRBRACE    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mSTAR    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mPLUS    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mQUEST    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mBINOR    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mBINAND    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mDOT    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mCOMMA    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mSEMI    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mCOLON    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mEQ    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mEEQ    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mNOT    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mLEQ    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mGEQ    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mLSTRUCT    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mRSTRUCT    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mSLASH    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mPOSNUM    (pcqpLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pcqpLexer ctx);
static void	cqpLexerFree(pcqpLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
cqpLexerFree  (pcqpLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cqp.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called cqpLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pcqpLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcqpLexer cqpLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return cqpLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called cqpLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pcqpLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcqpLexer cqpLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcqpLexer ctx; // Context structure we will build and return

    ctx = (pcqpLexer) ANTLR3_CALLOC(1, sizeof(cqpLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in cqpLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our cqpLexer interface
     */
    ctx->mKW_MEET	= mKW_MEET;
    ctx->mKW_UNION	= mKW_UNION;
    ctx->mKW_WITHIN	= mKW_WITHIN;
    ctx->mKW_CONTAINING	= mKW_CONTAINING;
    ctx->mKW_MU	= mKW_MU;
    ctx->mKW_FREQ	= mKW_FREQ;
    ctx->mWS_	= mWS_;
    ctx->mNUMBER	= mNUMBER;
    ctx->mNNUMBER	= mNNUMBER;
    ctx->mATTR	= mATTR;
    ctx->mREGEXP	= mREGEXP;
    ctx->mLPAREN	= mLPAREN;
    ctx->mRPAREN	= mRPAREN;
    ctx->mLBRACKET	= mLBRACKET;
    ctx->mRBRACKET	= mRBRACKET;
    ctx->mLBRACE	= mLBRACE;
    ctx->mRBRACE	= mRBRACE;
    ctx->mSTAR	= mSTAR;
    ctx->mPLUS	= mPLUS;
    ctx->mQUEST	= mQUEST;
    ctx->mBINOR	= mBINOR;
    ctx->mBINAND	= mBINAND;
    ctx->mDOT	= mDOT;
    ctx->mCOMMA	= mCOMMA;
    ctx->mSEMI	= mSEMI;
    ctx->mCOLON	= mCOLON;
    ctx->mEQ	= mEQ;
    ctx->mEEQ	= mEEQ;
    ctx->mNOT	= mNOT;
    ctx->mLEQ	= mLEQ;
    ctx->mGEQ	= mGEQ;
    ctx->mLSTRUCT	= mLSTRUCT;
    ctx->mRSTRUCT	= mRSTRUCT;
    ctx->mSLASH	= mSLASH;
    ctx->mPOSNUM	= mPOSNUM;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= cqpLexerFree;

    
    

	 	RECOGNIZER->displayRecognitionError = throwEvalQueryException;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 17:9: ( 'meet' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_MEET
 *
 * Looks to match the characters the constitute the token KW_MEET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_MEET(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_MEET;
       
    
    // cqp.g:17:9: ( 'meet' )
    // cqp.g:17:11: 'meet'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_MEETEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_MEETEx; /* Prevent compiler warnings */
    ruleKW_MEETEx: ;

}
// $ANTLR end KW_MEET

//   Comes from: 18:10: ( 'union' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_UNION
 *
 * Looks to match the characters the constitute the token KW_UNION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_UNION(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_UNION;
       
    
    // cqp.g:18:10: ( 'union' )
    // cqp.g:18:12: 'union'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_UNIONEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_UNIONEx; /* Prevent compiler warnings */
    ruleKW_UNIONEx: ;

}
// $ANTLR end KW_UNION

//   Comes from: 19:11: ( 'within' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_WITHIN
 *
 * Looks to match the characters the constitute the token KW_WITHIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_WITHIN(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_WITHIN;
       
    
    // cqp.g:19:11: ( 'within' )
    // cqp.g:19:13: 'within'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_WITHINEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_WITHINEx; /* Prevent compiler warnings */
    ruleKW_WITHINEx: ;

}
// $ANTLR end KW_WITHIN

//   Comes from: 20:15: ( 'containing' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_CONTAINING
 *
 * Looks to match the characters the constitute the token KW_CONTAINING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_CONTAINING(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_CONTAINING;
       
    
    // cqp.g:20:15: ( 'containing' )
    // cqp.g:20:17: 'containing'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_CONTAININGEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_CONTAININGEx; /* Prevent compiler warnings */
    ruleKW_CONTAININGEx: ;

}
// $ANTLR end KW_CONTAINING

//   Comes from: 21:7: ( 'MU' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_MU
 *
 * Looks to match the characters the constitute the token KW_MU
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_MU(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_MU;
       
    
    // cqp.g:21:7: ( 'MU' )
    // cqp.g:21:9: 'MU'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_MUEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_MUEx; /* Prevent compiler warnings */
    ruleKW_MUEx: ;

}
// $ANTLR end KW_MU

//   Comes from: 22:9: ( 'f' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_FREQ
 *
 * Looks to match the characters the constitute the token KW_FREQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_FREQ(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_FREQ;
       
    
    // cqp.g:22:9: ( 'f' )
    // cqp.g:22:11: 'f'
    {
        MATCHC('f'); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_FREQEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_FREQEx; /* Prevent compiler warnings */
    ruleKW_FREQEx: ;

}
// $ANTLR end KW_FREQ

//   Comes from: 85:5: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS_
 *
 * Looks to match the characters the constitute the token WS_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS_(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS_;
       
    
    // cqp.g:85:5: ( ( ' ' | '\\t' | '\\n' | '\\r' ) )
    // cqp.g:85:9: ( ' ' | '\\t' | '\\n' | '\\r' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWS_Ex;
        }

        {
             SKIP(); 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWS_Ex; /* Prevent compiler warnings */
    ruleWS_Ex: ;

}
// $ANTLR end WS_

//   Comes from: 92:7: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNUMBER(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NUMBER;
       
    
    // cqp.g:92:7: ( ( '0' .. '9' )+ )
    // cqp.g:92:11: ( '0' .. '9' )+
    {
        // cqp.g:92:11: ( '0' .. '9' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1) 
        	{
        	    case 1:
        	        // cqp.g:92:12: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNUMBEREx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 93:8: ( '-' ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NNUMBER
 *
 * Looks to match the characters the constitute the token NNUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNNUMBER(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NNUMBER;
       
    
    // cqp.g:93:8: ( '-' ( '0' .. '9' )+ )
    // cqp.g:93:12: '-' ( '0' .. '9' )+
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleNNUMBEREx;
        }

        // cqp.g:93:16: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2) 
        	{
        	    case 1:
        	        // cqp.g:93:17: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleNNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNNUMBEREx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNNUMBEREx; /* Prevent compiler warnings */
    ruleNNUMBEREx: ;

}
// $ANTLR end NNUMBER

//   Comes from: 95:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ATTR
 *
 * Looks to match the characters the constitute the token ATTR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mATTR(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ATTR;
       
    
    // cqp.g:95:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
    // cqp.g:95:12: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleATTREx;
        }


        // cqp.g:95:36: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*

        for (;;)
        {
            int alt3=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt3=1;
            	}
                break;

            }

            switch (alt3) 
            {
        	case 1:
        	    // cqp.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleATTREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleATTREx; /* Prevent compiler warnings */
    ruleATTREx: ;

}
// $ANTLR end ATTR

//   Comes from: 96:7: ( '\"' ( '\\\\' . | ~ ( '\"' | '\\\\' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start REGEXP
 *
 * Looks to match the characters the constitute the token REGEXP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mREGEXP(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = REGEXP;
       
    
    // cqp.g:96:7: ( '\"' ( '\\\\' . | ~ ( '\"' | '\\\\' ) )* '\"' )
    // cqp.g:96:9: '\"' ( '\\\\' . | ~ ( '\"' | '\\\\' ) )* '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleREGEXPEx;
        }


        // cqp.g:96:13: ( '\\\\' . | ~ ( '\"' | '\\\\' ) )*

        for (;;)
        {
            int alt4=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = LA(1);
                if ( (LA4_0 == '\\') ) 
                {
                    alt4=1;
                }
                else if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '!')) || ((LA4_0 >= '#') && (LA4_0 <= '[')) || ((LA4_0 >= ']') && (LA4_0 <= 0xFFFF))) ) 
                {
                    alt4=2;
                }

            }
            switch (alt4) 
            {
        	case 1:
        	    // cqp.g:96:14: '\\\\' .
        	    {
        	        MATCHC('\\'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleREGEXPEx;
        	        }

        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleREGEXPEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // cqp.g:96:22: ~ ( '\"' | '\\\\' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleREGEXPEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleREGEXPEx;
        }

        {
             
            			//remove surrounding quotes
            			SETTEXT(GETTEXT()->subString(GETTEXT(),1,GETTEXT()->size-2));
            		
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleREGEXPEx; /* Prevent compiler warnings */
    ruleREGEXPEx: ;

}
// $ANTLR end REGEXP

//   Comes from: 102:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLPAREN(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LPAREN;
       
    
    // cqp.g:102:7: ( '(' )
    // cqp.g:102:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleLPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 103:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRPAREN(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RPAREN;
       
    
    // cqp.g:103:7: ( ')' )
    // cqp.g:103:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleRPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 104:9: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACKET
 *
 * Looks to match the characters the constitute the token LBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRACKET(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRACKET;
       
    
    // cqp.g:104:9: ( '[' )
    // cqp.g:104:11: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleLBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLBRACKETEx; /* Prevent compiler warnings */
    ruleLBRACKETEx: ;

}
// $ANTLR end LBRACKET

//   Comes from: 105:9: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACKET
 *
 * Looks to match the characters the constitute the token RBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRACKET(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRACKET;
       
    
    // cqp.g:105:9: ( ']' )
    // cqp.g:105:11: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleRBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRBRACKETEx; /* Prevent compiler warnings */
    ruleRBRACKETEx: ;

}
// $ANTLR end RBRACKET

//   Comes from: 106:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACE
 *
 * Looks to match the characters the constitute the token LBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRACE(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRACE;
       
    
    // cqp.g:106:7: ( '{' )
    // cqp.g:106:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleLBRACEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLBRACEEx; /* Prevent compiler warnings */
    ruleLBRACEEx: ;

}
// $ANTLR end LBRACE

//   Comes from: 107:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACE
 *
 * Looks to match the characters the constitute the token RBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRACE(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRACE;
       
    
    // cqp.g:107:7: ( '}' )
    // cqp.g:107:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleRBRACEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRBRACEEx; /* Prevent compiler warnings */
    ruleRBRACEEx: ;

}
// $ANTLR end RBRACE

//   Comes from: 109:5: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STAR
 *
 * Looks to match the characters the constitute the token STAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTAR(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STAR;
       
    
    // cqp.g:109:5: ( '*' )
    // cqp.g:109:9: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTAREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTAREx; /* Prevent compiler warnings */
    ruleSTAREx: ;

}
// $ANTLR end STAR

//   Comes from: 110:5: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPLUS(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PLUS;
       
    
    // cqp.g:110:5: ( '+' )
    // cqp.g:110:9: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto rulePLUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 111:6: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start QUEST
 *
 * Looks to match the characters the constitute the token QUEST
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mQUEST(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = QUEST;
       
    
    // cqp.g:111:6: ( '?' )
    // cqp.g:111:9: '?'
    {
        MATCHC('?'); 
        if  (HASEXCEPTION())
        {
            goto ruleQUESTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleQUESTEx; /* Prevent compiler warnings */
    ruleQUESTEx: ;

}
// $ANTLR end QUEST

//   Comes from: 113:6: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BINOR
 *
 * Looks to match the characters the constitute the token BINOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBINOR(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BINOR;
       
    
    // cqp.g:113:6: ( '|' )
    // cqp.g:113:9: '|'
    {
        MATCHC('|'); 
        if  (HASEXCEPTION())
        {
            goto ruleBINOREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBINOREx; /* Prevent compiler warnings */
    ruleBINOREx: ;

}
// $ANTLR end BINOR

//   Comes from: 114:7: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BINAND
 *
 * Looks to match the characters the constitute the token BINAND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBINAND(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BINAND;
       
    
    // cqp.g:114:7: ( '&' )
    // cqp.g:114:9: '&'
    {
        MATCHC('&'); 
        if  (HASEXCEPTION())
        {
            goto ruleBINANDEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBINANDEx; /* Prevent compiler warnings */
    ruleBINANDEx: ;

}
// $ANTLR end BINAND

//   Comes from: 115:4: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOT(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOT;
       
    
    // cqp.g:115:4: ( '.' )
    // cqp.g:115:9: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleDOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 116:6: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;
       
    
    // cqp.g:116:6: ( ',' )
    // cqp.g:116:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 117:5: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMI
 *
 * Looks to match the characters the constitute the token SEMI
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMI(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMI;
       
    
    // cqp.g:117:5: ( ';' )
    // cqp.g:117:9: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleSEMIEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMIEx; /* Prevent compiler warnings */
    ruleSEMIEx: ;

}
// $ANTLR end SEMI

//   Comes from: 118:6: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;
       
    
    // cqp.g:118:6: ( ':' )
    // cqp.g:118:9: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 119:3: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQ
 *
 * Looks to match the characters the constitute the token EQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEQ(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EQ;
       
    
    // cqp.g:119:3: ( '=' )
    // cqp.g:119:9: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleEQEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEQEx; /* Prevent compiler warnings */
    ruleEQEx: ;

}
// $ANTLR end EQ

//   Comes from: 120:4: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EEQ
 *
 * Looks to match the characters the constitute the token EEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEEQ(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EEQ;
       
    
    // cqp.g:120:4: ( '==' )
    // cqp.g:120:9: '=='
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleEEQEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEEQEx; /* Prevent compiler warnings */
    ruleEEQEx: ;

}
// $ANTLR end EEQ

//   Comes from: 121:4: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOT
 *
 * Looks to match the characters the constitute the token NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOT(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOT;
       
    
    // cqp.g:121:4: ( '!' )
    // cqp.g:121:9: '!'
    {
        MATCHC('!'); 
        if  (HASEXCEPTION())
        {
            goto ruleNOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNOTEx; /* Prevent compiler warnings */
    ruleNOTEx: ;

}
// $ANTLR end NOT

//   Comes from: 122:4: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEQ
 *
 * Looks to match the characters the constitute the token LEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLEQ(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LEQ;
       
    
    // cqp.g:122:4: ( '<=' )
    // cqp.g:122:9: '<='
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleLEQEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLEQEx; /* Prevent compiler warnings */
    ruleLEQEx: ;

}
// $ANTLR end LEQ

//   Comes from: 123:4: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GEQ
 *
 * Looks to match the characters the constitute the token GEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGEQ(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GEQ;
       
    
    // cqp.g:123:4: ( '>=' )
    // cqp.g:123:9: '>='
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleGEQEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleGEQEx; /* Prevent compiler warnings */
    ruleGEQEx: ;

}
// $ANTLR end GEQ

//   Comes from: 124:8: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LSTRUCT
 *
 * Looks to match the characters the constitute the token LSTRUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLSTRUCT(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LSTRUCT;
       
    
    // cqp.g:124:8: ( '<' )
    // cqp.g:124:9: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleLSTRUCTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLSTRUCTEx; /* Prevent compiler warnings */
    ruleLSTRUCTEx: ;

}
// $ANTLR end LSTRUCT

//   Comes from: 125:8: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RSTRUCT
 *
 * Looks to match the characters the constitute the token RSTRUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRSTRUCT(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RSTRUCT;
       
    
    // cqp.g:125:8: ( '>' )
    // cqp.g:125:9: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleRSTRUCTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRSTRUCTEx; /* Prevent compiler warnings */
    ruleRSTRUCTEx: ;

}
// $ANTLR end RSTRUCT

//   Comes from: 126:6: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SLASH
 *
 * Looks to match the characters the constitute the token SLASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSLASH(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SLASH;
       
    
    // cqp.g:126:6: ( '/' )
    // cqp.g:126:9: '/'
    {
        MATCHC('/'); 
        if  (HASEXCEPTION())
        {
            goto ruleSLASHEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSLASHEx; /* Prevent compiler warnings */
    ruleSLASHEx: ;

}
// $ANTLR end SLASH

//   Comes from: 127:7: ( '#' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POSNUM
 *
 * Looks to match the characters the constitute the token POSNUM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPOSNUM(pcqpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = POSNUM;
       
    
    // cqp.g:127:7: ( '#' )
    // cqp.g:127:9: '#'
    {
        MATCHC('#'); 
        if  (HASEXCEPTION())
        {
            goto rulePOSNUMEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePOSNUMEx; /* Prevent compiler warnings */
    rulePOSNUMEx: ;

}
// $ANTLR end POSNUM

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pcqpLexer ctx)
{
    {
        //  cqp.g:1:8: ( KW_MEET | KW_UNION | KW_WITHIN | KW_CONTAINING | KW_MU | KW_FREQ | WS_ | NUMBER | NNUMBER | ATTR | REGEXP | LPAREN | RPAREN | LBRACKET | RBRACKET | LBRACE | RBRACE | STAR | PLUS | QUEST | BINOR | BINAND | DOT | COMMA | SEMI | COLON | EQ | EEQ | NOT | LEQ | GEQ | LSTRUCT | RSTRUCT | SLASH | POSNUM )
        
        ANTLR3_UINT32 alt5;

        alt5=35;

        switch ( LA(1) ) 
        {
        case 'm':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'e':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt5=10;
        									}
        								    break;

        								default:
        								    alt5=1;}

        							}
        						    break;

        						default:
        						    alt5=10;}

        					}
        				    break;

        				default:
        				    alt5=10;}

        			}
        		    break;

        		default:
        		    alt5=10;}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'n':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt5=10;
        											}
        										    break;

        										default:
        										    alt5=2;}

        									}
        								    break;

        								default:
        								    alt5=10;}

        							}
        						    break;

        						default:
        						    alt5=10;}

        					}
        				    break;

        				default:
        				    alt5=10;}

        			}
        		    break;

        		default:
        		    alt5=10;}

        	}
            break;
        case 'w':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'h':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'n':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=10;
        													}
        												    break;

        												default:
        												    alt5=3;}

        											}
        										    break;

        										default:
        										    alt5=10;}

        									}
        								    break;

        								default:
        								    alt5=10;}

        							}
        						    break;

        						default:
        						    alt5=10;}

        					}
        				    break;

        				default:
        				    alt5=10;}

        			}
        		    break;

        		default:
        		    alt5=10;}

        	}
            break;
        case 'c':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'a':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'i':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'n':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'i':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'n':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'g':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case '0':
        																				case '1':
        																				case '2':
        																				case '3':
        																				case '4':
        																				case '5':
        																				case '6':
        																				case '7':
        																				case '8':
        																				case '9':
        																				case 'A':
        																				case 'B':
        																				case 'C':
        																				case 'D':
        																				case 'E':
        																				case 'F':
        																				case 'G':
        																				case 'H':
        																				case 'I':
        																				case 'J':
        																				case 'K':
        																				case 'L':
        																				case 'M':
        																				case 'N':
        																				case 'O':
        																				case 'P':
        																				case 'Q':
        																				case 'R':
        																				case 'S':
        																				case 'T':
        																				case 'U':
        																				case 'V':
        																				case 'W':
        																				case 'X':
        																				case 'Y':
        																				case 'Z':
        																				case '_':
        																				case 'a':
        																				case 'b':
        																				case 'c':
        																				case 'd':
        																				case 'e':
        																				case 'f':
        																				case 'g':
        																				case 'h':
        																				case 'i':
        																				case 'j':
        																				case 'k':
        																				case 'l':
        																				case 'm':
        																				case 'n':
        																				case 'o':
        																				case 'p':
        																				case 'q':
        																				case 'r':
        																				case 's':
        																				case 't':
        																				case 'u':
        																				case 'v':
        																				case 'w':
        																				case 'x':
        																				case 'y':
        																				case 'z':
        																					{
        																						alt5=10;
        																					}
        																				    break;

        																				default:
        																				    alt5=4;}

        																			}
        																		    break;

        																		default:
        																		    alt5=10;}

        																	}
        																    break;

        																default:
        																    alt5=10;}

        															}
        														    break;

        														default:
        														    alt5=10;}

        													}
        												    break;

        												default:
        												    alt5=10;}

        											}
        										    break;

        										default:
        										    alt5=10;}

        									}
        								    break;

        								default:
        								    alt5=10;}

        							}
        						    break;

        						default:
        						    alt5=10;}

        					}
        				    break;

        				default:
        				    alt5=10;}

        			}
        		    break;

        		default:
        		    alt5=10;}

        	}
            break;
        case 'M':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'U':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt5=10;
        					}
        				    break;

        				default:
        				    alt5=5;}

        			}
        		    break;

        		default:
        		    alt5=10;}

        	}
            break;
        case 'f':
        	{
        		switch ( LA(2) ) 
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt5=10;
        			}
        		    break;

        		default:
        		    alt5=6;}

        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt5=7;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt5=8;
        	}
            break;
        case '-':
        	{
        		alt5=9;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'a':
        case 'b':
        case 'd':
        case 'e':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'v':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt5=10;
        	}
            break;
        case '"':
        	{
        		alt5=11;
        	}
            break;
        case '(':
        	{
        		alt5=12;
        	}
            break;
        case ')':
        	{
        		alt5=13;
        	}
            break;
        case '[':
        	{
        		alt5=14;
        	}
            break;
        case ']':
        	{
        		alt5=15;
        	}
            break;
        case '{':
        	{
        		alt5=16;
        	}
            break;
        case '}':
        	{
        		alt5=17;
        	}
            break;
        case '*':
        	{
        		alt5=18;
        	}
            break;
        case '+':
        	{
        		alt5=19;
        	}
            break;
        case '?':
        	{
        		alt5=20;
        	}
            break;
        case '|':
        	{
        		alt5=21;
        	}
            break;
        case '&':
        	{
        		alt5=22;
        	}
            break;
        case '.':
        	{
        		alt5=23;
        	}
            break;
        case ',':
        	{
        		alt5=24;
        	}
            break;
        case ';':
        	{
        		alt5=25;
        	}
            break;
        case ':':
        	{
        		alt5=26;
        	}
            break;
        case '=':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt5=28;
        			}
        		    break;

        		default:
        		    alt5=27;}

        	}
            break;
        case '!':
        	{
        		alt5=29;
        	}
            break;
        case '<':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt5=30;
        			}
        		    break;

        		default:
        		    alt5=32;}

        	}
            break;
        case '>':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt5=31;
        			}
        		    break;

        		default:
        		    alt5=33;}

        	}
            break;
        case '/':
        	{
        		alt5=34;
        	}
            break;
        case '#':
        	{
        		alt5=35;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 5;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt5) 
        {
    	case 1:
    	    // cqp.g:1:10: KW_MEET
    	    {
    	        /* 1:10: KW_MEET */
    	        mKW_MEET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // cqp.g:1:18: KW_UNION
    	    {
    	        /* 1:18: KW_UNION */
    	        mKW_UNION(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // cqp.g:1:27: KW_WITHIN
    	    {
    	        /* 1:27: KW_WITHIN */
    	        mKW_WITHIN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // cqp.g:1:37: KW_CONTAINING
    	    {
    	        /* 1:37: KW_CONTAINING */
    	        mKW_CONTAINING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // cqp.g:1:51: KW_MU
    	    {
    	        /* 1:51: KW_MU */
    	        mKW_MU(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // cqp.g:1:57: KW_FREQ
    	    {
    	        /* 1:57: KW_FREQ */
    	        mKW_FREQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // cqp.g:1:65: WS_
    	    {
    	        /* 1:65: WS_ */
    	        mWS_(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // cqp.g:1:69: NUMBER
    	    {
    	        /* 1:69: NUMBER */
    	        mNUMBER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // cqp.g:1:76: NNUMBER
    	    {
    	        /* 1:76: NNUMBER */
    	        mNNUMBER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // cqp.g:1:84: ATTR
    	    {
    	        /* 1:84: ATTR */
    	        mATTR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // cqp.g:1:89: REGEXP
    	    {
    	        /* 1:89: REGEXP */
    	        mREGEXP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // cqp.g:1:96: LPAREN
    	    {
    	        /* 1:96: LPAREN */
    	        mLPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // cqp.g:1:103: RPAREN
    	    {
    	        /* 1:103: RPAREN */
    	        mRPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // cqp.g:1:110: LBRACKET
    	    {
    	        /* 1:110: LBRACKET */
    	        mLBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // cqp.g:1:119: RBRACKET
    	    {
    	        /* 1:119: RBRACKET */
    	        mRBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // cqp.g:1:128: LBRACE
    	    {
    	        /* 1:128: LBRACE */
    	        mLBRACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // cqp.g:1:135: RBRACE
    	    {
    	        /* 1:135: RBRACE */
    	        mRBRACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // cqp.g:1:142: STAR
    	    {
    	        /* 1:142: STAR */
    	        mSTAR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // cqp.g:1:147: PLUS
    	    {
    	        /* 1:147: PLUS */
    	        mPLUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // cqp.g:1:152: QUEST
    	    {
    	        /* 1:152: QUEST */
    	        mQUEST(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // cqp.g:1:158: BINOR
    	    {
    	        /* 1:158: BINOR */
    	        mBINOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // cqp.g:1:164: BINAND
    	    {
    	        /* 1:164: BINAND */
    	        mBINAND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // cqp.g:1:171: DOT
    	    {
    	        /* 1:171: DOT */
    	        mDOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // cqp.g:1:175: COMMA
    	    {
    	        /* 1:175: COMMA */
    	        mCOMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // cqp.g:1:181: SEMI
    	    {
    	        /* 1:181: SEMI */
    	        mSEMI(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // cqp.g:1:186: COLON
    	    {
    	        /* 1:186: COLON */
    	        mCOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // cqp.g:1:192: EQ
    	    {
    	        /* 1:192: EQ */
    	        mEQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // cqp.g:1:195: EEQ
    	    {
    	        /* 1:195: EEQ */
    	        mEEQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // cqp.g:1:199: NOT
    	    {
    	        /* 1:199: NOT */
    	        mNOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // cqp.g:1:203: LEQ
    	    {
    	        /* 1:203: LEQ */
    	        mLEQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // cqp.g:1:207: GEQ
    	    {
    	        /* 1:207: GEQ */
    	        mGEQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // cqp.g:1:211: LSTRUCT
    	    {
    	        /* 1:211: LSTRUCT */
    	        mLSTRUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // cqp.g:1:219: RSTRUCT
    	    {
    	        /* 1:219: RSTRUCT */
    	        mRSTRUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // cqp.g:1:227: SLASH
    	    {
    	        /* 1:227: SLASH */
    	        mSLASH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // cqp.g:1:233: POSNUM
    	    {
    	        /* 1:233: POSNUM */
    	        mPOSNUM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
