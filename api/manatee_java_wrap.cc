/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include "concget.hh"
#include "concstat.hh"
#include "cqpeval.hh"
#include "frsop.hh"
#include "subcorp.hh"
#include <finlib/bigram.hh>
#include <finlib/fsstat.hh>
#include <math.h>


#include "concord/concord.hh"


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


class IndexError: public std::exception {
    const std::string _what;
public:
    IndexError (const std::string &where)
        :_what (where + " index out of range") {}
    virtual const char* what () const throw () {return _what.c_str();}
    virtual ~IndexError() throw () {};
};

SWIGINTERN char const *FileAccessError___str__(FileAccessError *self){
            return self->what();
        }
SWIGINTERN char const *AttrNotFound___str__(AttrNotFound *self){
            return self->what();
        }
SWIGINTERN char const *ConcNotFound___str__(ConcNotFound *self){
            return self->what();
        }
SWIGINTERN char const *CorpInfoNotFound___str__(CorpInfoNotFound *self){
            return self->what();
        }
SWIGINTERN bool FastStream_end(FastStream *self){
            return self->peek() >= self->final();
        }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_NumOfPos_Sg__get(std::vector< NumOfPos > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_NumOfPos_Sg__set(std::vector< NumOfPos > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

typedef FastStream DisownFastStream;
typedef RangeStream DisownRangeStream;


const char* version() {
    return MANATEE_VERSION_STR;
}

SWIGINTERN NumOfPos RangeStream_count_rest(RangeStream *self){
            NumOfPos cnt = 0;
            while (!self->end()) {
                cnt++;
                self->next();
            }
            return cnt;
        }
SWIGINTERN int IDIterator___getitem__(IDIterator *self,int array_index){
            int p = self->next();
            if (p < 0)
                throw IndexError ("IDIterator");
            return p;
        }
SWIGINTERN int IDIterator___len__(IDIterator *self){
            return -1;
        }
SWIGINTERN NumOfPos Structure_num_at_pos(Structure *self,Position pos){return self->rng->num_at_pos (pos);}
SWIGINTERN NumOfPos Structure_num_next_pos(Structure *self,Position pos){return self->rng->num_next_pos (pos);}
SWIGINTERN Position Structure_beg(Structure *self,Position n){return self->rng->beg_at(n);}
SWIGINTERN Position Structure_end(Structure *self,Position n){return self->rng->end_at(n);}
SWIGINTERN RangeStream *Structure_whole(Structure *self){return self->rng->whole();}
SWIGINTERN RangeStream *Structure_attr_val(Structure *self,char const *aname,int attr_id){
            return self->rng->part(self->get_attr (aname)->id2poss (attr_id));
        }
SWIGINTERN void Corpus_freq_dist__SWIG_1(Corpus *self,DisownFastStream *r,char const *crit,int limit,Tokens &words,std::vector< NumOfPos > &freqs,std::vector< NumOfPos > &norms){
            self->freq_dist (new Pos2Range(r),crit,limit,words,freqs,norms);
        }
SWIGINTERN FastStream *Corpus_Range2Pos(Corpus *self,DisownRangeStream *r){
            return new BegsOfRStream (r);
        }
SWIGINTERN RangeStream *Corpus_eval_query(Corpus *self,char const *query){
            return self->filter_query (eval_cqpquery 
                                 ((std::string (query) + ';').c_str(), self));
        }
SWIGINTERN FastStream *Corpus_filter_fstream(Corpus *self,DisownFastStream *s){
            return new BegsOfRStream (self->filter_query (new Pos2Range(s)));
        }
SWIGINTERN NumOfPos Corpus_count_rest(Corpus *self,DisownFastStream *s){
            RangeStream *rs = self->filter_query (new Pos2Range(s));
            NumOfPos cnt = 0;
            while (!rs->end()) {
                cnt++;
                rs->next();
            }
            delete rs;
            return cnt;
        }
SWIGINTERN double Corpus_count_ARF(Corpus *self,DisownFastStream *s,NumOfPos freq){
            FastStream *fs = new BegsOfRStream (self->filter_query (new Pos2Range(s)));
            double cnt = compute_ARF (fs, freq, self->size());
            delete fs;
            return cnt;
        }
SWIGINTERN Concordance *new_Concordance__SWIG_4(Corpus *corp,std::string query,ConcIndex sample_size,NumOfPos full_size,ConcIndex inccoll=0){
        query += ';';
        return new Concordance (corp, corp->filter_query
                                (eval_cqpquery (query.c_str(), corp)), inccoll,
                                sample_size, full_size);
    }
SWIGINTERN Concordance *new_Concordance__SWIG_6(Corpus *corp,DisownFastStream *fs,int inccoll=0){
        return new Concordance (corp, corp->filter_query (new Pos2Range (fs)),
                                inccoll);
    }
SWIGINTERN void Concordance_get_linegroup_stat(Concordance *self,std::vector< int > &ids,std::vector< int > &freqs){
        std::map<short int,ConcIndex> lgs;
        self->get_linegroup_stat (lgs);
        ids.clear();
        freqs.clear();
        for (std::map<short int,ConcIndex>::const_iterator i = lgs.begin();
             i != lgs.end(); i++) {
            ids.push_back ((*i).first);
            freqs.push_back ((*i).second);
        }
    }
SWIGINTERN void Concordance_linegroup_sort(Concordance *self,std::vector< int > &ids,std::vector< std::string > &strs){
        std::map<short int,std::string> ordertab;
        std::vector<int>::const_iterator idsi = ids.begin();
        std::vector<std::string>::const_iterator strsi = strs.begin();
        while (idsi != ids.end())
            ordertab[*idsi++] = *strsi++;
        self->linegroup_sort (ordertab);
    }
SWIGINTERN Corpus *Concordance_corp(Concordance *self){return self->corp;}

bool create_subcorpus (const char *subcpath, Corpus *corp, 
                       const char *structname, const char *query) throw
    (FileAccessError, AttrNotFound, CorpInfoNotFound, EvalQueryException)
    {
        Structure *struc = corp->get_struct (structname);
        FastStream *s = eval_cqponepos ((std::string (query) + ';').c_str(), 
                                        struc);
        if (s->peek() == s->final()) {
            delete s;
            return false;
        }
        save_subcorpus (subcpath, s, corp, struc->rng);
        return true;
    }

void find_subcorpora (const char *subcdir, std::vector<std::string> &scs)
    {
        typedef std::map<std::string, std::pair<std::string,std::string> > MS;
        MS temp;
        find_subcorpora (subcdir, temp);
        for (MS::const_iterator i=temp.begin(); i != temp.end(); i++)
            scs.push_back ((*i).first);
    }


struct labstat { int psum, pcount, nsum, ncount; Position pos; };
void estimate_colloc_poss(FastStream *s, std::vector<int> &collposs, int maxcoll) {
    Labels lab;
    std::vector<labstat> stats;
    labstat lstat = {0, 0, 0, 0, 0};
    stats.resize(maxcoll, lstat);
    std::vector <std::pair <int, Position> > colls;
    colls.push_back(std::make_pair (0, s->peek()));
    while (s->peek() < s->final()) {
        s->add_labels(lab);
        for (Labels::iterator it = lab.begin(); it != lab.end(); it++) {
            int labnum = it->first - 1;
            if (!stats[labnum].pos)
                stats[labnum].pos = it->second;
            Position delta = it->second - s->peek();
            if (delta > 0) {
                stats[labnum].psum += delta;
                stats[labnum].pcount++;
            } else {
                stats[labnum].nsum += delta;
                stats[labnum].ncount++;
            }
        }
        lab.clear();
        s->next();
    }
    for (int i = 0; i < stats.size(); i++) {
        if (!stats[i].pcount && !stats[i].ncount)
            continue;
        else if (stats[i].pcount > stats[i].ncount)
            colls.push_back(std::make_pair(floor(((float) stats[i].psum) /
                        stats[i].pcount), stats[i].pos));
        else
            colls.push_back(std::make_pair(floor(((float) stats[i].nsum) /
                        stats[i].ncount), stats[i].pos));
    }
    std::sort(colls.begin(), colls.end());
    for (std::vector <std::pair <int, Position> >::iterator it = colls.begin();
         it != colls.end(); it++)
        collposs.push_back(it->second);
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1FileAccessError(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FileAccessError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FileAccessError *)new FileAccessError((char const *)arg1,(char const *)arg2);
  *(FileAccessError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_FileAccessError_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileAccessError *arg1 = (FileAccessError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileAccessError **)&jarg1; 
  result = (char *)FileAccessError___str__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1FileAccessError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileAccessError *arg1 = (FileAccessError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileAccessError **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1AttrNotFound(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  AttrNotFound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (AttrNotFound *)new AttrNotFound((std::string const &)*arg1);
  *(AttrNotFound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_AttrNotFound_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AttrNotFound *arg1 = (AttrNotFound *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AttrNotFound **)&jarg1; 
  result = (char *)AttrNotFound___str__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1AttrNotFound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AttrNotFound *arg1 = (AttrNotFound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AttrNotFound **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1ConcNotFound(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ConcNotFound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ConcNotFound *)new ConcNotFound((std::string const &)*arg1);
  *(ConcNotFound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_ConcNotFound_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ConcNotFound *arg1 = (ConcNotFound *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConcNotFound **)&jarg1; 
  result = (char *)ConcNotFound___str__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1ConcNotFound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConcNotFound *arg1 = (ConcNotFound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConcNotFound **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1CorpInfoNotFound(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  CorpInfoNotFound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (CorpInfoNotFound *)new CorpInfoNotFound((std::string const &)*arg1);
  *(CorpInfoNotFound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_CorpInfoNotFound_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CorpInfoNotFound *arg1 = (CorpInfoNotFound *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CorpInfoNotFound **)&jarg1; 
  result = (char *)CorpInfoNotFound___str__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1CorpInfoNotFound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CorpInfoNotFound *arg1 = (CorpInfoNotFound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CorpInfoNotFound **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_FastStream_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  result = (Position)(arg1)->next();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_FastStream_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  result = (Position)(arg1)->peek();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_FastStream_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  Position arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  arg2 = (Position)jarg2; 
  result = (Position)(arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_FastStream_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  result = (bool)FastStream_end(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1FastStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FastStream *arg1 = (FastStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FastStream **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1NumVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< NumOfPos > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< NumOfPos > *)new std::vector< NumOfPos >();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< NumOfPos > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1NumVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long long >::size_type arg1 ;
  std::vector< NumOfPos > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long long >::size_type)jarg1; 
  {
    try {
      result = (std::vector< NumOfPos > *)new std::vector< NumOfPos >(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< NumOfPos > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  {
    try {
      result = ((std::vector< NumOfPos > const *)arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  {
    try {
      result = ((std::vector< NumOfPos > const *)arg1)->capacity();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< NumOfPos > const *)arg1)->empty();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< long long >::value_type *) &std_vector_Sl_NumOfPos_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_NumVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_NumOfPos_Sg__set(arg1,arg2,(long long const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1NumVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< NumOfPos > *arg1 = (std::vector< NumOfPos > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< NumOfPos > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1StrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1StrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_StrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1StrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)version();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_IntGenerator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Generator< int > *arg1 = (Generator< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Generator< int > **)&jarg1; 
  {
    try {
      result = (int)(arg1)->next();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_IntGenerator_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Generator< int > *arg1 = (Generator< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Generator< int > **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->end();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1IntGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Generator< int > *arg1 = (Generator< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Generator< int > **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->next();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->end();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1peek_1beg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      result = (Position)(arg1)->peek_beg();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1peek_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      result = (Position)(arg1)->peek_end();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1find_1beg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  Position arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (Position)(arg1)->find_beg(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1find_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  Position arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (Position)(arg1)->find_end(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_RangeStream_1count_1rest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RangeStream *arg1 = (RangeStream *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      result = (NumOfPos)RangeStream_count_rest(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1RangeStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RangeStream *arg1 = (RangeStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RangeStream **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_IDIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IDIterator *arg1 = (IDIterator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDIterator **)&jarg1; 
  {
    try {
      result = (int)(arg1)->next();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_IDIterator_1_1_1getitem_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  IDIterator *arg1 = (IDIterator *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDIterator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)IDIterator___getitem__(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_IDIterator_1_1_1len_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IDIterator *arg1 = (IDIterator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDIterator **)&jarg1; 
  {
    try {
      result = (int)IDIterator___len__(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1IDIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IDIterator *arg1 = (IDIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IDIterator **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_TextIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TextIterator *arg1 = (TextIterator *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TextIterator **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->next();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1TextIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TextIterator *arg1 = (TextIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TextIterator **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1id_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  {
    try {
      result = (int)(arg1)->id_range();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1id2str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)(arg1)->id2str(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1str2id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)(arg1)->str2id((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1pos2id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  Position arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (int)(arg1)->pos2id(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1pos2str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  Position arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (char *)(arg1)->pos2str(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1posat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  Position arg2 ;
  IDIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (IDIterator *)(arg1)->posat(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(IDIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1textat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  Position arg2 ;
  TextIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (TextIterator *)(arg1)->textat(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(TextIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1id2poss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  int arg2 ;
  FastStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (FastStream *)(arg1)->id2poss(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(FastStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1regexp2poss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  FastStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (FastStream *)(arg1)->regexp2poss((char const *)arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(FastStream **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1regexp2ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  Generator< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (Generator< int > *)(arg1)->regexp2ids((char const *)arg2,arg3,(char const *)arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Generator< int > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1regexp2ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Generator< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (Generator< int > *)(arg1)->regexp2ids((char const *)arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Generator< int > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1freq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  int arg2 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (NumOfPos)(arg1)->freq(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1norm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  int arg2 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (NumOfPos)(arg1)->norm(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_PosAttr_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PosAttr *arg1 = (PosAttr *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PosAttr **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1PosAttr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PosAttr *arg1 = (PosAttr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PosAttr **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_findPosAttr(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  PosAttr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      try {
        result = (PosAttr *)findPosAttr((char const *)arg1,(char const *)arg2);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return 0; 
      }
      catch(CorpInfoNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ CorpInfoNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(PosAttr **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1get_1attr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  char *arg2 = (char *) 0 ;
  PosAttr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      try {
        result = (PosAttr *)(arg1)->get_attr((char const *)arg2);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(PosAttr **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1num_1at_1pos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  Position arg2 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (NumOfPos)Structure_num_at_pos(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1num_1next_1pos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  Position arg2 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (NumOfPos)Structure_num_next_pos(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1beg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  Position arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (Position)Structure_beg(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  Position arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (Position)Structure_end(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1whole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  {
    try {
      result = (RangeStream *)Structure_whole(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Structure_1attr_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (RangeStream *)Structure_attr_val(arg1,(char const *)arg2,arg3);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1Structure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Structure *arg1 = (Structure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Structure **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Corpus(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Corpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      try {
        result = (Corpus *)new Corpus((char const *)arg1);
      }
      catch(CorpInfoNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ CorpInfoNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Corpus **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1search_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->search_size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1attr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  PosAttr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      try {
        result = (PosAttr *)(arg1)->get_attr((char const *)arg2);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(PosAttr **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1struct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  Structure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      try {
        result = (Structure *)(arg1)->get_struct((char const *)arg2);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Structure **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (arg1)->get_info();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1conf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->get_conf((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1conffile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (arg1)->get_conffile();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1confpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (arg1)->get_confpath();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1set_1default_1attr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      try {
        (arg1)->set_default_attr((char const *)arg2);
      }
      catch(AttrNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ AttrNotFound exception thrown");
        return ; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1filter_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownRangeStream *arg2 = (DisownRangeStream *) 0 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownRangeStream **)&jarg2; 
  {
    try {
      result = (RangeStream *)(arg1)->filter_query(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1get_1sizes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      result = (arg1)->get_sizes();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1compute_1docf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  FastStream *arg2 = (FastStream *) 0 ;
  RangeStream *arg3 = (RangeStream *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(FastStream **)&jarg2; 
  arg3 = *(RangeStream **)&jarg3; 
  {
    try {
      result = (NumOfPos)(arg1)->compute_docf(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1freq_1dist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  Corpus *arg1 = (Corpus *) 0 ;
  DisownRangeStream *arg2 = (DisownRangeStream *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  Tokens *arg5 = 0 ;
  std::vector< NumOfPos > *arg6 = 0 ;
  std::vector< NumOfPos > *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownRangeStream **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  arg5 = *(Tokens **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tokens & reference is null");
    return ;
  } 
  arg6 = *(std::vector< NumOfPos > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< NumOfPos > & reference is null");
    return ;
  } 
  arg7 = *(std::vector< NumOfPos > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< NumOfPos > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->freq_dist(arg2,(char const *)arg3,arg4,*arg5,*arg6,*arg7);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1freq_1dist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  Tokens *arg5 = 0 ;
  std::vector< NumOfPos > *arg6 = 0 ;
  std::vector< NumOfPos > *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  arg5 = *(Tokens **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tokens & reference is null");
    return ;
  } 
  arg6 = *(std::vector< NumOfPos > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< NumOfPos > & reference is null");
    return ;
  } 
  arg7 = *(std::vector< NumOfPos > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< NumOfPos > & reference is null");
    return ;
  } 
  {
    try {
      Corpus_freq_dist__SWIG_1(arg1,arg2,(char const *)arg3,arg4,*arg5,*arg6,*arg7);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1Range2Pos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownRangeStream *arg2 = (DisownRangeStream *) 0 ;
  FastStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownRangeStream **)&jarg2; 
  {
    try {
      result = (FastStream *)Corpus_Range2Pos(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(FastStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1eval_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (RangeStream *)Corpus_eval_query(arg1,(char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1filter_1fstream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  FastStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  {
    try {
      result = (FastStream *)Corpus_filter_fstream(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(FastStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1count_1rest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  {
    try {
      result = (NumOfPos)Corpus_count_rest(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_sketchengine_manatee_manateeJNI_Corpus_1count_1ARF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  NumOfPos arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  arg3 = (NumOfPos)jarg3; 
  {
    try {
      result = (double)Corpus_count_ARF(arg1,arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1Corpus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Corpus *arg1 = (Corpus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Corpus **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      try {
        result = (Concordance *)new Concordance(arg1,(char const *)arg2);
      }
      catch(FileAccessError &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ FileAccessError exception thrown");
        return 0; 
      }
      catch(ConcNotFound &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ConcNotFound exception thrown");
        return 0; 
      }
      
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  RangeStream *arg2 = (RangeStream *) 0 ;
  ConcIndex arg3 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(RangeStream **)&jarg2; 
  arg3 = (ConcIndex)jarg3; 
  {
    try {
      result = (Concordance *)new Concordance(arg1,arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  RangeStream *arg2 = (RangeStream *) 0 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(RangeStream **)&jarg2; 
  {
    try {
      result = (Concordance *)new Concordance(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Concordance *arg1 = 0 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Concordance & reference is null");
    return 0;
  } 
  {
    try {
      result = (Concordance *)new Concordance(*arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->save((char const *)arg2,arg3,arg4,arg5);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->save((char const *)arg2,arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1save_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->save((char const *)arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1save_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->save((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (ConcIndex)(arg1)->size();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1numofcolls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (int)(arg1)->numofcolls();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1viewsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (ConcIndex)(arg1)->viewsize();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1fullsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (ConcIndex)(arg1)->fullsize();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1finished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->finished();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Concordance *arg1 = (Concordance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      (arg1)->sync();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1collocation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6, jboolean jarg7) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->set_collocation(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1collocation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = (int)jarg6; 
  {
    try {
      (arg1)->set_collocation(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1sort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->sort((char const *)arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1sort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->sort((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1relfreq_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->relfreq_sort((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1sorted_1view(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Concordance *arg1 = (Concordance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_sorted_view(*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1reduce_1lines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->reduce_lines((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1delete_1pnfilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->delete_pnfilter(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1swap_1kwic_1coll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->swap_kwic_coll(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1extend_1kwic_1coll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->extend_kwic_coll(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1sort_1idx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  Tokens *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(Tokens **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tokens & reference is null");
    return ;
  } 
  arg4 = *(std::vector< int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->sort_idx((char const *)arg2,*arg3,*arg4,arg5);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1sort_1idx_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  Tokens *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(Tokens **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tokens & reference is null");
    return ;
  } 
  arg4 = *(std::vector< int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sort_idx((char const *)arg2,*arg3,*arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1distribution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  Concordance *arg1 = (Concordance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->distribution(*arg2,*arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1compute_1ARF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (double)(arg1)->compute_ARF();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1linegroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (ConcIndex)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_linegroup(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1linegroup_1globally(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_linegroup_globally(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1linegroup_1at_1pos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  Position arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (Position)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->set_linegroup_at_pos(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1set_1linegroup_1from_1conc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Concordance *arg1 = (Concordance *) 0 ;
  Concordance *arg2 = (Concordance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(Concordance **)&jarg2; 
  {
    try {
      (arg1)->set_linegroup_from_conc(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1get_1new_1linegroup_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (int)(arg1)->get_new_linegroup_id();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1delete_1linegroups_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->delete_linegroups((char const *)arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1delete_1linegroups_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->delete_linegroups((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1begs_1FS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  FastStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (FastStream *)(arg1)->begs_FS();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(FastStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1RS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  bool arg2 ;
  ConcIndex arg3 ;
  ConcIndex arg4 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ConcIndex)jarg3; 
  arg4 = (ConcIndex)jarg4; 
  {
    try {
      result = (RangeStream *)(arg1)->RS(arg2,arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1RS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  bool arg2 ;
  ConcIndex arg3 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ConcIndex)jarg3; 
  {
    try {
      result = (RangeStream *)(arg1)->RS(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1RS_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  bool arg2 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (RangeStream *)(arg1)->RS(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1RS_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  RangeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (RangeStream *)(arg1)->RS();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(RangeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1shuffle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Concordance *arg1 = (Concordance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      (arg1)->shuffle();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1beg_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (ConcIndex)jarg2; 
  {
    try {
      result = (Position)(arg1)->beg_at(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1end_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  ConcIndex arg2 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = (ConcIndex)jarg2; 
  {
    try {
      result = (Position)(arg1)->end_at(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1switch_1aligned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->switch_aligned((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1get_1aligned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Concordance *arg1 = (Concordance *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->get_aligned(*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1add_1aligned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->add_aligned((char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string arg2 ;
  ConcIndex arg3 ;
  NumOfPos arg4 ;
  ConcIndex arg5 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ConcIndex)jarg3; 
  arg4 = (NumOfPos)jarg4; 
  arg5 = (ConcIndex)jarg5; 
  {
    try {
      result = (Concordance *)new_Concordance__SWIG_4(arg1,arg2,arg3,arg4,arg5);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  std::string arg2 ;
  ConcIndex arg3 ;
  NumOfPos arg4 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ConcIndex)jarg3; 
  arg4 = (NumOfPos)jarg4; 
  {
    try {
      result = (Concordance *)new_Concordance__SWIG_4(arg1,arg2,arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  int arg3 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (Concordance *)new_Concordance__SWIG_6(arg1,arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1Concordance_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownFastStream *arg2 = (DisownFastStream *) 0 ;
  Concordance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownFastStream **)&jarg2; 
  {
    try {
      result = (Concordance *)new_Concordance__SWIG_6(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Concordance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1get_1linegroup_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Concordance *arg1 = (Concordance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  {
    try {
      Concordance_get_linegroup_stat(arg1,*arg2,*arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1linegroup_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Concordance *arg1 = (Concordance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  {
    try {
      Concordance_linegroup_sort(arg1,*arg2,*arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_Concordance_1corp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  Corpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      result = (Corpus *)Concordance_corp(arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Corpus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1Concordance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Concordance *arg1 = (Concordance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Concordance **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1KWICLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jint jarg9) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownRangeStream *arg2 = (DisownRangeStream *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  KWICLines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownRangeStream **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (int)jarg9; 
  {
    try {
      result = (KWICLines *)new KWICLines(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(KWICLines **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1KWICLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  DisownRangeStream *arg2 = (DisownRangeStream *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  KWICLines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = *(DisownRangeStream **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  {
    try {
      result = (KWICLines *)new KWICLines(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(KWICLines **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1nextcontext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->nextcontext();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1nextline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->nextline();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  ConcIndex arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  arg2 = (ConcIndex)jarg2; 
  {
    try {
      result = (bool)(arg1)->skip(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1pos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (Position)(arg1)->get_pos();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1kwiclen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (int)(arg1)->get_kwiclen();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1ctxbeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (Position)(arg1)->get_ctxbeg();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1ctxend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (Position)(arg1)->get_ctxend();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1ref_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (arg1)->get_ref_list();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1refs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (arg1)->get_refs();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (arg1)->get_left();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1kwic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (arg1)->get_kwic();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (arg1)->get_right();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_KWICLines_1get_1linegroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  KWICLines *arg1 = (KWICLines *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      result = (int)(arg1)->get_linegroup();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1KWICLines(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  KWICLines *arg1 = (KWICLines *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KWICLines **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1CollocItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jlong jarg4, jlong jarg5, jint jarg6, jint jarg7, jint jarg8) {
  jlong jresult = 0 ;
  Concordance *arg1 = (Concordance *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  NumOfPos arg4 ;
  NumOfPos arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  CollocItems *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Concordance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (NumOfPos)jarg4; 
  arg5 = (NumOfPos)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  {
    try {
      result = (CollocItems *)new CollocItems(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(CollocItems **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CollocItems *arg1 = (CollocItems *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      (arg1)->next();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1eos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CollocItems *arg1 = (CollocItems *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->eos();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1get_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CollocItems *arg1 = (CollocItems *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->get_item();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1get_1freq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CollocItems *arg1 = (CollocItems *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->get_freq();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1get_1cnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CollocItems *arg1 = (CollocItems *) 0 ;
  NumOfPos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      result = (NumOfPos)(arg1)->get_cnt();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_sketchengine_manatee_manateeJNI_CollocItems_1get_1bgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jdouble jresult = 0 ;
  CollocItems *arg1 = (CollocItems *) 0 ;
  char arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollocItems **)&jarg1; 
  arg2 = (char)jarg2; 
  {
    try {
      result = (double)(arg1)->get_bgr(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1CollocItems(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CollocItems *arg1 = (CollocItems *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CollocItems **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1CorpRegion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  CorpRegion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (CorpRegion *)new CorpRegion(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(CorpRegion **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1CorpRegion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CorpRegion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (CorpRegion *)new CorpRegion(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(CorpRegion **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_CorpRegion_1region_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jchar jarg4, jchar jarg5) {
  jlong jresult = 0 ;
  CorpRegion *arg1 = (CorpRegion *) 0 ;
  Position arg2 ;
  Position arg3 ;
  char arg4 ;
  char arg5 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CorpRegion **)&jarg1; 
  arg2 = (Position)jarg2; 
  arg3 = (Position)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char)jarg5; 
  {
    try {
      result = (arg1)->region(arg2,arg3,arg4,arg5);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_CorpRegion_1region_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  CorpRegion *arg1 = (CorpRegion *) 0 ;
  Position arg2 ;
  Position arg3 ;
  char arg4 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CorpRegion **)&jarg1; 
  arg2 = (Position)jarg2; 
  arg3 = (Position)jarg3; 
  arg4 = (char)jarg4; 
  {
    try {
      result = (arg1)->region(arg2,arg3,arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_CorpRegion_1region_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  CorpRegion *arg1 = (CorpRegion *) 0 ;
  Position arg2 ;
  Position arg3 ;
  Tokens result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CorpRegion **)&jarg1; 
  arg2 = (Position)jarg2; 
  arg3 = (Position)jarg3; 
  {
    try {
      result = (arg1)->region(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(Tokens **)&jresult = new Tokens((const Tokens &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1CorpRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CorpRegion *arg1 = (CorpRegion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CorpRegion **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1SubCorpus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Corpus *arg1 = (Corpus *) 0 ;
  char *arg2 = (char *) 0 ;
  SubCorpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Corpus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (SubCorpus *)new SubCorpus(arg1,(char const *)arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(SubCorpus **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1SubCorpus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubCorpus *arg1 = (SubCorpus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubCorpus **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_sketchengine_manatee_manateeJNI_create_1subcorpus(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Corpus *arg2 = (Corpus *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(Corpus **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (bool)create_subcorpus((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_find_1subcorpora(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  char *arg1 = (char *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return ;
  } 
  {
    try {
      find_subcorpora((char const *)arg1,*arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_new_1map_1int_1sort_1bigrams(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  map_int_sort_bigrams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (map_int_sort_bigrams *)new map_int_sort_bigrams((char const *)arg1);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  *(map_int_sort_bigrams **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_map_1int_1sort_1bigrams_1maxid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  map_int_sort_bigrams *arg1 = (map_int_sort_bigrams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(map_int_sort_bigrams **)&jarg1; 
  {
    try {
      result = (int)(arg1)->maxid();
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_map_1int_1sort_1bigrams_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  map_int_sort_bigrams *arg1 = (map_int_sort_bigrams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(map_int_sort_bigrams **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)(arg1)->count(arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sketchengine_manatee_manateeJNI_map_1int_1sort_1bigrams_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  map_int_sort_bigrams *arg1 = (map_int_sort_bigrams *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(map_int_sort_bigrams **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->value(arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_delete_1map_1int_1sort_1bigrams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  map_int_sort_bigrams *arg1 = (map_int_sort_bigrams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(map_int_sort_bigrams **)&jarg1; 
  {
    try {
      delete arg1;
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_sketchengine_manatee_manateeJNI_compute_1ARF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  NumOfPos arg2 ;
  Position arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  arg2 = (NumOfPos)jarg2; 
  arg3 = (Position)jarg3; 
  {
    try {
      result = (double)compute_ARF(arg1,arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_sketchengine_manatee_manateeJNI_compute_1fALD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  FastStream *arg1 = (FastStream *) 0 ;
  Position arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FastStream **)&jarg1; 
  arg2 = (Position)jarg2; 
  {
    try {
      result = (double)compute_fALD(arg1,arg2);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return 0; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sketchengine_manatee_manateeJNI_estimate_1colloc_1poss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  FastStream *arg1 = (FastStream *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FastStream **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      estimate_colloc_poss(arg1,*arg2,arg3);
    }
    catch (IndexError &e) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, (char *)e.what()); return ; 
      };
    }
    catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, (char *)e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_sketchengine_manatee_manateeJNI_SubCorpus_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Corpus **)&baseptr = *(SubCorpus **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

