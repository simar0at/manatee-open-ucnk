# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package manatee;
use base qw(Exporter);
use base qw(DynaLoader);
package manateec;
bootstrap manatee;
package manatee;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package manatee;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package manatee;

*version = *manateec::version;
*findPosAttr = *manateec::findPosAttr;
*create_subcorpus = *manateec::create_subcorpus;
*find_subcorpora = *manateec::find_subcorpora;
*compute_ARF = *manateec::compute_ARF;
*compute_fALD = *manateec::compute_fALD;
*estimate_colloc_poss = *manateec::estimate_colloc_poss;

############# Class : manatee::FileAccessError ##############

package manatee::FileAccessError;
use overload
    '""' => sub { $_[0]->__str__()},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_FileAccessError(@_);
    bless $self, $pkg if defined($self);
}

*__str__ = *manateec::FileAccessError___str__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_FileAccessError($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::AttrNotFound ##############

package manatee::AttrNotFound;
use overload
    '""' => sub { $_[0]->__str__()},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_AttrNotFound(@_);
    bless $self, $pkg if defined($self);
}

*__str__ = *manateec::AttrNotFound___str__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_AttrNotFound($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::ConcNotFound ##############

package manatee::ConcNotFound;
use overload
    '""' => sub { $_[0]->__str__()},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_ConcNotFound(@_);
    bless $self, $pkg if defined($self);
}

*__str__ = *manateec::ConcNotFound___str__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_ConcNotFound($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::CorpInfoNotFound ##############

package manatee::CorpInfoNotFound;
use overload
    '""' => sub { $_[0]->__str__()},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_CorpInfoNotFound(@_);
    bless $self, $pkg if defined($self);
}

*__str__ = *manateec::CorpInfoNotFound___str__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_CorpInfoNotFound($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::FastStream ##############

package manatee::FastStream;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*next = *manateec::FastStream_next;
*peek = *manateec::FastStream_peek;
*find = *manateec::FastStream_find;
*end = *manateec::FastStream_end;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_FastStream($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::IntVector ##############

package manatee::IntVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_IntVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *manateec::IntVector_size;
*empty = *manateec::IntVector_empty;
*clear = *manateec::IntVector_clear;
*push = *manateec::IntVector_push;
*pop = *manateec::IntVector_pop;
*get = *manateec::IntVector_get;
*set = *manateec::IntVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_IntVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::NumVector ##############

package manatee::NumVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_NumVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *manateec::NumVector_size;
*empty = *manateec::NumVector_empty;
*clear = *manateec::NumVector_clear;
*push = *manateec::NumVector_push;
*pop = *manateec::NumVector_pop;
*get = *manateec::NumVector_get;
*set = *manateec::NumVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_NumVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::StrVector ##############

package manatee::StrVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_StrVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *manateec::StrVector_size;
*empty = *manateec::StrVector_empty;
*clear = *manateec::StrVector_clear;
*push = *manateec::StrVector_push;
*pop = *manateec::StrVector_pop;
*get = *manateec::StrVector_get;
*set = *manateec::StrVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_StrVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::IntGenerator ##############

package manatee::IntGenerator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*next = *manateec::IntGenerator_next;
*end = *manateec::IntGenerator_end;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_IntGenerator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::RangeStream ##############

package manatee::RangeStream;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*next = *manateec::RangeStream_next;
*end = *manateec::RangeStream_end;
*peek_beg = *manateec::RangeStream_peek_beg;
*peek_end = *manateec::RangeStream_peek_end;
*find_beg = *manateec::RangeStream_find_beg;
*find_end = *manateec::RangeStream_find_end;
*count_rest = *manateec::RangeStream_count_rest;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_RangeStream($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::IDIterator ##############

package manatee::IDIterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*next = *manateec::IDIterator_next;
*__getitem__ = *manateec::IDIterator___getitem__;
*__len__ = *manateec::IDIterator___len__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_IDIterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::TextIterator ##############

package manatee::TextIterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*next = *manateec::TextIterator_next;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_TextIterator($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::PosAttr ##############

package manatee::PosAttr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*id_range = *manateec::PosAttr_id_range;
*id2str = *manateec::PosAttr_id2str;
*str2id = *manateec::PosAttr_str2id;
*pos2id = *manateec::PosAttr_pos2id;
*pos2str = *manateec::PosAttr_pos2str;
*posat = *manateec::PosAttr_posat;
*textat = *manateec::PosAttr_textat;
*id2poss = *manateec::PosAttr_id2poss;
*regexp2poss = *manateec::PosAttr_regexp2poss;
*regexp2ids = *manateec::PosAttr_regexp2ids;
*freq = *manateec::PosAttr_freq;
*norm = *manateec::PosAttr_norm;
*size = *manateec::PosAttr_size;
*swig_name_get = *manateec::PosAttr_name_get;
*swig_name_set = *manateec::PosAttr_name_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_PosAttr($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::Structure ##############

package manatee::Structure;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*size = *manateec::Structure_size;
*get_attr = *manateec::Structure_get_attr;
*swig_name_get = *manateec::Structure_name_get;
*swig_name_set = *manateec::Structure_name_set;
*num_at_pos = *manateec::Structure_num_at_pos;
*num_next_pos = *manateec::Structure_num_next_pos;
*beg = *manateec::Structure_beg;
*end = *manateec::Structure_end;
*whole = *manateec::Structure_whole;
*attr_val = *manateec::Structure_attr_val;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_Structure($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::Corpus ##############

package manatee::Corpus;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_Corpus(@_);
    bless $self, $pkg if defined($self);
}

*size = *manateec::Corpus_size;
*search_size = *manateec::Corpus_search_size;
*get_attr = *manateec::Corpus_get_attr;
*get_struct = *manateec::Corpus_get_struct;
*get_info = *manateec::Corpus_get_info;
*get_conf = *manateec::Corpus_get_conf;
*get_conffile = *manateec::Corpus_get_conffile;
*get_confpath = *manateec::Corpus_get_confpath;
*set_default_attr = *manateec::Corpus_set_default_attr;
*filter_query = *manateec::Corpus_filter_query;
*get_sizes = *manateec::Corpus_get_sizes;
*compute_docf = *manateec::Corpus_compute_docf;
*freq_dist = *manateec::Corpus_freq_dist;
*Range2Pos = *manateec::Corpus_Range2Pos;
*eval_query = *manateec::Corpus_eval_query;
*filter_fstream = *manateec::Corpus_filter_fstream;
*count_rest = *manateec::Corpus_count_rest;
*count_ARF = *manateec::Corpus_count_ARF;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_Corpus($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::Concordance ##############

package manatee::Concordance;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
*save = *manateec::Concordance_save;
*size = *manateec::Concordance_size;
*numofcolls = *manateec::Concordance_numofcolls;
*viewsize = *manateec::Concordance_viewsize;
*fullsize = *manateec::Concordance_fullsize;
*finished = *manateec::Concordance_finished;
*sync = *manateec::Concordance_sync;
*set_collocation = *manateec::Concordance_set_collocation;
*sort = *manateec::Concordance_sort;
*relfreq_sort = *manateec::Concordance_relfreq_sort;
*set_sorted_view = *manateec::Concordance_set_sorted_view;
*reduce_lines = *manateec::Concordance_reduce_lines;
*delete_pnfilter = *manateec::Concordance_delete_pnfilter;
*swap_kwic_coll = *manateec::Concordance_swap_kwic_coll;
*extend_kwic_coll = *manateec::Concordance_extend_kwic_coll;
*sort_idx = *manateec::Concordance_sort_idx;
*distribution = *manateec::Concordance_distribution;
*compute_ARF = *manateec::Concordance_compute_ARF;
*set_linegroup = *manateec::Concordance_set_linegroup;
*set_linegroup_globally = *manateec::Concordance_set_linegroup_globally;
*set_linegroup_at_pos = *manateec::Concordance_set_linegroup_at_pos;
*set_linegroup_from_conc = *manateec::Concordance_set_linegroup_from_conc;
*get_new_linegroup_id = *manateec::Concordance_get_new_linegroup_id;
*delete_linegroups = *manateec::Concordance_delete_linegroups;
*begs_FS = *manateec::Concordance_begs_FS;
*RS = *manateec::Concordance_RS;
*shuffle = *manateec::Concordance_shuffle;
*beg_at = *manateec::Concordance_beg_at;
*end_at = *manateec::Concordance_end_at;
*switch_aligned = *manateec::Concordance_switch_aligned;
*get_aligned = *manateec::Concordance_get_aligned;
*add_aligned = *manateec::Concordance_add_aligned;
sub new {
    my $pkg = shift;
    my $self = manateec::new_Concordance(@_);
    bless $self, $pkg if defined($self);
}

*get_linegroup_stat = *manateec::Concordance_get_linegroup_stat;
*linegroup_sort = *manateec::Concordance_linegroup_sort;
*corp = *manateec::Concordance_corp;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_Concordance($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::KWICLines ##############

package manatee::KWICLines;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_KWICLines(@_);
    bless $self, $pkg if defined($self);
}

*nextcontext = *manateec::KWICLines_nextcontext;
*nextline = *manateec::KWICLines_nextline;
*skip = *manateec::KWICLines_skip;
*get_pos = *manateec::KWICLines_get_pos;
*get_kwiclen = *manateec::KWICLines_get_kwiclen;
*get_ctxbeg = *manateec::KWICLines_get_ctxbeg;
*get_ctxend = *manateec::KWICLines_get_ctxend;
*get_ref_list = *manateec::KWICLines_get_ref_list;
*get_refs = *manateec::KWICLines_get_refs;
*get_left = *manateec::KWICLines_get_left;
*get_kwic = *manateec::KWICLines_get_kwic;
*get_right = *manateec::KWICLines_get_right;
*get_linegroup = *manateec::KWICLines_get_linegroup;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_KWICLines($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::CollocItems ##############

package manatee::CollocItems;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_CollocItems(@_);
    bless $self, $pkg if defined($self);
}

*next = *manateec::CollocItems_next;
*eos = *manateec::CollocItems_eos;
*get_item = *manateec::CollocItems_get_item;
*get_freq = *manateec::CollocItems_get_freq;
*get_cnt = *manateec::CollocItems_get_cnt;
*get_bgr = *manateec::CollocItems_get_bgr;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_CollocItems($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::CorpRegion ##############

package manatee::CorpRegion;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_CorpRegion(@_);
    bless $self, $pkg if defined($self);
}

*region = *manateec::CorpRegion_region;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_CorpRegion($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::SubCorpus ##############

package manatee::SubCorpus;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee::Corpus manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_SubCorpus(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_SubCorpus($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : manatee::map_int_sort_bigrams ##############

package manatee::map_int_sort_bigrams;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( manatee );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = manateec::new_map_int_sort_bigrams(@_);
    bless $self, $pkg if defined($self);
}

*maxid = *manateec::map_int_sort_bigrams_maxid;
*count = *manateec::map_int_sort_bigrams_count;
*value = *manateec::map_int_sort_bigrams_value;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        manateec::delete_map_int_sort_bigrams($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package manatee;

1;
