/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : corpconf.g
 *     -                            On : 2015-04-08 21:26:46
 *     -                 for the lexer : corpconfLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

// Copyright (c) 1999-2013  Pavel Rychly, Milos Jakubicek

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "corpconfLexer.hh"
/* ----------------------------------------- */


/** String literals used by corpconfLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x41, 0x54,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x50, 0x52, 0x4F, 0x43, 0x45, 0x53, 0x53,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45,  ANTLR3_STRING_TERMINATOR};





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pcorpconfLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcorpconfLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pcorpconfLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pcorpconfLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER
#undef	    RULEMEMO
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE 
 void
	mT__11    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mT__12    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mT__13    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mT__14    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mWS_    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mSTR    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mNL    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mATTR    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mPATH    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mLBRACE    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mRBRACE    (pcorpconfLexer ctx);
static ANTLR3_INLINE 
 void
	mTokens    (pcorpconfLexer ctx);
static void	corpconfLexerFree(pcorpconfLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



	char paraphrase[100];


static void
corpconfLexerFree  (pcorpconfLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

static void
corpconfLexerReset (pcorpconfLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "corpconf.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called corpconfLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pcorpconfLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcorpconfLexer corpconfLexerNew
(
pANTLR3_INPUT_STREAM
 instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return corpconfLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called corpconfLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pcorpconfLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcorpconfLexer corpconfLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcorpconfLexer ctx; // Context structure we will build and return

    ctx = (pcorpconfLexer) ANTLR3_CALLOC(1, sizeof(corpconfLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in corpconfLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our corpconfLexer interface
     */
    ctx->mT__11	= mT__11;
    ctx->mT__12	= mT__12;
    ctx->mT__13	= mT__13;
    ctx->mT__14	= mT__14;
    ctx->mWS_	= mWS_;
    ctx->mSTR	= mSTR;
    ctx->mNL	= mNL;
    ctx->mATTR	= mATTR;
    ctx->mPATH	= mPATH;
    ctx->mLBRACE	= mLBRACE;
    ctx->mRBRACE	= mRBRACE;
    ctx->mTokens	= mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= corpconfLexerFree;
    ctx->reset          = corpconfLexerReset;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 14:7: ( 'AT' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__11
 *
 * Looks to match the characters the constitute the token T__11
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__11(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__11;


    // corpconf.g:14:7: ( 'AT' )
    // corpconf.g:14:9: 'AT'
    {
        MATCHS(lit_1);
        if  (HASEXCEPTION())
        {
            goto ruleT__11Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__11Ex; /* Prevent compiler warnings */
    ruleT__11Ex: ;

}
// $ANTLR end T__11

//   Comes from: 15:7: ( 'ATTRIBUTE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__12
 *
 * Looks to match the characters the constitute the token T__12
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__12(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__12;


    // corpconf.g:15:7: ( 'ATTRIBUTE' )
    // corpconf.g:15:9: 'ATTRIBUTE'
    {
        MATCHS(lit_2);
        if  (HASEXCEPTION())
        {
            goto ruleT__12Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__12Ex; /* Prevent compiler warnings */
    ruleT__12Ex: ;

}
// $ANTLR end T__12

//   Comes from: 16:7: ( 'PROCESS' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__13
 *
 * Looks to match the characters the constitute the token T__13
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__13(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__13;


    // corpconf.g:16:7: ( 'PROCESS' )
    // corpconf.g:16:9: 'PROCESS'
    {
        MATCHS(lit_3);
        if  (HASEXCEPTION())
        {
            goto ruleT__13Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__13Ex; /* Prevent compiler warnings */
    ruleT__13Ex: ;

}
// $ANTLR end T__13

//   Comes from: 17:7: ( 'STRUCTURE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__14
 *
 * Looks to match the characters the constitute the token T__14
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__14(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__14;


    // corpconf.g:17:7: ( 'STRUCTURE' )
    // corpconf.g:17:9: 'STRUCTURE'
    {
        MATCHS(lit_4);
        if  (HASEXCEPTION())
        {
            goto ruleT__14Ex;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__14Ex; /* Prevent compiler warnings */
    ruleT__14Ex: ;

}
// $ANTLR end T__14

//   Comes from: 25:5: ( ( ' ' | '\\t' | '#' (~ '\\n' )* ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS_
 *
 * Looks to match the characters the constitute the token WS_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS_(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS_;


    // corpconf.g:25:5: ( ( ' ' | '\\t' | '#' (~ '\\n' )* ) )
    // corpconf.g:25:7: ( ' ' | '\\t' | '#' (~ '\\n' )* )
    {
        // corpconf.g:25:7: ( ' ' | '\\t' | '#' (~ '\\n' )* )
        {
            int alt2=3;
            switch ( LA(1) )
            {
            case ' ':
            	{
            		alt2=1;
            	}
                break;
            case '\t':
            	{
            		alt2=2;
            	}
                break;
            case '#':
            	{
            		alt2=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto ruleWS_Ex;

            }

            switch (alt2)
            {
        	case 1:
        	    // corpconf.g:25:8: ' '
        	    {
        	        MATCHC(' ');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleWS_Ex;
        	        }


        	    }
        	    break;
        	case 2:
        	    // corpconf.g:26:4: '\\t'
        	    {
        	        MATCHC('\t');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleWS_Ex;
        	        }


        	    }
        	    break;
        	case 3:
        	    // corpconf.g:27:4: '#' (~ '\\n' )*
        	    {
        	        MATCHC('#');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleWS_Ex;
        	        }


        	        // corpconf.g:27:8: (~ '\\n' )*

        	        for (;;)
        	        {
        	            int alt1=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA1_0 = LA(1);
        	                if ( (((LA1_0 >= 0x0000) && (LA1_0 <= '\t')) || ((LA1_0 >= 0x000B) && (LA1_0 <= 0xFFFF))))
        	                {
        	                    alt1=1;
        	                }

        	            }
        	            switch (alt1)
        	            {
        	        	case 1:
        	        	    // corpconf.g:
        	        	    {
        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= 0xFFFF)) )
        	        	        {
        	        	            CONSUME();
        	        	        }
        	        	        else
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	        	            LRECOVER();
        	        	            goto ruleWS_Ex;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop1;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop1: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }

        {
             SKIP(); 
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWS_Ex; /* Prevent compiler warnings */
    ruleWS_Ex: ;

}
// $ANTLR end WS_

//   Comes from: 32:4: ( ( '\"' (~ ( '\"' | '\\n' ) )* '\"' | '\\'' (~ ( '\\'' | '\\n' ) )* '\\'' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STR
 *
 * Looks to match the characters the constitute the token STR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTR(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STR;


    // corpconf.g:32:4: ( ( '\"' (~ ( '\"' | '\\n' ) )* '\"' | '\\'' (~ ( '\\'' | '\\n' ) )* '\\'' ) )
    // corpconf.g:32:8: ( '\"' (~ ( '\"' | '\\n' ) )* '\"' | '\\'' (~ ( '\\'' | '\\n' ) )* '\\'' )
    {
        // corpconf.g:32:8: ( '\"' (~ ( '\"' | '\\n' ) )* '\"' | '\\'' (~ ( '\\'' | '\\n' ) )* '\\'' )
        {
            int alt5=2;
            switch ( LA(1) )
            {
            case '"':
            	{
            		alt5=1;
            	}
                break;
            case '\'':
            	{
            		alt5=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruleSTREx;

            }

            switch (alt5)
            {
        	case 1:
        	    // corpconf.g:32:9: '\"' (~ ( '\"' | '\\n' ) )* '\"'
        	    {
        	        MATCHC('"');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTREx;
        	        }


        	        // corpconf.g:32:13: (~ ( '\"' | '\\n' ) )*

        	        for (;;)
        	        {
        	            int alt3=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA3_0 = LA(1);
        	                if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '\t')) || ((LA3_0 >= 0x000B) && (LA3_0 <= '!')) || ((LA3_0 >= '#') && (LA3_0 <= 0xFFFF))))
        	                {
        	                    alt3=1;
        	                }

        	            }
        	            switch (alt3)
        	            {
        	        	case 1:
        	        	    // corpconf.g:
        	        	    {
        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= 0xFFFF)) )
        	        	        {
        	        	            CONSUME();
        	        	        }
        	        	        else
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	        	            LRECOVER();
        	        	            goto ruleSTREx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop3;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop3: ; /* Jump out to here if this rule does not match */


        	        MATCHC('"');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTREx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // corpconf.g:33:4: '\\'' (~ ( '\\'' | '\\n' ) )* '\\''
        	    {
        	        MATCHC('\'');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTREx;
        	        }


        	        // corpconf.g:33:9: (~ ( '\\'' | '\\n' ) )*

        	        for (;;)
        	        {
        	            int alt4=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA4_0 = LA(1);
        	                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '\t')) || ((LA4_0 >= 0x000B) && (LA4_0 <= '&')) || ((LA4_0 >= '(') && (LA4_0 <= 0xFFFF))))
        	                {
        	                    alt4=1;
        	                }

        	            }
        	            switch (alt4)
        	            {
        	        	case 1:
        	        	    // corpconf.g:
        	        	    {
        	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= 0xFFFF)) )
        	        	        {
        	        	            CONSUME();
        	        	        }
        	        	        else
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	        	            LRECOVER();
        	        	            goto ruleSTREx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop4;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop4: ; /* Jump out to here if this rule does not match */


        	        MATCHC('\'');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTREx;
        	        }


        	    }
        	    break;

            }
        }

        {
             
            		//remove surrounding quotes
            		SETTEXT(GETTEXT()->subString(GETTEXT(),1,GETTEXT()->size-2));
            	   
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTREx; /* Prevent compiler warnings */
    ruleSTREx: ;

}
// $ANTLR end STR

//   Comes from: 46:2: ( ( '\\n' | '\\r' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NL
 *
 * Looks to match the characters the constitute the token NL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNL(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NL;


    	strcpy(paraphrase, "end of line");


    // corpconf.g:46:2: ( ( '\\n' | '\\r' ) )
    // corpconf.g:
    {
        if ( LA(1) == '\n' || LA(1) == '\r' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleNLEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNLEx; /* Prevent compiler warnings */
    ruleNLEx: ;

    {

        	paraphrase[0] = 0;

    }
}
// $ANTLR end NL

//   Comes from: 47:5: ( ( 'A' .. 'Z' ) ( 'A' .. 'Z' | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ATTR
 *
 * Looks to match the characters the constitute the token ATTR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mATTR(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ATTR;


    // corpconf.g:47:5: ( ( 'A' .. 'Z' ) ( 'A' .. 'Z' | '0' .. '9' )* )
    // corpconf.g:47:9: ( 'A' .. 'Z' ) ( 'A' .. 'Z' | '0' .. '9' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleATTREx;
        }


        // corpconf.g:47:19: ( 'A' .. 'Z' | '0' .. '9' )*

        for (;;)
        {
            int alt6=2;
            switch ( LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            	{
            		alt6=1;
            	}
                break;

            }

            switch (alt6)
            {
        	case 1:
        	    // corpconf.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleATTREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop6;	/* break out of the loop */
        	    break;
            }
        }
        loop6: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleATTREx; /* Prevent compiler warnings */
    ruleATTREx: ;

}
// $ANTLR end ATTR

//   Comes from: 48:5: ( ( 'a' .. 'z' | '0' .. '9' | '/' | '.' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '/' | '.' | '-' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PATH
 *
 * Looks to match the characters the constitute the token PATH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPATH(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PATH;


    // corpconf.g:48:5: ( ( 'a' .. 'z' | '0' .. '9' | '/' | '.' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '/' | '.' | '-' | '_' )* )
    // corpconf.g:48:9: ( 'a' .. 'z' | '0' .. '9' | '/' | '.' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '/' | '.' | '-' | '_' )*
    {
        if ( ((LA(1) >= '.') && (LA(1) <= '9')) || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto rulePATHEx;
        }


        // corpconf.g:49:3: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '/' | '.' | '-' | '_' )*

        for (;;)
        {
            int alt7=2;
            switch ( LA(1) )
            {
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt7=1;
            	}
                break;

            }

            switch (alt7)
            {
        	case 1:
        	    // corpconf.g:
        	    {
        	        if ( ((LA(1) >= '-') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto rulePATHEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop7;	/* break out of the loop */
        	    break;
            }
        }
        loop7: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto rulePATHEx; /* Prevent compiler warnings */
    rulePATHEx: ;

}
// $ANTLR end PATH

//   Comes from: 51:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACE
 *
 * Looks to match the characters the constitute the token LBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRACE(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRACE;


    // corpconf.g:51:7: ( '{' )
    // corpconf.g:51:9: '{'
    {
        MATCHC('{');
        if  (HASEXCEPTION())
        {
            goto ruleLBRACEEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLBRACEEx; /* Prevent compiler warnings */
    ruleLBRACEEx: ;

}
// $ANTLR end LBRACE

//   Comes from: 59:2: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACE
 *
 * Looks to match the characters the constitute the token RBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRACE(pcorpconfLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRACE;


    	strcpy(paraphrase, "`}'");


    // corpconf.g:59:2: ( '}' )
    // corpconf.g:59:4: '}'
    {
        MATCHC('}');
        if  (HASEXCEPTION())
        {
            goto ruleRBRACEEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRBRACEEx; /* Prevent compiler warnings */
    ruleRBRACEEx: ;

    {

        	paraphrase[0] = 0;

    }
}
// $ANTLR end RBRACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pcorpconfLexer ctx)
{
    {
        //  corpconf.g:1:8: ( T__11 | T__12 | T__13 | T__14 | WS_ | STR | NL | ATTR | PATH | LBRACE | RBRACE )

        ANTLR3_UINT32 alt8;

        alt8=11;

        switch ( LA(1) )
        {
        case 'A':
        	{
        		switch ( LA(2) )
        		{
        		case 'T':
        			{
        				switch ( LA(3) )
        				{
        				case 'T':
        					{
        						switch ( LA(4) )
        						{
        						case 'R':
        							{
        								switch ( LA(5) )
        								{
        								case 'I':
        									{
        										switch ( LA(6) )
        										{
        										case 'B':
        											{
        												switch ( LA(7) )
        												{
        												case 'U':
        													{
        														switch ( LA(8) )
        														{
        														case 'T':
        															{
        																switch ( LA(9) )
        																{
        																case 'E':
        																	{
        																		switch ( LA(10) )
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																			{
        																				alt8=8;
        																			}
        																		    break;

        																		default:
        																		    alt8=2;
        																		}

        																	}
        																    break;

        																default:
        																    alt8=8;
        																}

        															}
        														    break;

        														default:
        														    alt8=8;
        														}

        													}
        												    break;

        												default:
        												    alt8=8;
        												}

        											}
        										    break;

        										default:
        										    alt8=8;
        										}

        									}
        								    break;

        								default:
        								    alt8=8;
        								}

        							}
        						    break;

        						default:
        						    alt8=8;
        						}

        					}
        				    break;
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        					{
        						alt8=8;
        					}
        				    break;

        				default:
        				    alt8=1;
        				}

        			}
        		    break;

        		default:
        		    alt8=8;
        		}

        	}
            break;
        case 'P':
        	{
        		switch ( LA(2) )
        		{
        		case 'R':
        			{
        				switch ( LA(3) )
        				{
        				case 'O':
        					{
        						switch ( LA(4) )
        						{
        						case 'C':
        							{
        								switch ( LA(5) )
        								{
        								case 'E':
        									{
        										switch ( LA(6) )
        										{
        										case 'S':
        											{
        												switch ( LA(7) )
        												{
        												case 'S':
        													{
        														switch ( LA(8) )
        														{
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        															{
        																alt8=8;
        															}
        														    break;

        														default:
        														    alt8=3;
        														}

        													}
        												    break;

        												default:
        												    alt8=8;
        												}

        											}
        										    break;

        										default:
        										    alt8=8;
        										}

        									}
        								    break;

        								default:
        								    alt8=8;
        								}

        							}
        						    break;

        						default:
        						    alt8=8;
        						}

        					}
        				    break;

        				default:
        				    alt8=8;
        				}

        			}
        		    break;

        		default:
        		    alt8=8;
        		}

        	}
            break;
        case 'S':
        	{
        		switch ( LA(2) )
        		{
        		case 'T':
        			{
        				switch ( LA(3) )
        				{
        				case 'R':
        					{
        						switch ( LA(4) )
        						{
        						case 'U':
        							{
        								switch ( LA(5) )
        								{
        								case 'C':
        									{
        										switch ( LA(6) )
        										{
        										case 'T':
        											{
        												switch ( LA(7) )
        												{
        												case 'U':
        													{
        														switch ( LA(8) )
        														{
        														case 'R':
        															{
        																switch ( LA(9) )
        																{
        																case 'E':
        																	{
        																		switch ( LA(10) )
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																			{
        																				alt8=8;
        																			}
        																		    break;

        																		default:
        																		    alt8=4;
        																		}

        																	}
        																    break;

        																default:
        																    alt8=8;
        																}

        															}
        														    break;

        														default:
        														    alt8=8;
        														}

        													}
        												    break;

        												default:
        												    alt8=8;
        												}

        											}
        										    break;

        										default:
        										    alt8=8;
        										}

        									}
        								    break;

        								default:
        								    alt8=8;
        								}

        							}
        						    break;

        						default:
        						    alt8=8;
        						}

        					}
        				    break;

        				default:
        				    alt8=8;
        				}

        			}
        		    break;

        		default:
        		    alt8=8;
        		}

        	}
            break;
        case '\t':
        case ' ':
        case '#':
        	{
        		alt8=5;
        	}
            break;
        case '"':
        case '\'':
        	{
        		alt8=6;
        	}
            break;
        case '\n':
        case '\r':
        	{
        		alt8=7;
        	}
            break;
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'Q':
        case 'R':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        	{
        		alt8=8;
        	}
            break;
        case '.':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt8=9;
        	}
            break;
        case '{':
        	{
        		alt8=10;
        	}
            break;
        case '}':
        	{
        		alt8=11;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 8;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;

        }

        switch (alt8)
        {
    	case 1:
    	    // corpconf.g:1:10: T__11
    	    {
    	        /* 1:10: T__11 */
    	        mT__11(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // corpconf.g:1:16: T__12
    	    {
    	        /* 1:16: T__12 */
    	        mT__12(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // corpconf.g:1:22: T__13
    	    {
    	        /* 1:22: T__13 */
    	        mT__13(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // corpconf.g:1:28: T__14
    	    {
    	        /* 1:28: T__14 */
    	        mT__14(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // corpconf.g:1:34: WS_
    	    {
    	        /* 1:34: WS_ */
    	        mWS_(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // corpconf.g:1:38: STR
    	    {
    	        /* 1:38: STR */
    	        mSTR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // corpconf.g:1:42: NL
    	    {
    	        /* 1:42: NL */
    	        mNL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // corpconf.g:1:45: ATTR
    	    {
    	        /* 1:45: ATTR */
    	        mATTR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // corpconf.g:1:50: PATH
    	    {
    	        /* 1:50: PATH */
    	        mPATH(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // corpconf.g:1:55: LBRACE
    	    {
    	        /* 1:55: LBRACE */
    	        mLBRACE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // corpconf.g:1:62: RBRACE
    	    {
    	        /* 1:62: RBRACE */
    	        mRBRACE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */
