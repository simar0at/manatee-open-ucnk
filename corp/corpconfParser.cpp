/** \file
 *  This C source file was generated by $ANTLR version 3.2 Fedora release 14 (Laughlin) Wed Oct 13 19:37:52 UTC 2010
 *
 *     -  From the grammar source file : corpconf.g
 *     -                            On : 2011-12-06 15:03:45
 *     -                for the parser : corpconfParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#include <finlib/config.hh>
#include "corpconf.hh"
#include <string>

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "corpconfParser.hpp"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pcorpconfParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcorpconfParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pcorpconfParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pcorpconfParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   corpconfParserTokenNames[11+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "WS_",
        (pANTLR3_UINT8) "STR",
        (pANTLR3_UINT8) "NL",
        (pANTLR3_UINT8) "ATTR",
        (pANTLR3_UINT8) "PATH",
        (pANTLR3_UINT8) "LBRACE",
        (pANTLR3_UINT8) "RBRACE",
        (pANTLR3_UINT8) "'ATTRIBUTE'",
        (pANTLR3_UINT8) "'STRUCTURE'",
        (pANTLR3_UINT8) "'PROCESS'",
        (pANTLR3_UINT8) "'AT'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static corpconfParser_config_return	config    (pcorpconfParser ctx, CorpInfo &c);
static corpconfParser_block_return	block    (pcorpconfParser ctx, CorpInfo &c);
static corpconfParser_line_return	line    (pcorpconfParser ctx, CorpInfo &c);
static corpconfParser_value_return	value    (pcorpconfParser ctx);
static void	corpconfParserFree(pcorpconfParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "corpconf.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new corpconfParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcorpconfParser
corpconfParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return corpconfParserNewSSD(instream, NULL);
}

/** \brief Create a new corpconfParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcorpconfParser
corpconfParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcorpconfParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pcorpconfParser) ANTLR3_CALLOC(1, sizeof(corpconfParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in corpconfParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our corpconfParser interface
     */
    ctx->config	= config;
    ctx->block	= block;
    ctx->line	= line;
    ctx->value	= value;
    ctx->free			= corpconfParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = corpconfParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 corpconfParserFree(pcorpconfParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return corpconfParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_config269  */
static	ANTLR3_BITWORD FOLLOW_block_in_config269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_config269	= { FOLLOW_block_in_config269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_config272  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_config272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_config272	= { FOLLOW_EOF_in_config272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_line_in_block293  */
static	ANTLR3_BITWORD FOLLOW_line_in_block293_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000038C2) };
static  ANTLR3_BITSET_LIST FOLLOW_line_in_block293	= { FOLLOW_line_in_block293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NL_in_block296  */
static	ANTLR3_BITWORD FOLLOW_NL_in_block296_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000038C2) };
static  ANTLR3_BITSET_LIST FOLLOW_NL_in_block296	= { FOLLOW_NL_in_block296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_11_in_line319  */
static	ANTLR3_BITWORD FOLLOW_11_in_line319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004120) };
static  ANTLR3_BITSET_LIST FOLLOW_11_in_line319	= { FOLLOW_11_in_line319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_line323  */
static	ANTLR3_BITWORD FOLLOW_value_in_line323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000240) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_line323	= { FOLLOW_value_in_line323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_12_in_line334  */
static	ANTLR3_BITWORD FOLLOW_12_in_line334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004120) };
static  ANTLR3_BITSET_LIST FOLLOW_12_in_line334	= { FOLLOW_12_in_line334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_line338  */
static	ANTLR3_BITWORD FOLLOW_value_in_line338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000240) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_line338	= { FOLLOW_value_in_line338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_line349  */
static	ANTLR3_BITWORD FOLLOW_13_in_line349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004120) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_line349	= { FOLLOW_13_in_line349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_line353  */
static	ANTLR3_BITWORD FOLLOW_value_in_line353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000240) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_line353	= { FOLLOW_value_in_line353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LBRACE_in_line367  */
static	ANTLR3_BITWORD FOLLOW_LBRACE_in_line367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LBRACE_in_line367	= { FOLLOW_LBRACE_in_line367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NL_in_line369  */
static	ANTLR3_BITWORD FOLLOW_NL_in_line369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003CC0) };
static  ANTLR3_BITSET_LIST FOLLOW_NL_in_line369	= { FOLLOW_NL_in_line369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_block_in_line371  */
static	ANTLR3_BITWORD FOLLOW_block_in_line371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_block_in_line371	= { FOLLOW_block_in_line371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RBRACE_in_line376  */
static	ANTLR3_BITWORD FOLLOW_RBRACE_in_line376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_RBRACE_in_line376	= { FOLLOW_RBRACE_in_line376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NL_in_line380  */
static	ANTLR3_BITWORD FOLLOW_NL_in_line380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NL_in_line380	= { FOLLOW_NL_in_line380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTR_in_line387  */
static	ANTLR3_BITWORD FOLLOW_ATTR_in_line387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004120) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTR_in_line387	= { FOLLOW_ATTR_in_line387_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_line391  */
static	ANTLR3_BITWORD FOLLOW_value_in_line391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_line391	= { FOLLOW_value_in_line391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NL_in_line393  */
static	ANTLR3_BITWORD FOLLOW_NL_in_line393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NL_in_line393	= { FOLLOW_NL_in_line393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STR_in_value422  */
static	ANTLR3_BITWORD FOLLOW_STR_in_value422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STR_in_value422	= { FOLLOW_STR_in_value422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATH_in_value442  */
static	ANTLR3_BITWORD FOLLOW_PATH_in_value442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PATH_in_value442	= { FOLLOW_PATH_in_value442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_value459  */
static	ANTLR3_BITWORD FOLLOW_14_in_value459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_value459	= { FOLLOW_14_in_value459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PATH_in_value463  */
static	ANTLR3_BITWORD FOLLOW_PATH_in_value463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_PATH_in_value463	= { FOLLOW_PATH_in_value463_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start config
 * corpconf.g:59:1: config[CorpInfo &c] : block[c] EOF ;
 */
static corpconfParser_config_return
config(pcorpconfParser ctx, CorpInfo &c)
{   
    corpconfParser_config_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    corpconfParser_block_return block1;
    #undef	RETURN_TYPE_block1
    #define	RETURN_TYPE_block1 corpconfParser_block_return

    pANTLR3_BASE_TREE EOF2_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    EOF2       = NULL;
    block1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EOF2_tree   = NULL;


    retval.tree  = NULL;
    {
        // corpconf.g:60:2: ( block[c] EOF )
        // corpconf.g:60:4: block[c] EOF
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_block_in_config269);
            block1=block(ctx, c);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconfigEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, block1.tree);
            EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_config272); 
            if  (HASEXCEPTION())
            {
                goto ruleconfigEx;
            }

            EOF2_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EOF2));
            ADAPTOR->addChild(ADAPTOR, root_0, EOF2_tree);


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconfigEx; /* Prevent compiler warnings */
    ruleconfigEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if	(HASEXCEPTION())
    {
	/* catch(decl,action)
	 */
	{

	    		PREPORTERROR();
	    		RECOGNIZER->consumeUntil(RECOGNIZER, NL);
	    		config(CTX, c);
	    	
	}


    }
    else
    {
    }

    return retval;
}
/* $ANTLR end config */

/** 
 * $ANTLR start block
 * corpconf.g:68:1: block[CorpInfo &c] : ( line[c] | NL )* ;
 */
static corpconfParser_block_return
block(pcorpconfParser ctx, CorpInfo &c)
{   
    corpconfParser_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NL4;
    corpconfParser_line_return line3;
    #undef	RETURN_TYPE_line3
    #define	RETURN_TYPE_line3 corpconfParser_line_return

    pANTLR3_BASE_TREE NL4_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    NL4       = NULL;
    line3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NL4_tree   = NULL;


    retval.tree  = NULL;
    {
        // corpconf.g:69:2: ( ( line[c] | NL )* )
        // corpconf.g:69:4: ( line[c] | NL )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // corpconf.g:69:4: ( line[c] | NL )*

            for (;;)
            {
                int alt1=3;
                switch ( LA(1) ) 
                {
                case ATTR:
                case 11:
                case 12:
                case 13:
                	{
                		alt1=1;
                	}
                    break;
                case NL:
                	{
                		alt1=2;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // corpconf.g:69:5: line[c]
            	    {
            	        FOLLOWPUSH(FOLLOW_line_in_block293);
            	        line3=line(ctx, c);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleblockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, line3.tree);

            	    }
            	    break;
            	case 2:
            	    // corpconf.g:69:13: NL
            	    {
            	        NL4 = (pANTLR3_COMMON_TOKEN) MATCHT(NL, &FOLLOW_NL_in_block296); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleblockEx;
            	        }

            	        NL4_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NL4));
            	        ADAPTOR->addChild(ADAPTOR, root_0, NL4_tree);


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end block */

/** 
 * $ANTLR start line
 * corpconf.g:72:1: line[CorpInfo &c] : ( ( 'ATTRIBUTE' v= value | 'STRUCTURE' v= value | 'PROCESS' v= value ) ( LBRACE NL block[*b] r= RBRACE )? NL | a= ATTR v= value NL );
 */
static corpconfParser_line_return
line(pcorpconfParser ctx, CorpInfo &c)
{   
    corpconfParser_line_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    r;
    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    string_literal5;
    pANTLR3_COMMON_TOKEN    string_literal6;
    pANTLR3_COMMON_TOKEN    string_literal7;
    pANTLR3_COMMON_TOKEN    LBRACE8;
    pANTLR3_COMMON_TOKEN    NL9;
    pANTLR3_COMMON_TOKEN    NL11;
    pANTLR3_COMMON_TOKEN    NL12;
    corpconfParser_value_return v;
    #undef	RETURN_TYPE_v
    #define	RETURN_TYPE_v corpconfParser_value_return

    corpconfParser_block_return block10;
    #undef	RETURN_TYPE_block10
    #define	RETURN_TYPE_block10 corpconfParser_block_return

    pANTLR3_BASE_TREE r_tree;
    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE string_literal5_tree;
    pANTLR3_BASE_TREE string_literal6_tree;
    pANTLR3_BASE_TREE string_literal7_tree;
    pANTLR3_BASE_TREE LBRACE8_tree;
    pANTLR3_BASE_TREE NL9_tree;
    pANTLR3_BASE_TREE NL11_tree;
    pANTLR3_BASE_TREE NL12_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    CorpInfo *b;
    r       = NULL;
    a       = NULL;
    string_literal5       = NULL;
    string_literal6       = NULL;
    string_literal7       = NULL;
    LBRACE8       = NULL;
    NL9       = NULL;
    NL11       = NULL;
    NL12       = NULL;
    v.tree = NULL;

    block10.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    r_tree   = NULL;
    a_tree   = NULL;
    string_literal5_tree   = NULL;
    string_literal6_tree   = NULL;
    string_literal7_tree   = NULL;
    LBRACE8_tree   = NULL;
    NL9_tree   = NULL;
    NL11_tree   = NULL;
    NL12_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  corpconf.g:74:2: ( ( 'ATTRIBUTE' v= value | 'STRUCTURE' v= value | 'PROCESS' v= value ) ( LBRACE NL block[*b] r= RBRACE )? NL | a= ATTR v= value NL )
            
            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) ) 
            {
            case 11:
            case 12:
            case 13:
            	{
            		alt4=1;
            	}
                break;
            case ATTR:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulelineEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // corpconf.g:75:3: ( 'ATTRIBUTE' v= value | 'STRUCTURE' v= value | 'PROCESS' v= value ) ( LBRACE NL block[*b] r= RBRACE )? NL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // corpconf.g:75:3: ( 'ATTRIBUTE' v= value | 'STRUCTURE' v= value | 'PROCESS' v= value )
        	        {
        	            int alt2=3;
        	            switch ( LA(1) ) 
        	            {
        	            case 11:
        	            	{
        	            		alt2=1;
        	            	}
        	                break;
        	            case 12:
        	            	{
        	            		alt2=2;
        	            	}
        	                break;
        	            case 13:
        	            	{
        	            		alt2=3;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 2;
        	                EXCEPTION->state        = 0;


        	                goto rulelineEx;
        	            }

        	            switch (alt2) 
        	            {
        	        	case 1:
        	        	    // corpconf.g:75:5: 'ATTRIBUTE' v= value
        	        	    {
        	        	        string_literal5 = (pANTLR3_COMMON_TOKEN) MATCHT(11, &FOLLOW_11_in_line319); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        string_literal5_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal5));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal5_tree);

        	        	        FOLLOWPUSH(FOLLOW_value_in_line323);
        	        	        v=value(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, v.tree);
        	        	        {
        	        	             b = new CorpInfo();
        	        	            			  c.attrs.push_back (std::pair<std::string,CorpInfo*>(v.v, b)); 
        	        	            			
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // corpconf.g:79:5: 'STRUCTURE' v= value
        	        	    {
        	        	        string_literal6 = (pANTLR3_COMMON_TOKEN) MATCHT(12, &FOLLOW_12_in_line334); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        string_literal6_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal6));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal6_tree);

        	        	        FOLLOWPUSH(FOLLOW_value_in_line338);
        	        	        v=value(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, v.tree);
        	        	        {
        	        	             b = new CorpInfo();
        	        	            			  c.structs.push_back (std::pair<std::string,CorpInfo*>(v.v, b)); 
        	        	            			
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // corpconf.g:83:5: 'PROCESS' v= value
        	        	    {
        	        	        string_literal7 = (pANTLR3_COMMON_TOKEN) MATCHT(13, &FOLLOW_13_in_line349); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        string_literal7_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal7));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal7_tree);

        	        	        FOLLOWPUSH(FOLLOW_value_in_line353);
        	        	        v=value(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, v.tree);
        	        	        {
        	        	             b = new CorpInfo();
        	        	            			  c.procs.push_back (std::pair<std::string,CorpInfo*>(v.v, b)); 
        	        	            			
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // corpconf.g:88:3: ( LBRACE NL block[*b] r= RBRACE )?
        	        {
        	            int alt3=2;
        	            switch ( LA(1) ) 
        	            {
        	                case LBRACE:
        	                	{
        	                		alt3=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt3) 
        	            {
        	        	case 1:
        	        	    // corpconf.g:88:4: LBRACE NL block[*b] r= RBRACE
        	        	    {
        	        	        LBRACE8 = (pANTLR3_COMMON_TOKEN) MATCHT(LBRACE, &FOLLOW_LBRACE_in_line367); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        LBRACE8_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LBRACE8));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LBRACE8_tree);

        	        	        NL9 = (pANTLR3_COMMON_TOKEN) MATCHT(NL, &FOLLOW_NL_in_line369); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        NL9_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NL9));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, NL9_tree);

        	        	        FOLLOWPUSH(FOLLOW_block_in_line371);
        	        	        block10=block(ctx, *b);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, block10.tree);
        	        	        r = (pANTLR3_COMMON_TOKEN) MATCHT(RBRACE, &FOLLOW_RBRACE_in_line376); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelineEx;
        	        	        }

        	        	        r_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, r));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, r_tree);


        	        	    }
        	        	    break;

        	            }
        	        }
        	        NL11 = (pANTLR3_COMMON_TOKEN) MATCHT(NL, &FOLLOW_NL_in_line380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelineEx;
        	        }

        	        NL11_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NL11));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NL11_tree);


        	    }
        	    break;
        	case 2:
        	    // corpconf.g:89:4: a= ATTR v= value NL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        a = (pANTLR3_COMMON_TOKEN) MATCHT(ATTR, &FOLLOW_ATTR_in_line387); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelineEx;
        	        }

        	        a_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, a));
        	        ADAPTOR->addChild(ADAPTOR, root_0, a_tree);

        	        FOLLOWPUSH(FOLLOW_value_in_line391);
        	        v=value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelineEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, v.tree);
        	        NL12 = (pANTLR3_COMMON_TOKEN) MATCHT(NL, &FOLLOW_NL_in_line393); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelineEx;
        	        }

        	        NL12_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NL12));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NL12_tree);

        	        {
        	            c.opts [std::string((const char *) (a->getText(a))->chars)] = v.v;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelineEx; /* Prevent compiler warnings */
    rulelineEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if	(HASEXCEPTION())
    {
	/* catch(decl,action)
	 */
	{

	    		PREPORTERROR();
	    		RECOGNIZER->consumeUntil(RECOGNIZER, NL);
	    		block(CTX, *b);
	    	
	}


    }
    else
    {
    }

    return retval;
}
/* $ANTLR end line */

/** 
 * $ANTLR start value
 * corpconf.g:98:1: value returns [std::string v] : (s= STR | p= PATH | 'AT' a= PATH );
 */
static corpconfParser_value_return
value(pcorpconfParser ctx)
{   
    corpconfParser_value_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    p;
    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    string_literal13;

    pANTLR3_BASE_TREE s_tree;
    pANTLR3_BASE_TREE p_tree;
    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE string_literal13_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    s       = NULL;
    p       = NULL;
    a       = NULL;
    string_literal13       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    s_tree   = NULL;
    p_tree   = NULL;
    a_tree   = NULL;
    string_literal13_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  corpconf.g:99:2: (s= STR | p= PATH | 'AT' a= PATH )
            
            ANTLR3_UINT32 alt5;

            alt5=3;

            switch ( LA(1) ) 
            {
            case STR:
            	{
            		alt5=1;
            	}
                break;
            case PATH:
            	{
            		alt5=2;
            	}
                break;
            case 14:
            	{
            		alt5=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto rulevalueEx;
            }

            switch (alt5) 
            {
        	case 1:
        	    // corpconf.g:99:4: s= STR
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(STR, &FOLLOW_STR_in_value422); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        s_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, s));
        	        ADAPTOR->addChild(ADAPTOR, root_0, s_tree);

        	        {
        	            retval.v= std::string((const char *) (s->getText(s))->chars);
        	        }

        	    }
        	    break;
        	case 2:
        	    // corpconf.g:100:4: p= PATH
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        p = (pANTLR3_COMMON_TOKEN) MATCHT(PATH, &FOLLOW_PATH_in_value442); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        p_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, p));
        	        ADAPTOR->addChild(ADAPTOR, root_0, p_tree);

        	        {
        	            retval.v= std::string((const char *) (p->getText(p))->chars);
        	        }

        	    }
        	    break;
        	case 3:
        	    // corpconf.g:101:4: 'AT' a= PATH
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal13 = (pANTLR3_COMMON_TOKEN) MATCHT(14, &FOLLOW_14_in_value459); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        string_literal13_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal13));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal13_tree);

        	        a = (pANTLR3_COMMON_TOKEN) MATCHT(PATH, &FOLLOW_PATH_in_value463); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevalueEx;
        	        }

        	        a_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, a));
        	        ADAPTOR->addChild(ADAPTOR, root_0, a_tree);

        	        {
        	            retval.v= std::string("@") + std::string((const char *) (a->getText(a))->chars);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end value */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
